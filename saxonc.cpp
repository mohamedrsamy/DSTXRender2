/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "../SaxonProcessor.h",
            "../XdmAtomicValue.h",
            "../XdmItem.h",
            "../XdmNode.h",
            "../XdmValue.h"
        ],
        "include_dirs": [
            "."
        ],
        "language": "c++",
        "name": "saxonc",
        "sources": [
            "saxonc.pyx",
            "../SaxonProcessor.cpp",
            "../SaxonCGlue.c",
            "../SaxonCXPath.c",
            "../XdmValue.cpp",
            "../XdmItem.cpp",
            "../XdmNode.cpp",
            "../XdmAtomicValue.cpp",
            "../XsltProcessor.cpp",
            "../Xslt30Processor.cpp",
            "../XQueryProcessor.cpp",
            "../XPathProcessor.cpp",
            "../SchemaValidator.cpp"
        ]
    },
    "module_name": "saxonc"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__saxonc
#define __PYX_HAVE_API__saxonc
/* Early includes */
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include "../SaxonProcessor.h"
#include "../XdmValue.h"
#include "../XdmItem.h"
#include "../XdmNode.h"
#include "../XdmAtomicValue.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "saxonc.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_6saxonc_PySaxonProcessor;
struct __pyx_obj_6saxonc_PyXsltProcessor;
struct __pyx_obj_6saxonc_PyXslt30Processor;
struct __pyx_obj_6saxonc_PyXQueryProcessor;
struct __pyx_obj_6saxonc_PyXPathProcessor;
struct __pyx_obj_6saxonc_PySchemaValidator;
struct __pyx_obj_6saxonc_PyXdmValue;
struct __pyx_obj_6saxonc_PyXdmItem;
struct __pyx_obj_6saxonc_PyXdmNode;
struct __pyx_obj_6saxonc_PyXdmAtomicValue;

/* "saxonc.pyx":31
 * 
 * 
 * cdef class PySaxonProcessor:             # <<<<<<<<<<<<<<
 *     """An SaxonProcessor acts as a factory for generating XQuery, XPath, Schema and XSLT compilers.
 *     This class is itself the context that needs to be managed (i.e. allocation & release)
 */
struct __pyx_obj_6saxonc_PySaxonProcessor {
  PyObject_HEAD
  SaxonProcessor *thisptr;
};


/* "saxonc.pyx":449
 * 
 * 
 * cdef class PyXsltProcessor:             # <<<<<<<<<<<<<<
 *      """An PyXsltProcessor represents factory to compile, load and execute a stylesheet.
 *      It is possible to cache the context and the stylesheet in the PyXsltProcessor """
 */
struct __pyx_obj_6saxonc_PyXsltProcessor {
  PyObject_HEAD
  XsltProcessor *thisxptr;
};


/* "saxonc.pyx":967
 * parametersDict = None
 * 
 * cdef class PyXslt30Processor:             # <<<<<<<<<<<<<<
 *      """An PyXslt30Processor represents factory to compile, load and execute a stylesheet.
 *      It is possible to cache the context and the stylesheet in the PyXslt30Processor """
 */
struct __pyx_obj_6saxonc_PyXslt30Processor {
  PyObject_HEAD
  Xslt30Processor *thisxptr;
};


/* "saxonc.pyx":2190
 * 
 * 
 * cdef class PyXQueryProcessor:             # <<<<<<<<<<<<<<
 *      """An PyXQueryProcessor object represents factory to compile, load and execute queries. """
 * 
 */
struct __pyx_obj_6saxonc_PyXQueryProcessor {
  PyObject_HEAD
  XQueryProcessor *thisxqptr;
};


/* "saxonc.pyx":2574
 *         return make_py_str(self.thisxqptr.getErrorCode(index))
 * 
 * cdef class PyXPathProcessor:             # <<<<<<<<<<<<<<
 *      """An XPathProcessor represents factory to compile, load and execute the XPath query. """
 *      cdef saxoncClasses.XPathProcessor *thisxpptr      # hold a C++ instance which we're wrapping
 */
struct __pyx_obj_6saxonc_PyXPathProcessor {
  PyObject_HEAD
  XPathProcessor *thisxpptr;
};


/* "saxonc.pyx":2891
 * 
 * 
 * cdef class PySchemaValidator:             # <<<<<<<<<<<<<<
 *      """An PySchemaValidator represents factory for validating instance documents against a schema."""
 * 
 */
struct __pyx_obj_6saxonc_PySchemaValidator {
  PyObject_HEAD
  SchemaValidator *thissvptr;
};


/* "saxonc.pyx":3202
 *         self.thissvptr.setLax(lax)
 * 
 * cdef class PyXdmValue:             # <<<<<<<<<<<<<<
 *      """Value in the XDM data model. A value is a sequence of zero or more items, each item being either an atomic value or a node. """
 *      cdef saxoncClasses.XdmValue *thisvptr      # hold a C++ instance which we're wrapping
 */
struct __pyx_obj_6saxonc_PyXdmValue {
  PyObject_HEAD
  XdmValue *thisvptr;
};


/* "saxonc.pyx":3304
 *         return ustring
 * 
 * cdef class PyXdmItem(PyXdmValue):             # <<<<<<<<<<<<<<
 *      cdef saxoncClasses.XdmItem *derivedptr      # hold a C++ instance which we're wrapping
 * 
 */
struct __pyx_obj_6saxonc_PyXdmItem {
  struct __pyx_obj_6saxonc_PyXdmValue __pyx_base;
  XdmItem *derivedptr;
};


/* "saxonc.pyx":3391
 *         return val
 * 
 * cdef class PyXdmNode(PyXdmItem):             # <<<<<<<<<<<<<<
 *      cdef saxoncClasses.XdmNode *derivednptr      # hold a C++ instance which we're wrapping
 * 
 */
struct __pyx_obj_6saxonc_PyXdmNode {
  struct __pyx_obj_6saxonc_PyXdmItem __pyx_base;
  XdmNode *derivednptr;
};


/* "saxonc.pyx":3637
 * 
 * 
 * cdef class PyXdmAtomicValue(PyXdmItem):             # <<<<<<<<<<<<<<
 *      """
 *      The class PyXdmAtomicValue represents an item in an Xath sequence that is an atomic value. The value may belong to any of the
 */
struct __pyx_obj_6saxonc_PyXdmAtomicValue {
  struct __pyx_obj_6saxonc_PyXdmItem __pyx_base;
  XdmAtomicValue *derivedaptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* py_dict_items.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CStringEquals.proto */
static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'saxoncClasses' */

/* Module declarations from 'saxonc' */
static PyTypeObject *__pyx_ptype_6saxonc_PySaxonProcessor = 0;
static PyTypeObject *__pyx_ptype_6saxonc_PyXsltProcessor = 0;
static PyTypeObject *__pyx_ptype_6saxonc_PyXslt30Processor = 0;
static PyTypeObject *__pyx_ptype_6saxonc_PyXQueryProcessor = 0;
static PyTypeObject *__pyx_ptype_6saxonc_PyXPathProcessor = 0;
static PyTypeObject *__pyx_ptype_6saxonc_PySchemaValidator = 0;
static PyTypeObject *__pyx_ptype_6saxonc_PyXdmValue = 0;
static PyTypeObject *__pyx_ptype_6saxonc_PyXdmItem = 0;
static PyTypeObject *__pyx_ptype_6saxonc_PyXdmNode = 0;
static PyTypeObject *__pyx_ptype_6saxonc_PyXdmAtomicValue = 0;
static char const *__pyx_f_6saxonc_make_c_str(PyObject *); /*proto*/
static PyObject *__pyx_f_6saxonc_make_py_str(char const *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "saxonc"
extern int __pyx_module_is_main_saxonc;
int __pyx_module_is_main_saxonc = 0;

/* Implementation of 'saxonc' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_Warning;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static const char __pyx_k__16[] = "";
static const char __pyx_k__36[] = "*";
static const char __pyx_k_uri[] = "uri";
static const char __pyx_k_TEXT[] = "TEXT";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_kwds[] = "kwds";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_save[] = "save";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_isfile[] = "isfile";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_tunnel[] = "tunnel";
static const char __pyx_k_COMMENT[] = "COMMENT";
static const char __pyx_k_ELEMENT[] = "ELEMENT";
static const char __pyx_k_UNKNOWN[] = "UNKNOWN";
static const char __pyx_k_Warning[] = "Warning";
static const char __pyx_k_comment[] = "comment";
static const char __pyx_k_element[] = "element";
static const char __pyx_k_license[] = "license";
static const char __pyx_k_os_path[] = "os.path";
static const char __pyx_k_unknown[] = "unknown";
static const char __pyx_k_xml_uri[] = "xml_uri";
static const char __pyx_k_DOCUMENT[] = "DOCUMENT";
static const char __pyx_k_document[] = "document";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_nodekind[] = "nodekind";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_xdm_item[] = "xdm_item";
static const char __pyx_k_xdm_node[] = "xdm_node";
static const char __pyx_k_xml_text[] = "xml_text";
static const char __pyx_k_xsd_file[] = "xsd_file";
static const char __pyx_k_xsd_text[] = "xsd_text";
static const char __pyx_k_ATTRIBUTE[] = "ATTRIBUTE";
static const char __pyx_k_NAMESPACE[] = "NAMESPACE";
static const char __pyx_k_PyXdmItem[] = "PyXdmItem";
static const char __pyx_k_PyXdmNode[] = "PyXdmNode";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_attribute[] = "attribute";
static const char __pyx_k_file_name[] = "file_name";
static const char __pyx_k_is_atomic[] = "is_atomic";
static const char __pyx_k_namespace[] = "namespace";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_traceback[] = "traceback";
static const char __pyx_k_xdm_value[] = "xdm_value";
static const char __pyx_k_PyXdmValue[] = "PyXdmValue";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_query_file[] = "query_file";
static const char __pyx_k_query_text[] = "query_text";
static const char __pyx_k_value_type[] = "value_type";
static const char __pyx_k_config_file[] = "config_file";
static const char __pyx_k_output_file[] = "output_file";
static const char __pyx_k_set_context[] = "set_context";
static const char __pyx_k_source_file[] = "source_file";
static const char __pyx_k_function_name[] = "function_name";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_template_name[] = "template_name";
static const char __pyx_k_xml_file_name[] = "xml_file_name";
static const char __pyx_k_does_not_exist[] = " does not exist";
static const char __pyx_k_exception_type[] = "exception_type";
static const char __pyx_k_input_xdm_item[] = "input_xdm_item";
static const char __pyx_k_parametersDict[] = "parametersDict";
static const char __pyx_k_set_query_file[] = "set_query_file";
static const char __pyx_k_PyXsltProcessor[] = "PyXsltProcessor";
static const char __pyx_k_associated_file[] = "associated_file";
static const char __pyx_k_exception_value[] = "exception_value";
static const char __pyx_k_input_file_name[] = "input_file_name";
static const char __pyx_k_set_output_file[] = "set_output_file";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_stylesheet_file[] = "stylesheet_file";
static const char __pyx_k_stylesheet_node[] = "stylesheet_node";
static const char __pyx_k_stylesheet_text[] = "stylesheet_text";
static const char __pyx_k_PySaxonProcessor[] = "PySaxonProcessor";
static const char __pyx_k_PyXPathProcessor[] = "PyXPathProcessor";
static const char __pyx_k_PyXdmAtomicValue[] = "PyXdmAtomicValue";
static const char __pyx_k_output_file_name[] = "output_file_name";
static const char __pyx_k_PySchemaValidator[] = "PySchemaValidator";
static const char __pyx_k_PyXQueryProcessor[] = "PyXQueryProcessor";
static const char __pyx_k_PyXslt30Processor[] = "PyXslt30Processor";
static const char __pyx_k_set_query_content[] = "set_query_content";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Unknown_node_kind_d[] = "Unknown node kind: %d";
static const char __pyx_k_is_not_an_PyXdmValue[] = " is not an PyXdmValue";
static const char __pyx_k_setSourceFromXdmNode[] = "setSourceFromXdmNode";
static const char __pyx_k_Empty_string_returned[] = "Empty string returned";
static const char __pyx_k_Source_file_with_name[] = "Source file with name ";
static const char __pyx_k_PROCESSING_INSTRUCTION[] = "PROCESSING_INSTRUCTION";
static const char __pyx_k_processing_instruction[] = "processing-instruction";
static const char __pyx_k_XML_file_does_not_exist[] = "XML file does not exist";
static const char __pyx_k_Argument_value_at_position[] = "Argument value at position ";
static const char __pyx_k_Stylesheet_file_does_not_exist[] = "Stylesheet file does not exist";
static const char __pyx_k_Error_output_file_name_required[] = "Error: output_file_name required in method run_query_to_file";
static const char __pyx_k_Initial_template_parameters_can[] = "Initial template parameters can only be of type PyXdmValue";
static const char __pyx_k_is_not_an_PyXdmValue_The_follow[] = " is not an PyXdmValue. The following object found: ";
static const char __pyx_k_package_saxonc_This_documentati[] = "@package saxonc\nThis documentation details the Python API for Saxon/C, which has been written in cython for Python3.\n\nSaxon/C is a cross-compiled variant of Saxon from the Java platform to the C/C++ platform.\nSaxon/C provides processing in XSLT 3.0, XQuery 3.0/3.1 and XPath 2.0/3.0/3.1, and Schema validation 1.0/1.1.\nMain classes in Saxon/C Python API: PySaxonProcessor, PyXsltProcessor, PyXslt30Processor, PyXQueryProcessor, PySchemaValidator, PyXdmValue, PyXdmItem, PyXdmNode and PyXdmAtomicValue.";
static const char __pyx_k_source_file_name_does_not_exist[] = "source file name does not exist";
static const char __pyx_k_CompileStylesheet_should_only_be[] = "CompileStylesheet should only be one of the keyword option: (stylesheet_text|stylesheet_file|stylesheet_node), also in allowed in addition the optional keyword 'save' boolean with the keyword 'outputfile' keyword";
static const char __pyx_k_Error_Saxon_Processor_is_not_lic[] = "Error: Saxon Processor is not licensed for schema processing!";
static const char __pyx_k_Error_parseXml_should_only_conta[] = "Error: parseXml should only contain one of the following keyword arguments: (xml_file_name|xml_text|xml_uri)";
static const char __pyx_k_Error_register_schema_should_onl[] = "Error: register_schema should only contain one of the following keyword arguments: (xsd_text|xsd_file)";
static const char __pyx_k_Error_setSource_should_only_cont[] = "Error: setSource should only contain one of the following keyword arguments: (file_name|xdm_node)";
static const char __pyx_k_Error_set_context_should_only_co[] = "Error: set_context should only contain one of the following keyword arguments: (file_name|xdm_item)";
static const char __pyx_k_Error_set_global_context_item_sh[] = "Error: set_global_context_item should only contain one of the following keyword arguments: (file_name|xdm_item)";
static const char __pyx_k_Error_set_initial_match_selectio[] = "Error: set_initial_match_selection should only contain one of the following keyword arguments: (file_name|xdm_value)";
static const char __pyx_k_Error_validate_should_only_conta[] = "Error: validate should only contain one of the following keyword arguments: (file_name|xdm_node|xml_text)";
static const char __pyx_k_Output_file_option_not_in_keywor[] = "Output file option not in keyword arugment for compile_stylesheet";
static const char __pyx_k_The_PyXdmItem_is_an_PyXdmAtomicV[] = "The PyXdmItem is an PyXdmAtomicValue therefore cannot be sub-classed to an PyXdmNode";
static const char __pyx_k_The_PyXdmItem_is_not_an_PyXdmAto[] = "The PyXdmItem is not an PyXdmAtomicValue";
static const char __pyx_k_Unable_to_set_output_file_output[] = "Unable to set output_file. output_file has the value None";
static const char __pyx_k_Warning_transform_to_string_shou[] = "Warning: transform_to_string should only the following keyword arguments: (source_file, stylesheet_file, xdm_node)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_xdm_item_value_must_be_of_type_P[] = "xdm_item value must be of type PyXdmItem";
static const char __pyx_k_CompileStylesheet_should_only_be_2[] = "CompileStylesheet should only be one of the keyword option: (associated_file|stylesheet_text|stylesheet_file|stylesheet_node), also in allowed in addition the optional keyword 'save' boolean with the keyword 'outputfile' keyword";
static const char __pyx_k_Warning_transform_to_string_shou_2[] = "Warning: transform_to_string should only contain the following keyword arguments: (source_file|xdm_node, stylesheet_file)";
static PyObject *__pyx_n_s_ATTRIBUTE;
static PyObject *__pyx_kp_s_Argument_value_at_position;
static PyObject *__pyx_n_s_COMMENT;
static PyObject *__pyx_kp_s_CompileStylesheet_should_only_be;
static PyObject *__pyx_kp_s_CompileStylesheet_should_only_be_2;
static PyObject *__pyx_n_s_DOCUMENT;
static PyObject *__pyx_n_s_ELEMENT;
static PyObject *__pyx_kp_s_Empty_string_returned;
static PyObject *__pyx_kp_s_Error_Saxon_Processor_is_not_lic;
static PyObject *__pyx_kp_s_Error_output_file_name_required;
static PyObject *__pyx_kp_s_Error_parseXml_should_only_conta;
static PyObject *__pyx_kp_s_Error_register_schema_should_onl;
static PyObject *__pyx_kp_s_Error_setSource_should_only_cont;
static PyObject *__pyx_kp_s_Error_set_context_should_only_co;
static PyObject *__pyx_kp_s_Error_set_global_context_item_sh;
static PyObject *__pyx_kp_s_Error_set_initial_match_selectio;
static PyObject *__pyx_kp_s_Error_validate_should_only_conta;
static PyObject *__pyx_kp_s_Initial_template_parameters_can;
static PyObject *__pyx_n_s_NAMESPACE;
static PyObject *__pyx_kp_s_Output_file_option_not_in_keywor;
static PyObject *__pyx_n_s_PROCESSING_INSTRUCTION;
static PyObject *__pyx_n_s_PySaxonProcessor;
static PyObject *__pyx_n_s_PySchemaValidator;
static PyObject *__pyx_n_s_PyXPathProcessor;
static PyObject *__pyx_n_s_PyXQueryProcessor;
static PyObject *__pyx_n_s_PyXdmAtomicValue;
static PyObject *__pyx_n_s_PyXdmItem;
static PyObject *__pyx_n_s_PyXdmNode;
static PyObject *__pyx_n_s_PyXdmValue;
static PyObject *__pyx_n_s_PyXslt30Processor;
static PyObject *__pyx_n_s_PyXsltProcessor;
static PyObject *__pyx_kp_s_Source_file_with_name;
static PyObject *__pyx_kp_s_Stylesheet_file_does_not_exist;
static PyObject *__pyx_n_s_TEXT;
static PyObject *__pyx_kp_s_The_PyXdmItem_is_an_PyXdmAtomicV;
static PyObject *__pyx_kp_s_The_PyXdmItem_is_not_an_PyXdmAto;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_UNKNOWN;
static PyObject *__pyx_kp_s_UTF_8;
static PyObject *__pyx_kp_s_Unable_to_set_output_file_output;
static PyObject *__pyx_kp_s_Unknown_node_kind_d;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Warning;
static PyObject *__pyx_kp_s_Warning_transform_to_string_shou;
static PyObject *__pyx_kp_s_Warning_transform_to_string_shou_2;
static PyObject *__pyx_kp_s_XML_file_does_not_exist;
static PyObject *__pyx_kp_s__16;
static PyObject *__pyx_n_s__36;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_associated_file;
static PyObject *__pyx_n_s_attribute;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_comment;
static PyObject *__pyx_n_s_config_file;
static PyObject *__pyx_n_s_document;
static PyObject *__pyx_kp_s_does_not_exist;
static PyObject *__pyx_n_s_element;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_exception_type;
static PyObject *__pyx_n_s_exception_value;
static PyObject *__pyx_n_s_file_name;
static PyObject *__pyx_n_s_function_name;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_input_file_name;
static PyObject *__pyx_n_s_input_xdm_item;
static PyObject *__pyx_n_s_is_atomic;
static PyObject *__pyx_kp_s_is_not_an_PyXdmValue;
static PyObject *__pyx_kp_s_is_not_an_PyXdmValue_The_follow;
static PyObject *__pyx_n_s_isfile;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_kwds;
static PyObject *__pyx_n_s_license;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_namespace;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_nodekind;
static PyObject *__pyx_n_s_os_path;
static PyObject *__pyx_n_s_output_file;
static PyObject *__pyx_n_s_output_file_name;
static PyObject *__pyx_n_s_parametersDict;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_kp_s_processing_instruction;
static PyObject *__pyx_n_s_query_file;
static PyObject *__pyx_n_s_query_text;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_save;
static PyObject *__pyx_n_s_setSourceFromXdmNode;
static PyObject *__pyx_n_s_set_context;
static PyObject *__pyx_n_s_set_output_file;
static PyObject *__pyx_n_s_set_query_content;
static PyObject *__pyx_n_s_set_query_file;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_source_file;
static PyObject *__pyx_kp_s_source_file_name_does_not_exist;
static PyObject *__pyx_n_s_stylesheet_file;
static PyObject *__pyx_n_s_stylesheet_node;
static PyObject *__pyx_n_s_stylesheet_text;
static PyObject *__pyx_n_s_template_name;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_traceback;
static PyObject *__pyx_n_s_tunnel;
static PyObject *__pyx_n_s_unknown;
static PyObject *__pyx_n_s_uri;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_value_type;
static PyObject *__pyx_n_s_xdm_item;
static PyObject *__pyx_kp_s_xdm_item_value_must_be_of_type_P;
static PyObject *__pyx_n_s_xdm_node;
static PyObject *__pyx_n_s_xdm_value;
static PyObject *__pyx_n_s_xml_file_name;
static PyObject *__pyx_n_s_xml_text;
static PyObject *__pyx_n_s_xml_uri;
static PyObject *__pyx_n_s_xsd_file;
static PyObject *__pyx_n_s_xsd_text;
static int __pyx_pf_6saxonc_16PySaxonProcessor___cinit__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_config_file, PyObject *__pyx_v_license); /* proto */
static void __pyx_pf_6saxonc_16PySaxonProcessor_2__dealloc__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_4__enter__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_6__exit__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exception_type, CYTHON_UNUSED PyObject *__pyx_v_exception_value, CYTHON_UNUSED PyObject *__pyx_v_traceback); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_7version___get__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_8release(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_3cwd___get__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_10set_cwd(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_cwd); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_12set_resources_directory(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_dir_); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_19resources_directory___get__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_14set_configuration_property(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_16clear_configuration_properties(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_15is_schema_aware___get__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_18new_xslt_processor(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_20new_xslt30_processor(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_22new_xquery_processor(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_24new_xpath_processor(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_26new_schema_validator(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_28make_string_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_str_); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_30make_integer_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_32make_double_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_34make_float_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_36make_long_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_38make_boolean_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_40make_qname_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_str_); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_42make_atomic_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_value_type, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_44get_string_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_item); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_46parse_xml(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_48exception_occurred(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_50exception_clear(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_52__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_54__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6saxonc_15PyXsltProcessor___cinit__(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self); /* proto */
static void __pyx_pf_6saxonc_15PyXsltProcessor_2__dealloc__(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_4set_cwd(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_cwd); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_6set_source(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_8set_output_file(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_output_file); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_10set_jit_compilation(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, bool __pyx_v_jit); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_12set_parameter(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_14get_parameter(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_16remove_parameter(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_18set_property(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_20clear_parameters(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_22clear_properties(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_24get_xsl_messages(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_26transform_to_string(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_28transform_to_file(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_30transform_to_value(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_32compile_stylesheet(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_34release_stylesheet(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_36exception_occurred(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_38check_exception(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_40exception_clear(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_42exception_count(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_44get_error_message(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_46get_error_code(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_48__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_50__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6saxonc_17PyXslt30Processor___cinit__(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self); /* proto */
static void __pyx_pf_6saxonc_17PyXslt30Processor_2__dealloc__(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_4set_cwd(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_cwd); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_6set_global_context_item(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_8set_initial_match_selection(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_10set_output_file(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_output_file); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_12set_jit_compilation(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, bool __pyx_v_jit); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_14set_result_as_raw_value(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, bool __pyx_v_is_raw); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_16set_parameter(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_18get_parameter(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_20remove_parameter(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_22set_property(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_24clear_parameters(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_26clear_properties(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_28set_initial_template_parameters(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, bool __pyx_v_tunnel, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_30get_xsl_messages(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_32transform_to_string(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_34transform_to_file(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_36transform_to_value(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_38apply_templates_returning_value(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_40apply_templates_returning_string(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_42apply_templates_returning_file(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_44call_template_returning_value(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_template_name, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_46call_template_returning_string(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_template_name, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_48call_template_returning_file(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_template_name, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_50call_function_returning_value(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_function_name, PyObject *__pyx_v_args, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_52call_function_returning_string(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_function_name, PyObject *__pyx_v_args, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_54call_function_returning_file(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_function_name, PyObject *__pyx_v_args, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_56add_package(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_file_names); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_58clearPackages(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_60compile_stylesheet(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_62release_stylesheet(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_64exception_occurred(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_66check_exception(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_68exception_clear(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_70exception_count(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_72get_error_message(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_74get_error_code(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_76__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_78__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6saxonc_17PyXQueryProcessor___cinit__(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self); /* proto */
static void __pyx_pf_6saxonc_17PyXQueryProcessor_2__dealloc__(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_4set_context(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_6set_output_file(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_output_file); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_8set_parameter(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_10remove_parameter(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_12set_property(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_14clear_parameters(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_16clear_properties(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_18set_updating(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_updating); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_20run_query_to_value(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_22run_query_to_string(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_24run_query_to_file(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_26declare_namespace(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_prefix, PyObject *__pyx_v_uri); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_28set_query_file(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_file_name); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_30set_query_content(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_content); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_32set_query_base_uri(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_base_uri); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_34set_cwd(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_cwd); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_36check_exception(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_38exception_occurred(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_40exception_clear(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_42exception_count(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_44get_error_message(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_46get_error_code(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_48__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_50__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6saxonc_16PyXPathProcessor___cinit__(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self); /* proto */
static void __pyx_pf_6saxonc_16PyXPathProcessor_2__dealloc__(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_4set_base_uri(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_uri); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_6evaluate(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_xpath_str); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_8evaluate_single(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_xpath_str); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_10set_context(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_12set_cwd(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_cwd); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_14effective_boolean_value(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_xpath_str); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_16set_parameter(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_18remove_parameter(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_20set_property(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_22declare_namespace(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_prefix, PyObject *__pyx_v_uri); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_24set_backwards_compatible(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_option); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_26set_caching(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_is_caching); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_28import_schema_namespace(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_uri); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_30clear_parameters(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_32clear_properties(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_34check_exception(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_36exception_occurred(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_38exception_clear(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_40exception_count(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_42get_error_message(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_44get_error_code(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_46__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_48__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6saxonc_17PySchemaValidator___cinit__(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self); /* proto */
static void __pyx_pf_6saxonc_17PySchemaValidator_2__dealloc__(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_4set_cwd(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_cwd); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_6register_schema(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_8set_output_file(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_output_file); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_10validate(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_12validate_to_node(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_14set_source_node(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_source); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_17validation_report___get__(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_16set_parameter(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_18remove_parameter(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_20set_property(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_22clear_parameters(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_24clear_properties(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_26exception_occurred(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_28exception_clear(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_30exception_count(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_32get_error_message(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_34get_error_code(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_36set_lax(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_lax); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_38__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_40__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6saxonc_10PyXdmValue___cinit__(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self); /* proto */
static void __pyx_pf_6saxonc_10PyXdmValue_2__dealloc__(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_10PyXdmValue_4add_xdm_item(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self, struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6saxonc_10PyXdmValue_4head___get__(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_10PyXdmValue_6item_at(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6saxonc_10PyXdmValue_4size___get__(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_10PyXdmValue_8__repr__(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_10PyXdmValue_10__str__(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_10PyXdmValue_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_10PyXdmValue_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6saxonc_9PyXdmItem___cinit__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self); /* proto */
static void __pyx_pf_6saxonc_9PyXdmItem_2__dealloc__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmItem_12string_value___get__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmItem_4__repr__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmItem_6__str__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmItem_9is_atomic___get__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmItem_8get_node_value(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmItem_4head___get__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmItem_10get_atomic_value(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmItem_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmItem_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6saxonc_9PyXdmNode___cinit__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static void __pyx_pf_6saxonc_9PyXdmNode_2__dealloc__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_4head___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_9node_kind___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_13node_kind_str___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_4name___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_11typed_value___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_8base_uri___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_12string_value___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_4__str__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_6__repr__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_8get_parent(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_10get_attribute_value(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_15attribute_count___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_10attributes___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_8children___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_9PyXdmNode_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6saxonc_16PyXdmAtomicValue___cinit__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self); /* proto */
static void __pyx_pf_6saxonc_16PyXdmAtomicValue_2__dealloc__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_19primitive_type_name___get__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_13boolean_value___get__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_12double_value___get__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_4head___get__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_13integer_value___get__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_12string_value___get__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_4__str__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_6__repr__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6saxonc_PySaxonProcessor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6saxonc_PyXsltProcessor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6saxonc_PyXslt30Processor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6saxonc_PyXQueryProcessor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6saxonc_PyXPathProcessor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6saxonc_PySchemaValidator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6saxonc_PyXdmValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6saxonc_PyXdmItem(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6saxonc_PyXdmNode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6saxonc_PyXdmAtomicValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items = {0, &__pyx_n_s_items, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyString_Type_encode = {0, &__pyx_n_s_encode, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
/* Late includes */

/* "saxonc.pyx":19
 * from os.path import isfile
 * 
 * cdef const char * make_c_str(str str_value):             # <<<<<<<<<<<<<<
 *     if str_value is None:
 *         return NULL
 */

static char const *__pyx_f_6saxonc_make_c_str(PyObject *__pyx_v_str_value) {
  PyObject *__pyx_v_c_string = NULL;
  char const *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_c_str", 0);

  /* "saxonc.pyx":20
 * 
 * cdef const char * make_c_str(str str_value):
 *     if str_value is None:             # <<<<<<<<<<<<<<
 *         return NULL
 *     else:
 */
  __pyx_t_1 = (__pyx_v_str_value == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":21
 * cdef const char * make_c_str(str str_value):
 *     if str_value is None:
 *         return NULL             # <<<<<<<<<<<<<<
 *     else:
 *         c_string = str_value.encode('UTF-8')
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "saxonc.pyx":20
 * 
 * cdef const char * make_c_str(str str_value):
 *     if str_value is None:             # <<<<<<<<<<<<<<
 *         return NULL
 *     else:
 */
  }

  /* "saxonc.pyx":23
 *         return NULL
 *     else:
 *         c_string = str_value.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         return c_string
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyString_Type_encode, __pyx_v_str_value, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_c_string = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "saxonc.pyx":24
 *     else:
 *         c_string = str_value.encode('UTF-8')
 *         return c_string             # <<<<<<<<<<<<<<
 * 
 * cdef str make_py_str(const char * c_value):
 */
    __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_c_string); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 24, __pyx_L1_error)
    __pyx_r = __pyx_t_4;
    goto __pyx_L0;
  }

  /* "saxonc.pyx":19
 * from os.path import isfile
 * 
 * cdef const char * make_c_str(str str_value):             # <<<<<<<<<<<<<<
 *     if str_value is None:
 *         return NULL
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("saxonc.make_c_str", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_string);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":26
 *         return c_string
 * 
 * cdef str make_py_str(const char * c_value):             # <<<<<<<<<<<<<<
 *     ustring = c_value.decode('UTF-8') if c_value is not NULL else None
 *     return ustring
 */

static PyObject *__pyx_f_6saxonc_make_py_str(char const *__pyx_v_c_value) {
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_py_str", 0);

  /* "saxonc.pyx":27
 * 
 * cdef str make_py_str(const char * c_value):
 *     ustring = c_value.decode('UTF-8') if c_value is not NULL else None             # <<<<<<<<<<<<<<
 *     return ustring
 * 
 */
  if (((__pyx_v_c_value != NULL) != 0)) {
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_value, 0, strlen(__pyx_v_c_value), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":28
 * cdef str make_py_str(const char * c_value):
 *     ustring = c_value.decode('UTF-8') if c_value is not NULL else None
 *     return ustring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyString_CheckExact(__pyx_v_ustring))||((__pyx_v_ustring) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_ustring)->tp_name), 0))) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = ((PyObject*)__pyx_v_ustring);
  goto __pyx_L0;

  /* "saxonc.pyx":26
 *         return c_string
 * 
 * cdef str make_py_str(const char * c_value):             # <<<<<<<<<<<<<<
 *     ustring = c_value.decode('UTF-8') if c_value is not NULL else None
 *     return ustring
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.make_py_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":48
 *     # @param license Flag that a license is to be used
 *     # @contextlib.contextmanager
 *     def __cinit__(self, config_file= None, license=False):             # <<<<<<<<<<<<<<
 *         """
 *         __cinit__(self, license=False)
 */

/* Python wrapper */
static int __pyx_pw_6saxonc_16PySaxonProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6saxonc_16PySaxonProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_config_file = 0;
  PyObject *__pyx_v_license = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_config_file,&__pyx_n_s_license,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_config_file);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_license);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 48, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_config_file = values[0];
    __pyx_v_license = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 48, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor___cinit__(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), __pyx_v_config_file, __pyx_v_license);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6saxonc_16PySaxonProcessor___cinit__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_config_file, PyObject *__pyx_v_license) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  SaxonProcessor *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "saxonc.pyx":58
 * 
 *         """
 *         self.thisptr = new saxoncClasses.SaxonProcessor(license)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_license); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 58, __pyx_L1_error)
  try {
    __pyx_t_2 = new SaxonProcessor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 58, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_2;

  /* "saxonc.pyx":48
 *     # @param license Flag that a license is to be used
 *     # @contextlib.contextmanager
 *     def __cinit__(self, config_file= None, license=False):             # <<<<<<<<<<<<<<
 *         """
 *         __cinit__(self, license=False)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":60
 *         self.thisptr = new saxoncClasses.SaxonProcessor(license)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """The destructor."""
 *         del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_6saxonc_16PySaxonProcessor_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6saxonc_16PySaxonProcessor_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6saxonc_16PySaxonProcessor_2__dealloc__(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6saxonc_16PySaxonProcessor_2__dealloc__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "saxonc.pyx":62
 *     def __dealloc__(self):
 *         """The destructor."""
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
  delete __pyx_v_self->thisptr;

  /* "saxonc.pyx":60
 *         self.thisptr = new saxoncClasses.SaxonProcessor(license)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """The destructor."""
 *         del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "saxonc.pyx":64
 *         del self.thisptr
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *       """enter method for use with the keyword 'with' context"""
 *       return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_5__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_4__enter__[] = "enter method for use with the keyword 'with' context";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_5__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_4__enter__(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_4__enter__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "saxonc.pyx":66
 *     def __enter__(self):
 *       """enter method for use with the keyword 'with' context"""
 *       return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exception_type, exception_value, traceback):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "saxonc.pyx":64
 *         del self.thisptr
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *       """enter method for use with the keyword 'with' context"""
 *       return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":68
 *       return self
 * 
 *     def __exit__(self, exception_type, exception_value, traceback):             # <<<<<<<<<<<<<<
 *         """The exit method for the context PySaxonProcessor. Here we release the Jet VM resources.
 *         If we have more than one live PySaxonProcessor object the release() method has no effect.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_7__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_6__exit__[] = "The exit method for the context PySaxonProcessor. Here we release the Jet VM resources.\n        If we have more than one live PySaxonProcessor object the release() method has no effect.\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_7__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_exception_type = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exception_value = 0;
  CYTHON_UNUSED PyObject *__pyx_v_traceback = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exception_type,&__pyx_n_s_exception_value,&__pyx_n_s_traceback,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exception_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exception_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); __PYX_ERR(1, 68, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_traceback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); __PYX_ERR(1, 68, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) __PYX_ERR(1, 68, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exception_type = values[0];
    __pyx_v_exception_value = values[1];
    __pyx_v_traceback = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 68, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_6__exit__(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), __pyx_v_exception_type, __pyx_v_exception_value, __pyx_v_traceback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_6__exit__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exception_type, CYTHON_UNUSED PyObject *__pyx_v_exception_value, CYTHON_UNUSED PyObject *__pyx_v_traceback) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "saxonc.pyx":72
 *         If we have more than one live PySaxonProcessor object the release() method has no effect.
 *         """
 *         self.thisptr.release()             # <<<<<<<<<<<<<<
 * 
 *     property version:
 */
  __pyx_v_self->thisptr->release();

  /* "saxonc.pyx":68
 *       return self
 * 
 *     def __exit__(self, exception_type, exception_value, traceback):             # <<<<<<<<<<<<<<
 *         """The exit method for the context PySaxonProcessor. Here we release the Jet VM resources.
 *         If we have more than one live PySaxonProcessor object the release() method has no effect.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":81
 *             str: The Saxon version
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef const char* c_string = self.thisptr.version()
 *             ustring = c_string.decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_7version_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_7version_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_7version___get__(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_7version___get__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":82
 *         """
 *         def __get__(self):
 *             cdef const char* c_string = self.thisptr.version()             # <<<<<<<<<<<<<<
 *             ustring = c_string.decode('UTF-8')
 *             return ustring
 */
  __pyx_v_c_string = __pyx_v_self->thisptr->version();

  /* "saxonc.pyx":83
 *         def __get__(self):
 *             cdef const char* c_string = self.thisptr.version()
 *             ustring = c_string.decode('UTF-8')             # <<<<<<<<<<<<<<
 *             return ustring
 * 
 */
  __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":84
 *             cdef const char* c_string = self.thisptr.version()
 *             ustring = c_string.decode('UTF-8')
 *             return ustring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":81
 *             str: The Saxon version
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef const char* c_string = self.thisptr.version()
 *             ustring = c_string.decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.version.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":87
 * 
 * 
 *     def release(self):             # <<<<<<<<<<<<<<
 *         """
 *         release(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_9release(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_8release[] = "\n        release(self) \n        Clean up and destroy Java VM to release memory used.";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_9release(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("release (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_8release(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_8release(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("release", 0);

  /* "saxonc.pyx":92
 *         Clean up and destroy Java VM to release memory used."""
 * 
 *         self.thisptr.release()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr->release();

  /* "saxonc.pyx":87
 * 
 * 
 *     def release(self):             # <<<<<<<<<<<<<<
 *         """
 *         release(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":96
 * 
 *     @property
 *     def cwd(self):             # <<<<<<<<<<<<<<
 *         """
 *         cwd Property represents the current working directorty
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_3cwd_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_3cwd_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_3cwd___get__(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_3cwd___get__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":101
 * 
 *         :str: Get or set the current working directory"""
 *         cdef const char* c_string = self.thisptr.getcwd()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->thisptr->getcwd();

  /* "saxonc.pyx":102
 *         :str: Get or set the current working directory"""
 *         cdef const char* c_string = self.thisptr.getcwd()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":103
 *         cdef const char* c_string = self.thisptr.getcwd()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":96
 * 
 *     @property
 *     def cwd(self):             # <<<<<<<<<<<<<<
 *         """
 *         cwd Property represents the current working directorty
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.cwd.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":106
 * 
 * 
 *     def set_cwd(self, cwd):             # <<<<<<<<<<<<<<
 *          py_value_string = cwd.encode('UTF-8') if cwd is not None else None
 *          cdef char * c_str_ = py_value_string if cwd is not None else ""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_11set_cwd(PyObject *__pyx_v_self, PyObject *__pyx_v_cwd); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_11set_cwd(PyObject *__pyx_v_self, PyObject *__pyx_v_cwd) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cwd (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_10set_cwd(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_cwd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_10set_cwd(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_cwd) {
  PyObject *__pyx_v_py_value_string = NULL;
  char *__pyx_v_c_str_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cwd", 0);

  /* "saxonc.pyx":107
 * 
 *     def set_cwd(self, cwd):
 *          py_value_string = cwd.encode('UTF-8') if cwd is not None else None             # <<<<<<<<<<<<<<
 *          cdef char * c_str_ = py_value_string if cwd is not None else ""
 *          self.thisptr.setcwd(c_str_)
 */
  __pyx_t_2 = (__pyx_v_cwd != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cwd, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":108
 *     def set_cwd(self, cwd):
 *          py_value_string = cwd.encode('UTF-8') if cwd is not None else None
 *          cdef char * c_str_ = py_value_string if cwd is not None else ""             # <<<<<<<<<<<<<<
 *          self.thisptr.setcwd(c_str_)
 * 
 */
  __pyx_t_2 = (__pyx_v_cwd != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 108, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_str_ = __pyx_t_6;

  /* "saxonc.pyx":109
 *          py_value_string = cwd.encode('UTF-8') if cwd is not None else None
 *          cdef char * c_str_ = py_value_string if cwd is not None else ""
 *          self.thisptr.setcwd(c_str_)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr->setcwd(__pyx_v_c_str_);

  /* "saxonc.pyx":106
 * 
 * 
 *     def set_cwd(self, cwd):             # <<<<<<<<<<<<<<
 *          py_value_string = cwd.encode('UTF-8') if cwd is not None else None
 *          cdef char * c_str_ = py_value_string if cwd is not None else ""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.set_cwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":112
 * 
 * 
 *     def set_resources_directory(self, dir_):             # <<<<<<<<<<<<<<
 *         """
 *         Property to set or get resources directory
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_13set_resources_directory(PyObject *__pyx_v_self, PyObject *__pyx_v_dir_); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_12set_resources_directory[] = "\n        Property to set or get resources directory \n        \n        :str: A string of the resources directory which Saxon will use\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_13set_resources_directory(PyObject *__pyx_v_self, PyObject *__pyx_v_dir_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_resources_directory (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_12set_resources_directory(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_dir_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_12set_resources_directory(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_dir_) {
  PyObject *__pyx_v_py_value_string = NULL;
  char *__pyx_v_c_str_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_resources_directory", 0);

  /* "saxonc.pyx":119
 * 
 *         """
 *         py_value_string = dir_.encode('UTF-8') if dir_ is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_str_ = py_value_string if dir_ is not None else ""
 *         self.thisptr.setResourcesDirectory(c_str_)
 */
  __pyx_t_2 = (__pyx_v_dir_ != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dir_, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":120
 *         """
 *         py_value_string = dir_.encode('UTF-8') if dir_ is not None else None
 *         cdef char * c_str_ = py_value_string if dir_ is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisptr.setResourcesDirectory(c_str_)
 * 
 */
  __pyx_t_2 = (__pyx_v_dir_ != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 120, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_str_ = __pyx_t_6;

  /* "saxonc.pyx":121
 *         py_value_string = dir_.encode('UTF-8') if dir_ is not None else None
 *         cdef char * c_str_ = py_value_string if dir_ is not None else ""
 *         self.thisptr.setResourcesDirectory(c_str_)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->thisptr->setResourcesDirectory(__pyx_v_c_str_);

  /* "saxonc.pyx":112
 * 
 * 
 *     def set_resources_directory(self, dir_):             # <<<<<<<<<<<<<<
 *         """
 *         Property to set or get resources directory
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.set_resources_directory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":124
 * 
 *     @property
 *     def resources_directory(self):             # <<<<<<<<<<<<<<
 *         cdef const char* c_string = self.thisptr.getResourcesDirectory()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_19resources_directory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_19resources_directory_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_19resources_directory___get__(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_19resources_directory___get__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":125
 *     @property
 *     def resources_directory(self):
 *         cdef const char* c_string = self.thisptr.getResourcesDirectory()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->thisptr->getResourcesDirectory();

  /* "saxonc.pyx":126
 *     def resources_directory(self):
 *         cdef const char* c_string = self.thisptr.getResourcesDirectory()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":127
 *         cdef const char* c_string = self.thisptr.getResourcesDirectory()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 *     def set_configuration_property(self, name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":124
 * 
 *     @property
 *     def resources_directory(self):             # <<<<<<<<<<<<<<
 *         cdef const char* c_string = self.thisptr.getResourcesDirectory()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.resources_directory.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":129
 *         return ustring
 * 
 *     def set_configuration_property(self, name, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_configuration_property(self, name, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_15set_configuration_property(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_14set_configuration_property[] = "\n        set_configuration_property(self, name, value)\n        Set configuration property specific to the processor in use.\n        Properties set here are common across all processors. \n\n        Args:\n            name (str): The name of the property\n            value (str): The value of the property\n\n        Example:\n          'l': 'on' or 'off' - to enable the line number\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_15set_configuration_property(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_configuration_property (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_configuration_property", 1, 2, 2, 1); __PYX_ERR(1, 129, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_configuration_property") < 0)) __PYX_ERR(1, 129, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_configuration_property", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 129, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.set_configuration_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_14set_configuration_property(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_14set_configuration_property(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_py_name_string = NULL;
  char *__pyx_v_c_str_;
  PyObject *__pyx_v_py_value_string = NULL;
  char *__pyx_v_c_value_str_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_configuration_property", 0);

  /* "saxonc.pyx":143
 * 
 *         """
 *         py_name_string = name.encode('UTF-8') if name is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_str_ = py_name_string if name is not None else ""
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_name_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":144
 *         """
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_str_ = py_name_string if name is not None else ""             # <<<<<<<<<<<<<<
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         cdef char * c_value_str_ = py_value_string if value is not None else ""
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_name_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 144, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_str_ = __pyx_t_6;

  /* "saxonc.pyx":145
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_str_ = py_name_string if name is not None else ""
 *         py_value_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_value_str_ = py_value_string if value is not None else ""
 *         self.thisptr.setConfigurationProperty(c_str_, c_value_str_)
 */
  __pyx_t_2 = (__pyx_v_value != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":146
 *         cdef char * c_str_ = py_name_string if name is not None else ""
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         cdef char * c_value_str_ = py_value_string if value is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisptr.setConfigurationProperty(c_str_, c_value_str_)
 * 
 */
  __pyx_t_2 = (__pyx_v_value != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_value_str_ = __pyx_t_6;

  /* "saxonc.pyx":147
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         cdef char * c_value_str_ = py_value_string if value is not None else ""
 *         self.thisptr.setConfigurationProperty(c_str_, c_value_str_)             # <<<<<<<<<<<<<<
 * 
 *     def clear_configuration_properties(self):
 */
  __pyx_v_self->thisptr->setConfigurationProperty(__pyx_v_c_str_, __pyx_v_c_value_str_);

  /* "saxonc.pyx":129
 *         return ustring
 * 
 *     def set_configuration_property(self, name, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_configuration_property(self, name, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.set_configuration_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_name_string);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":149
 *         self.thisptr.setConfigurationProperty(c_str_, c_value_str_)
 * 
 *     def clear_configuration_properties(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_configuration_properties(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_17clear_configuration_properties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_16clear_configuration_properties[] = "\n        clear_configuration_properties(self)\n        Clear the configurations properties in use by the processor \n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_17clear_configuration_properties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_configuration_properties (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_16clear_configuration_properties(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_16clear_configuration_properties(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_configuration_properties", 0);

  /* "saxonc.pyx":155
 * 
 *         """
 *         self.thisptr.clearConfigurationProperties()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->thisptr->clearConfigurationProperties();

  /* "saxonc.pyx":149
 *         self.thisptr.setConfigurationProperty(c_str_, c_value_str_)
 * 
 *     def clear_configuration_properties(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_configuration_properties(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":158
 * 
 *     @property
 *     def is_schema_aware(self):             # <<<<<<<<<<<<<<
 *         """
 *         is_schema_aware(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_15is_schema_aware_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_15is_schema_aware_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_15is_schema_aware___get__(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_15is_schema_aware___get__(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":165
 *         :bool: Indicate if the processor is schema aware, True or False otherwise
 *         """
 *         return self.thisptr.isSchemaAwareProcessor()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->isSchemaAwareProcessor()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":158
 * 
 *     @property
 *     def is_schema_aware(self):             # <<<<<<<<<<<<<<
 *         """
 *         is_schema_aware(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.is_schema_aware.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":168
 * 
 * 
 *     def new_xslt_processor(self):             # <<<<<<<<<<<<<<
 *         """
 *         new_xslt_processor(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_19new_xslt_processor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_18new_xslt_processor[] = "\n        new_xslt_processor(self)\n        Create an PyXsltProcessor. A PyXsltProcessor is used to compile and execute XSLT stylesheets. \n\n        Returns: \n            PyXsltProcessor: a newly created PyXsltProcessor\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_19new_xslt_processor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_xslt_processor (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_18new_xslt_processor(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_18new_xslt_processor(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_xslt_processor", 0);

  /* "saxonc.pyx":177
 * 
 *         """
 *         cdef PyXsltProcessor val = PyXsltProcessor()             # <<<<<<<<<<<<<<
 *         val.thisxptr = self.thisptr.newXsltProcessor()
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXsltProcessor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":178
 *         """
 *         cdef PyXsltProcessor val = PyXsltProcessor()
 *         val.thisxptr = self.thisptr.newXsltProcessor()             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_v_val->thisxptr = __pyx_v_self->thisptr->newXsltProcessor();

  /* "saxonc.pyx":179
 *         cdef PyXsltProcessor val = PyXsltProcessor()
 *         val.thisxptr = self.thisptr.newXsltProcessor()
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def new_xslt30_processor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":168
 * 
 * 
 *     def new_xslt_processor(self):             # <<<<<<<<<<<<<<
 *         """
 *         new_xslt_processor(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.new_xslt_processor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":181
 *         return val
 * 
 *     def new_xslt30_processor(self):             # <<<<<<<<<<<<<<
 *         """
 *         new_xslt30_processor(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_21new_xslt30_processor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_20new_xslt30_processor[] = "\n        new_xslt30_processor(self)\n        Create an PyXslt30Processor. A PyXslt30Processor is used to compile and execute XSLT 3.0 stylesheets. \n\n        Returns: \n            PyXslt30Processor: a newly created PyXslt30Processor\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_21new_xslt30_processor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_xslt30_processor (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_20new_xslt30_processor(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_20new_xslt30_processor(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_xslt30_processor", 0);

  /* "saxonc.pyx":190
 * 
 *         """
 *         cdef PyXslt30Processor val = PyXslt30Processor()             # <<<<<<<<<<<<<<
 *         val.thisxptr = self.thisptr.newXslt30Processor()
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXslt30Processor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":191
 *         """
 *         cdef PyXslt30Processor val = PyXslt30Processor()
 *         val.thisxptr = self.thisptr.newXslt30Processor()             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_v_val->thisxptr = __pyx_v_self->thisptr->newXslt30Processor();

  /* "saxonc.pyx":192
 *         cdef PyXslt30Processor val = PyXslt30Processor()
 *         val.thisxptr = self.thisptr.newXslt30Processor()
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def new_xquery_processor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":181
 *         return val
 * 
 *     def new_xslt30_processor(self):             # <<<<<<<<<<<<<<
 *         """
 *         new_xslt30_processor(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.new_xslt30_processor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":194
 *         return val
 * 
 *     def new_xquery_processor(self):             # <<<<<<<<<<<<<<
 *         """
 *         new_xquery_processor(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_23new_xquery_processor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_22new_xquery_processor[] = "\n        new_xquery_processor(self)\n        Create an PyXqueryProcessor. A PyXQueryProcessor is used to compile and execute XQuery queries. \n\n        Returns: \n            PyXQueryProcessor: a newly created PyXQueryProcessor\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_23new_xquery_processor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_xquery_processor (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_22new_xquery_processor(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_22new_xquery_processor(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_xquery_processor", 0);

  /* "saxonc.pyx":203
 * 
 *         """
 *         cdef PyXQueryProcessor val = PyXQueryProcessor()             # <<<<<<<<<<<<<<
 *         val.thisxqptr = self.thisptr.newXQueryProcessor()
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXQueryProcessor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":204
 *         """
 *         cdef PyXQueryProcessor val = PyXQueryProcessor()
 *         val.thisxqptr = self.thisptr.newXQueryProcessor()             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_v_val->thisxqptr = __pyx_v_self->thisptr->newXQueryProcessor();

  /* "saxonc.pyx":205
 *         cdef PyXQueryProcessor val = PyXQueryProcessor()
 *         val.thisxqptr = self.thisptr.newXQueryProcessor()
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def new_xpath_processor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":194
 *         return val
 * 
 *     def new_xquery_processor(self):             # <<<<<<<<<<<<<<
 *         """
 *         new_xquery_processor(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.new_xquery_processor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":207
 *         return val
 * 
 *     def new_xpath_processor(self):             # <<<<<<<<<<<<<<
 *         """
 *         new_xpath_processor(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_25new_xpath_processor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_24new_xpath_processor[] = "\n        new_xpath_processor(self)\n        Create an PyXPathProcessor. A PyXPathProcessor is used to compile and execute XPath expressions. \n\n        Returns: \n            PyXPathProcessor: a newly created XPathProcessor\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_25new_xpath_processor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_xpath_processor (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_24new_xpath_processor(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_24new_xpath_processor(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_xpath_processor", 0);

  /* "saxonc.pyx":216
 * 
 *         """
 *         cdef PyXPathProcessor val = PyXPathProcessor()             # <<<<<<<<<<<<<<
 *         val.thisxpptr = self.thisptr.newXPathProcessor()
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXPathProcessor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":217
 *         """
 *         cdef PyXPathProcessor val = PyXPathProcessor()
 *         val.thisxpptr = self.thisptr.newXPathProcessor()             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_v_val->thisxpptr = __pyx_v_self->thisptr->newXPathProcessor();

  /* "saxonc.pyx":218
 *         cdef PyXPathProcessor val = PyXPathProcessor()
 *         val.thisxpptr = self.thisptr.newXPathProcessor()
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def new_schema_validator(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":207
 *         return val
 * 
 *     def new_xpath_processor(self):             # <<<<<<<<<<<<<<
 *         """
 *         new_xpath_processor(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.new_xpath_processor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":220
 *         return val
 * 
 *     def new_schema_validator(self):             # <<<<<<<<<<<<<<
 *         """
 *         new_schema_validator(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_27new_schema_validator(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_26new_schema_validator[] = "\n        new_schema_validator(self)\n        Create a PySchemaValidator which can be used to validate instance documents against the schema held by this \n\n        Returns: \n            PySchemaValidator: a newly created PySchemaValidator\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_27new_schema_validator(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_schema_validator (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_26new_schema_validator(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_26new_schema_validator(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_schema_validator", 0);

  /* "saxonc.pyx":229
 * 
 *         """
 *         cdef PySchemaValidator val = PySchemaValidator()             # <<<<<<<<<<<<<<
 *         val.thissvptr = self.thisptr.newSchemaValidator()
 *         if val.thissvptr is NULL:
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PySchemaValidator)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":230
 *         """
 *         cdef PySchemaValidator val = PySchemaValidator()
 *         val.thissvptr = self.thisptr.newSchemaValidator()             # <<<<<<<<<<<<<<
 *         if val.thissvptr is NULL:
 *             raise Exception("Error: Saxon Processor is not licensed for schema processing!")
 */
  __pyx_v_val->thissvptr = __pyx_v_self->thisptr->newSchemaValidator();

  /* "saxonc.pyx":231
 *         cdef PySchemaValidator val = PySchemaValidator()
 *         val.thissvptr = self.thisptr.newSchemaValidator()
 *         if val.thissvptr is NULL:             # <<<<<<<<<<<<<<
 *             raise Exception("Error: Saxon Processor is not licensed for schema processing!")
 *         return val
 */
  __pyx_t_2 = ((__pyx_v_val->thissvptr == NULL) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":232
 *         val.thissvptr = self.thisptr.newSchemaValidator()
 *         if val.thissvptr is NULL:
 *             raise Exception("Error: Saxon Processor is not licensed for schema processing!")             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 232, __pyx_L1_error)

    /* "saxonc.pyx":231
 *         cdef PySchemaValidator val = PySchemaValidator()
 *         val.thissvptr = self.thisptr.newSchemaValidator()
 *         if val.thissvptr is NULL:             # <<<<<<<<<<<<<<
 *             raise Exception("Error: Saxon Processor is not licensed for schema processing!")
 *         return val
 */
  }

  /* "saxonc.pyx":233
 *         if val.thissvptr is NULL:
 *             raise Exception("Error: Saxon Processor is not licensed for schema processing!")
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def make_string_value(self, str_):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":220
 *         return val
 * 
 *     def new_schema_validator(self):             # <<<<<<<<<<<<<<
 *         """
 *         new_schema_validator(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.new_schema_validator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":235
 *         return val
 * 
 *     def make_string_value(self, str_):             # <<<<<<<<<<<<<<
 *         """
 *         make_string_value(self, str_)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_29make_string_value(PyObject *__pyx_v_self, PyObject *__pyx_v_str_); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_28make_string_value[] = "\n        make_string_value(self, str_)\n        Factory method. Unlike the constructor, this avoids creating a new StringValue in the case\n        of a zero-length string (and potentially other strings, in future)\n        \n        Args:\n            str_ (str): the String value. Null is taken as equivalent to \"\".\n\n        Returns:\n            PyXdmAtomicValue: The corresponding Xdm StringValue\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_29make_string_value(PyObject *__pyx_v_self, PyObject *__pyx_v_str_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_string_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_28make_string_value(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_str_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_28make_string_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_str_) {
  PyObject *__pyx_v_py_value_string = NULL;
  char *__pyx_v_c_str_;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  XdmAtomicValue *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_string_value", 0);

  /* "saxonc.pyx":248
 * 
 *         """
 *         py_value_string = str_.encode('UTF-8') if str_ is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_str_ = py_value_string if str_ is not None else ""
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 */
  __pyx_t_2 = (__pyx_v_str_ != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_str_, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":249
 *         """
 *         py_value_string = str_.encode('UTF-8') if str_ is not None else None
 *         cdef char * c_str_ = py_value_string if str_ is not None else ""             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeStringValue(c_str_)
 */
  __pyx_t_2 = (__pyx_v_str_ != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 249, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_str_ = __pyx_t_6;

  /* "saxonc.pyx":250
 *         py_value_string = str_.encode('UTF-8') if str_ is not None else None
 *         cdef char * c_str_ = py_value_string if str_ is not None else ""
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeStringValue(c_str_)
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":251
 *         cdef char * c_str_ = py_value_string if str_ is not None else ""
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeStringValue(c_str_)             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_t_8 = __pyx_v_self->thisptr->makeStringValue(__pyx_v_c_str_);
  __pyx_v_val->derivedaptr = __pyx_t_8;
  __pyx_v_val->__pyx_base.derivedptr = __pyx_t_8;
  __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_t_8;

  /* "saxonc.pyx":252
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeStringValue(c_str_)
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def make_integer_value(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":235
 *         return val
 * 
 *     def make_string_value(self, str_):             # <<<<<<<<<<<<<<
 *         """
 *         make_string_value(self, str_)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.make_string_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":254
 *         return val
 * 
 *     def make_integer_value(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         make_integer_value(self, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_31make_integer_value(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_30make_integer_value[] = "\n        make_integer_value(self, value)\n        Factory method: makes either an Int64Value or a BigIntegerValue depending on the value supplied\n        \n        Args:\n            value (int): The supplied primitive integer value\n\n        Returns:\n            PyXdmAtomicValue: The corresponding Xdm value which is a BigIntegerValue or Int64Value as appropriate\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_31make_integer_value(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_integer_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_30make_integer_value(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_30make_integer_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  XdmAtomicValue *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_integer_value", 0);

  /* "saxonc.pyx":266
 * 
 *         """
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeIntegerValue(value)
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":267
 *         """
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeIntegerValue(value)             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 267, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_self->thisptr->makeIntegerValue(__pyx_t_2);
  __pyx_v_val->derivedaptr = __pyx_t_3;
  __pyx_v_val->__pyx_base.derivedptr = __pyx_t_3;
  __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_t_3;

  /* "saxonc.pyx":268
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeIntegerValue(value)
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def make_double_value(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":254
 *         return val
 * 
 *     def make_integer_value(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         make_integer_value(self, value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.make_integer_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":270
 *         return val
 * 
 *     def make_double_value(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         make_double_value(self, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_33make_double_value(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_32make_double_value[] = "\n        make_double_value(self, value)\n        Factory method: makes a double value\n\n        Args:\n            value (double): The supplied primitive double value \n\n        Returns:\n            PyXdmAtomicValue: The corresponding Xdm Value\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_33make_double_value(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_double_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_32make_double_value(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_32make_double_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  XdmAtomicValue *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_double_value", 0);

  /* "saxonc.pyx":281
 *             PyXdmAtomicValue: The corresponding Xdm Value
 *         """
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeDoubleValue(value)
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":282
 *         """
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeDoubleValue(value)             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 282, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_self->thisptr->makeDoubleValue(__pyx_t_2);
  __pyx_v_val->derivedaptr = __pyx_t_3;
  __pyx_v_val->__pyx_base.derivedptr = __pyx_t_3;
  __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_t_3;

  /* "saxonc.pyx":283
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeDoubleValue(value)
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def make_float_value(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":270
 *         return val
 * 
 *     def make_double_value(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         make_double_value(self, value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.make_double_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":285
 *         return val
 * 
 *     def make_float_value(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         make_float_value(self, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_35make_float_value(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_34make_float_value[] = "\n        make_float_value(self, value)\n        Factory method: makes a float value\n\n        Args:\n            value (float): The supplied primitive float value \n\n        Returns:\n            PyXdmAtomicValue: The corresponding Xdm Value\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_35make_float_value(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_float_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_34make_float_value(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_34make_float_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  XdmAtomicValue *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_float_value", 0);

  /* "saxonc.pyx":297
 *         """
 * 
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeFloatValue(value)
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":298
 * 
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeFloatValue(value)             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 298, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_self->thisptr->makeFloatValue(__pyx_t_2);
  __pyx_v_val->derivedaptr = __pyx_t_3;
  __pyx_v_val->__pyx_base.derivedptr = __pyx_t_3;
  __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_t_3;

  /* "saxonc.pyx":299
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeFloatValue(value)
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def make_long_value(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":285
 *         return val
 * 
 *     def make_float_value(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         make_float_value(self, value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.make_float_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":301
 *         return val
 * 
 *     def make_long_value(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         make_long_value(self, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_37make_long_value(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_36make_long_value[] = "\n        make_long_value(self, value)\n        Factory method: makes either an Int64Value or a BigIntegerValue depending on the value supplied\n\n        Args:\n            value (long): The supplied primitive long value \n\n        Returns:\n            PyXdmAtomicValue: The corresponding Xdm Value\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_37make_long_value(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_long_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_36make_long_value(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_36make_long_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  XdmAtomicValue *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_long_value", 0);

  /* "saxonc.pyx":312
 *             PyXdmAtomicValue: The corresponding Xdm Value
 *         """
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeLongValue(value)
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":313
 *         """
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeLongValue(value)             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_2 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 313, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_self->thisptr->makeLongValue(__pyx_t_2);
  __pyx_v_val->derivedaptr = __pyx_t_3;
  __pyx_v_val->__pyx_base.derivedptr = __pyx_t_3;
  __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_t_3;

  /* "saxonc.pyx":314
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeLongValue(value)
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def make_boolean_value(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":301
 *         return val
 * 
 *     def make_long_value(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         make_long_value(self, value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.make_long_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":316
 *         return val
 * 
 *     def make_boolean_value(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         make_boolean_value(self, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_39make_boolean_value(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_38make_boolean_value[] = "\n        make_boolean_value(self, value)\n        Factory method: makes a XdmAtomicValue representing a boolean Value\n\n        Args:\n            value (boolean): True or False, to determine which boolean value is required\n\n        Returns:\n            PyAtomicValue: The corresonding XdmValue\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_39make_boolean_value(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_boolean_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_38make_boolean_value(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_38make_boolean_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_value) {
  bool __pyx_v_c_b;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  XdmAtomicValue *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_boolean_value", 0);

  /* "saxonc.pyx":327
 *             PyAtomicValue: The corresonding XdmValue
 *         """
 *         cdef bool c_b = value             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeBooleanValue(c_b)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 327, __pyx_L1_error)
  __pyx_v_c_b = __pyx_t_1;

  /* "saxonc.pyx":328
 *         """
 *         cdef bool c_b = value
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeBooleanValue(c_b)
 *         return val
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "saxonc.pyx":329
 *         cdef bool c_b = value
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeBooleanValue(c_b)             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_t_3 = __pyx_v_self->thisptr->makeBooleanValue(__pyx_v_c_b);
  __pyx_v_val->derivedaptr = __pyx_t_3;
  __pyx_v_val->__pyx_base.derivedptr = __pyx_t_3;
  __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_t_3;

  /* "saxonc.pyx":330
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeBooleanValue(c_b)
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def make_qname_value(self, str_):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":316
 *         return val
 * 
 *     def make_boolean_value(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         make_boolean_value(self, value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.make_boolean_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":332
 *         return val
 * 
 *     def make_qname_value(self, str_):             # <<<<<<<<<<<<<<
 *         """
 *         make_qname_value(self, str_)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_41make_qname_value(PyObject *__pyx_v_self, PyObject *__pyx_v_str_); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_40make_qname_value[] = "\n        make_qname_value(self, str_)\n        Create an QName Xdm value from string representation in clark notation\n\n        Args:\n            str_ (str): The value given in a string form in clark notation. {uri}local\n\n        Returns:\n            PyAtomicValue: The corresonding value\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_41make_qname_value(PyObject *__pyx_v_self, PyObject *__pyx_v_str_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_qname_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_40make_qname_value(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_str_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_40make_qname_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_str_) {
  PyObject *__pyx_v_py_value_string = NULL;
  char *__pyx_v_c_str_;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  XdmAtomicValue *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_qname_value", 0);

  /* "saxonc.pyx":344
 * 
 *         """
 *         py_value_string = str_.encode('UTF-8') if str_ is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_str_ = py_value_string if str_ is not None else ""
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 */
  __pyx_t_2 = (__pyx_v_str_ != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_str_, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":345
 *         """
 *         py_value_string = str_.encode('UTF-8') if str_ is not None else None
 *         cdef char * c_str_ = py_value_string if str_ is not None else ""             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeQNameValue(c_str_)
 */
  __pyx_t_2 = (__pyx_v_str_ != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_str_ = __pyx_t_6;

  /* "saxonc.pyx":346
 *         py_value_string = str_.encode('UTF-8') if str_ is not None else None
 *         cdef char * c_str_ = py_value_string if str_ is not None else ""
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeQNameValue(c_str_)
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":347
 *         cdef char * c_str_ = py_value_string if str_ is not None else ""
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeQNameValue(c_str_)             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_t_8 = __pyx_v_self->thisptr->makeQNameValue(__pyx_v_c_str_);
  __pyx_v_val->derivedaptr = __pyx_t_8;
  __pyx_v_val->__pyx_base.derivedptr = __pyx_t_8;
  __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_t_8;

  /* "saxonc.pyx":348
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeQNameValue(c_str_)
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def make_atomic_value(self, value_type, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":332
 *         return val
 * 
 *     def make_qname_value(self, str_):             # <<<<<<<<<<<<<<
 *         """
 *         make_qname_value(self, str_)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.make_qname_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":350
 *         return val
 * 
 *     def make_atomic_value(self, value_type, value):             # <<<<<<<<<<<<<<
 *         """
 *         make_atomic_value(self, value_type, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_43make_atomic_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_42make_atomic_value[] = "\n        make_atomic_value(self, value_type, value)\n        Create an QName Xdm value from string representation in clark notation\n\n        Args:\n            str_ (str): The value given in a string form in clark notation. {uri}local\n\n        Returns:\n            PyAtomicValue: The corresonding value\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_43make_atomic_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value_type = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_atomic_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value_type,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("make_atomic_value", 1, 2, 2, 1); __PYX_ERR(1, 350, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "make_atomic_value") < 0)) __PYX_ERR(1, 350, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_value_type = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("make_atomic_value", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 350, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.make_atomic_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_42make_atomic_value(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), __pyx_v_value_type, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_42make_atomic_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_value_type, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_py_valueType_string = NULL;
  char *__pyx_v_c_valueType_string;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  char const *__pyx_t_8;
  XdmAtomicValue *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_atomic_value", 0);

  /* "saxonc.pyx":363
 *         """
 * 
 *         py_valueType_string = value_type.encode('UTF-8') if value_type is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_valueType_string = py_valueType_string if value_type is not None else ""
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 */
  __pyx_t_2 = (__pyx_v_value_type != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_value_type, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_valueType_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":364
 * 
 *         py_valueType_string = value_type.encode('UTF-8') if value_type is not None else None
 *         cdef char * c_valueType_string = py_valueType_string if value_type is not None else ""             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeAtomicValue(c_valueType_string, value)
 */
  __pyx_t_2 = (__pyx_v_value_type != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_valueType_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 364, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_valueType_string = __pyx_t_6;

  /* "saxonc.pyx":365
 *         py_valueType_string = value_type.encode('UTF-8') if value_type is not None else None
 *         cdef char * c_valueType_string = py_valueType_string if value_type is not None else ""
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeAtomicValue(c_valueType_string, value)
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":366
 *         cdef char * c_valueType_string = py_valueType_string if value_type is not None else ""
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeAtomicValue(c_valueType_string, value)             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_value); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 366, __pyx_L1_error)
  __pyx_t_9 = __pyx_v_self->thisptr->makeAtomicValue(__pyx_v_c_valueType_string, __pyx_t_8);
  __pyx_v_val->derivedaptr = __pyx_t_9;
  __pyx_v_val->__pyx_base.derivedptr = __pyx_t_9;
  __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_t_9;

  /* "saxonc.pyx":367
 *         cdef PyXdmAtomicValue val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = val.thisvptr = self.thisptr.makeAtomicValue(c_valueType_string, value)
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def get_string_value(self, PyXdmItem item):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":350
 *         return val
 * 
 *     def make_atomic_value(self, value_type, value):             # <<<<<<<<<<<<<<
 *         """
 *         make_atomic_value(self, value_type, value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.make_atomic_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_valueType_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":369
 *         return val
 * 
 *     def get_string_value(self, PyXdmItem item):             # <<<<<<<<<<<<<<
 *         """
 *         get_string_value(self, PyXdmItem item)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_45get_string_value(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_44get_string_value[] = "\n        get_string_value(self, PyXdmItem item)\n        Create an QName Xdm value from string representation in clark notation\n\n        Args:\n            str_ (str): The value given in a string form in clark notation. {uri}local\n\n        Returns:\n            PyAtomicValue: The corresonding value\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_45get_string_value(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_string_value (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_item), __pyx_ptype_6saxonc_PyXdmItem, 1, "item", 0))) __PYX_ERR(1, 369, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_44get_string_value(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), ((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_item));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_44get_string_value(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_string_value", 0);

  /* "saxonc.pyx":381
 * 
 *         """
 *         return self.thisptr.getStringValue(item.derivedptr)             # <<<<<<<<<<<<<<
 * 
 *     def parse_xml(self, **kwds):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->thisptr->getStringValue(__pyx_v_item->derivedptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":369
 *         return val
 * 
 *     def get_string_value(self, PyXdmItem item):             # <<<<<<<<<<<<<<
 *         """
 *         get_string_value(self, PyXdmItem item)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.get_string_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":383
 *         return self.thisptr.getStringValue(item.derivedptr)
 * 
 *     def parse_xml(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         parse_xml(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_47parse_xml(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_46parse_xml[] = "\n        parse_xml(self, **kwds)\n        Parse a lexical representation, source file or uri of the source document and return it as an Xdm Node\n\n        Args:\n            **kwds : The possible keyword arguments must be one of the follow (xml_file_name|xml_text|xml_uri)\n\n        Returns:\n            PyXdmNode: The Xdm Node representation of the XML document\n\n        Raises:\n            Exception: Error if the keyword argument is not one of xml_file_name|xml_text|xml_uri.\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_47parse_xml(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_xml (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("parse_xml", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "parse_xml", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_46parse_xml(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_46parse_xml(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_py_error_message = NULL;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_val = 0;
  PyObject *__pyx_v_py_value = 0;
  char *__pyx_v_c_xml_string;
  PyObject *__pyx_v_py_xml_text_string = NULL;
  PyObject *__pyx_v_py_filename_string = NULL;
  PyObject *__pyx_v_py_uri_string = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  char *__pyx_t_9;
  XdmNode *__pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse_xml", 0);

  /* "saxonc.pyx":397
 *             Exception: Error if the keyword argument is not one of xml_file_name|xml_text|xml_uri.
 *         """
 *         py_error_message = "Error: parseXml should only contain one of the following keyword arguments: (xml_file_name|xml_text|xml_uri)"             # <<<<<<<<<<<<<<
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(__pyx_kp_s_Error_parseXml_should_only_conta);
  __pyx_v_py_error_message = __pyx_kp_s_Error_parseXml_should_only_conta;

  /* "saxonc.pyx":398
 *         """
 *         py_error_message = "Error: parseXml should only contain one of the following keyword arguments: (xml_file_name|xml_text|xml_uri)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef PyXdmNode val = None
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 398, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":399
 *         py_error_message = "Error: parseXml should only contain one of the following keyword arguments: (xml_file_name|xml_text|xml_uri)"
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode val = None
 *         cdef py_value = None
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 399, __pyx_L1_error)

    /* "saxonc.pyx":398
 *         """
 *         py_error_message = "Error: parseXml should only contain one of the following keyword arguments: (xml_file_name|xml_text|xml_uri)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef PyXdmNode val = None
 */
  }

  /* "saxonc.pyx":400
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 *         cdef PyXdmNode val = None             # <<<<<<<<<<<<<<
 *         cdef py_value = None
 *         cdef char * c_xml_string = NULL
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":401
 *           raise Exception(py_error_message)
 *         cdef PyXdmNode val = None
 *         cdef py_value = None             # <<<<<<<<<<<<<<
 *         cdef char * c_xml_string = NULL
 *         if "xml_text" in kwds:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value = Py_None;

  /* "saxonc.pyx":402
 *         cdef PyXdmNode val = None
 *         cdef py_value = None
 *         cdef char * c_xml_string = NULL             # <<<<<<<<<<<<<<
 *         if "xml_text" in kwds:
 *           py_value = kwds["xml_text"]
 */
  __pyx_v_c_xml_string = NULL;

  /* "saxonc.pyx":403
 *         cdef py_value = None
 *         cdef char * c_xml_string = NULL
 *         if "xml_text" in kwds:             # <<<<<<<<<<<<<<
 *           py_value = kwds["xml_text"]
 *           py_xml_text_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_xml_text, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 403, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "saxonc.pyx":404
 *         cdef char * c_xml_string = NULL
 *         if "xml_text" in kwds:
 *           py_value = kwds["xml_text"]             # <<<<<<<<<<<<<<
 *           py_xml_text_string = py_value.encode('UTF-8') if py_value is not None else None
 *           c_xml_string = py_xml_text_string if py_value is not None else ""
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xml_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_py_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":405
 *         if "xml_text" in kwds:
 *           py_value = kwds["xml_text"]
 *           py_xml_text_string = py_value.encode('UTF-8') if py_value is not None else None             # <<<<<<<<<<<<<<
 *           c_xml_string = py_xml_text_string if py_value is not None else ""
 *           val = PyXdmNode()
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __pyx_v_py_xml_text_string = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "saxonc.pyx":406
 *           py_value = kwds["xml_text"]
 *           py_xml_text_string = py_value.encode('UTF-8') if py_value is not None else None
 *           c_xml_string = py_xml_text_string if py_value is not None else ""             # <<<<<<<<<<<<<<
 *           val = PyXdmNode()
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromString(c_xml_string)
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_py_xml_text_string); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 406, __pyx_L1_error)
      __pyx_t_8 = __pyx_t_9;
    } else {
      __pyx_t_8 = ((char *)"");
    }
    __pyx_v_c_xml_string = __pyx_t_8;

    /* "saxonc.pyx":407
 *           py_xml_text_string = py_value.encode('UTF-8') if py_value is not None else None
 *           c_xml_string = py_xml_text_string if py_value is not None else ""
 *           val = PyXdmNode()             # <<<<<<<<<<<<<<
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromString(c_xml_string)
 *           return val
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "saxonc.pyx":408
 *           c_xml_string = py_xml_text_string if py_value is not None else ""
 *           val = PyXdmNode()
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromString(c_xml_string)             # <<<<<<<<<<<<<<
 *           return val
 *         elif "xml_file_name" in kwds:
 */
    __pyx_t_10 = __pyx_v_self->thisptr->parseXmlFromString(__pyx_v_c_xml_string);
    __pyx_v_val->derivednptr = __pyx_t_10;
    __pyx_v_val->__pyx_base.derivedptr = __pyx_t_10;
    __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_t_10;

    /* "saxonc.pyx":409
 *           val = PyXdmNode()
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromString(c_xml_string)
 *           return val             # <<<<<<<<<<<<<<
 *         elif "xml_file_name" in kwds:
 *           py_value = kwds["xml_file_name"]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;

    /* "saxonc.pyx":403
 *         cdef py_value = None
 *         cdef char * c_xml_string = NULL
 *         if "xml_text" in kwds:             # <<<<<<<<<<<<<<
 *           py_value = kwds["xml_text"]
 *           py_xml_text_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  }

  /* "saxonc.pyx":410
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromString(c_xml_string)
 *           return val
 *         elif "xml_file_name" in kwds:             # <<<<<<<<<<<<<<
 *           py_value = kwds["xml_file_name"]
 *           py_filename_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_xml_file_name, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 410, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":411
 *           return val
 *         elif "xml_file_name" in kwds:
 *           py_value = kwds["xml_file_name"]             # <<<<<<<<<<<<<<
 *           py_filename_string = py_value.encode('UTF-8') if py_value is not None else None
 *           if py_filename_string  is None or isfile(py_filename_string) == False:
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xml_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_py_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":412
 *         elif "xml_file_name" in kwds:
 *           py_value = kwds["xml_file_name"]
 *           py_filename_string = py_value.encode('UTF-8') if py_value is not None else None             # <<<<<<<<<<<<<<
 *           if py_filename_string  is None or isfile(py_filename_string) == False:
 *             raise Exception("XML file does not exist")
 */
    __pyx_t_2 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_2 != 0)) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __pyx_v_py_filename_string = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "saxonc.pyx":413
 *           py_value = kwds["xml_file_name"]
 *           py_filename_string = py_value.encode('UTF-8') if py_value is not None else None
 *           if py_filename_string  is None or isfile(py_filename_string) == False:             # <<<<<<<<<<<<<<
 *             raise Exception("XML file does not exist")
 *           c_xml_string = py_filename_string if py_value is not None else ""
 */
    __pyx_t_4 = (__pyx_v_py_filename_string == Py_None);
    __pyx_t_11 = (__pyx_t_4 != 0);
    if (!__pyx_t_11) {
    } else {
      __pyx_t_2 = __pyx_t_11;
      goto __pyx_L6_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_isfile); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_py_filename_string) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_py_filename_string);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(1, 413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __pyx_t_11;
    __pyx_L6_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "saxonc.pyx":414
 *           py_filename_string = py_value.encode('UTF-8') if py_value is not None else None
 *           if py_filename_string  is None or isfile(py_filename_string) == False:
 *             raise Exception("XML file does not exist")             # <<<<<<<<<<<<<<
 *           c_xml_string = py_filename_string if py_value is not None else ""
 *           val = PyXdmNode()
 */
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 414, __pyx_L1_error)

      /* "saxonc.pyx":413
 *           py_value = kwds["xml_file_name"]
 *           py_filename_string = py_value.encode('UTF-8') if py_value is not None else None
 *           if py_filename_string  is None or isfile(py_filename_string) == False:             # <<<<<<<<<<<<<<
 *             raise Exception("XML file does not exist")
 *           c_xml_string = py_filename_string if py_value is not None else ""
 */
    }

    /* "saxonc.pyx":415
 *           if py_filename_string  is None or isfile(py_filename_string) == False:
 *             raise Exception("XML file does not exist")
 *           c_xml_string = py_filename_string if py_value is not None else ""             # <<<<<<<<<<<<<<
 *           val = PyXdmNode()
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromFile(c_xml_string)
 */
    __pyx_t_2 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_2 != 0)) {
      __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_py_filename_string); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 415, __pyx_L1_error)
      __pyx_t_8 = __pyx_t_9;
    } else {
      __pyx_t_8 = ((char *)"");
    }
    __pyx_v_c_xml_string = __pyx_t_8;

    /* "saxonc.pyx":416
 *             raise Exception("XML file does not exist")
 *           c_xml_string = py_filename_string if py_value is not None else ""
 *           val = PyXdmNode()             # <<<<<<<<<<<<<<
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromFile(c_xml_string)
 *           return val
 */
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "saxonc.pyx":417
 *           c_xml_string = py_filename_string if py_value is not None else ""
 *           val = PyXdmNode()
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromFile(c_xml_string)             # <<<<<<<<<<<<<<
 *           return val
 *         elif "xml_uri" in kwds:
 */
    __pyx_t_10 = __pyx_v_self->thisptr->parseXmlFromFile(__pyx_v_c_xml_string);
    __pyx_v_val->derivednptr = __pyx_t_10;
    __pyx_v_val->__pyx_base.derivedptr = __pyx_t_10;
    __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_t_10;

    /* "saxonc.pyx":418
 *           val = PyXdmNode()
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromFile(c_xml_string)
 *           return val             # <<<<<<<<<<<<<<
 *         elif "xml_uri" in kwds:
 *           py_value = kwds["xml_uri"]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;

    /* "saxonc.pyx":410
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromString(c_xml_string)
 *           return val
 *         elif "xml_file_name" in kwds:             # <<<<<<<<<<<<<<
 *           py_value = kwds["xml_file_name"]
 *           py_filename_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  }

  /* "saxonc.pyx":419
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromFile(c_xml_string)
 *           return val
 *         elif "xml_uri" in kwds:             # <<<<<<<<<<<<<<
 *           py_value = kwds["xml_uri"]
 *           py_uri_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_xml_uri, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 419, __pyx_L1_error)
  __pyx_t_11 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_11)) {

    /* "saxonc.pyx":420
 *           return val
 *         elif "xml_uri" in kwds:
 *           py_value = kwds["xml_uri"]             # <<<<<<<<<<<<<<
 *           py_uri_string = py_value.encode('UTF-8') if py_value is not None else None
 *           c_xml_string = py_uri_string if py_value is not None else ""
 */
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xml_uri); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_py_value, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "saxonc.pyx":421
 *         elif "xml_uri" in kwds:
 *           py_value = kwds["xml_uri"]
 *           py_uri_string = py_value.encode('UTF-8') if py_value is not None else None             # <<<<<<<<<<<<<<
 *           c_xml_string = py_uri_string if py_value is not None else ""
 *           val = PyXdmNode()
 */
    __pyx_t_11 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_11 != 0)) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_5 = __pyx_t_3;
      __pyx_t_3 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_5 = Py_None;
    }
    __pyx_v_py_uri_string = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "saxonc.pyx":422
 *           py_value = kwds["xml_uri"]
 *           py_uri_string = py_value.encode('UTF-8') if py_value is not None else None
 *           c_xml_string = py_uri_string if py_value is not None else ""             # <<<<<<<<<<<<<<
 *           val = PyXdmNode()
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromUri(c_xml_string)
 */
    __pyx_t_11 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_11 != 0)) {
      __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_py_uri_string); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 422, __pyx_L1_error)
      __pyx_t_8 = __pyx_t_9;
    } else {
      __pyx_t_8 = ((char *)"");
    }
    __pyx_v_c_xml_string = __pyx_t_8;

    /* "saxonc.pyx":423
 *           py_uri_string = py_value.encode('UTF-8') if py_value is not None else None
 *           c_xml_string = py_uri_string if py_value is not None else ""
 *           val = PyXdmNode()             # <<<<<<<<<<<<<<
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromUri(c_xml_string)
 *           return val
 */
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "saxonc.pyx":424
 *           c_xml_string = py_uri_string if py_value is not None else ""
 *           val = PyXdmNode()
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromUri(c_xml_string)             # <<<<<<<<<<<<<<
 *           return val
 *         else:
 */
    __pyx_t_10 = __pyx_v_self->thisptr->parseXmlFromUri(__pyx_v_c_xml_string);
    __pyx_v_val->derivednptr = __pyx_t_10;
    __pyx_v_val->__pyx_base.derivedptr = __pyx_t_10;
    __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_t_10;

    /* "saxonc.pyx":425
 *           val = PyXdmNode()
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromUri(c_xml_string)
 *           return val             # <<<<<<<<<<<<<<
 *         else:
 *            raise Exception(py_error_message)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;

    /* "saxonc.pyx":419
 *           val.derivednptr = val.derivedptr = val.thisvptr = self.thisptr.parseXmlFromFile(c_xml_string)
 *           return val
 *         elif "xml_uri" in kwds:             # <<<<<<<<<<<<<<
 *           py_value = kwds["xml_uri"]
 *           py_uri_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  }

  /* "saxonc.pyx":427
 *           return val
 *         else:
 *            raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 * 
 *     def exception_occurred(self):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 427, __pyx_L1_error)
  }

  /* "saxonc.pyx":383
 *         return self.thisptr.getStringValue(item.derivedptr)
 * 
 *     def parse_xml(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         parse_xml(self, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.parse_xml", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_error_message);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XDECREF(__pyx_v_py_value);
  __Pyx_XDECREF(__pyx_v_py_xml_text_string);
  __Pyx_XDECREF(__pyx_v_py_filename_string);
  __Pyx_XDECREF(__pyx_v_py_uri_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":429
 *            raise Exception(py_error_message)
 * 
 *     def exception_occurred(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_occurred(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_49exception_occurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_48exception_occurred[] = "\n        exception_occurred(self)\n        Check if an exception has occurred internally within Saxon/C\n\n        Returns:\n            boolean: True or False if an exception has been reported internally in Saxon/C\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_49exception_occurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_occurred (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_48exception_occurred(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_48exception_occurred(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exception_occurred", 0);

  /* "saxonc.pyx":437
 *             boolean: True or False if an exception has been reported internally in Saxon/C
 *         """
 *         return self.thisptr.exceptionOccurred()             # <<<<<<<<<<<<<<
 * 
 *     def exception_clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->exceptionOccurred()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":429
 *            raise Exception(py_error_message)
 * 
 *     def exception_occurred(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_occurred(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.exception_occurred", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":439
 *         return self.thisptr.exceptionOccurred()
 * 
 *     def exception_clear(self):             # <<<<<<<<<<<<<<
 *         """
 *         exceltion_clear(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_51exception_clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PySaxonProcessor_50exception_clear[] = "\n        exceltion_clear(self)\n        Clear any exception thrown internally in Saxon/C.\n\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_51exception_clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_clear (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_50exception_clear(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_50exception_clear(struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_clear", 0);

  /* "saxonc.pyx":446
 * 
 *         """
 *         self.thisptr.exceptionClear()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr->exceptionClear();

  /* "saxonc.pyx":439
 *         return self.thisptr.exceptionOccurred()
 * 
 *     def exception_clear(self):             # <<<<<<<<<<<<<<
 *         """
 *         exceltion_clear(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_53__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_53__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_52__reduce_cython__(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_52__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_55__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PySaxonProcessor_55__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PySaxonProcessor_54__setstate_cython__(((struct __pyx_obj_6saxonc_PySaxonProcessor *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PySaxonProcessor_54__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PySaxonProcessor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySaxonProcessor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":455
 *      cdef saxoncClasses.XsltProcessor *thisxptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """Default constructor """
 *         self.thisxptr = NULL
 */

/* Python wrapper */
static int __pyx_pw_6saxonc_15PyXsltProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6saxonc_15PyXsltProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor___cinit__(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6saxonc_15PyXsltProcessor___cinit__(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "saxonc.pyx":457
 *      def __cinit__(self):
 *         """Default constructor """
 *         self.thisxptr = NULL             # <<<<<<<<<<<<<<
 *      def __dealloc__(self):
 *         if self.thisxptr != NULL:
 */
  __pyx_v_self->thisxptr = NULL;

  /* "saxonc.pyx":455
 *      cdef saxoncClasses.XsltProcessor *thisxptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """Default constructor """
 *         self.thisxptr = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":458
 *         """Default constructor """
 *         self.thisxptr = NULL
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisxptr != NULL:
 *            del self.thisxptr
 */

/* Python wrapper */
static void __pyx_pw_6saxonc_15PyXsltProcessor_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6saxonc_15PyXsltProcessor_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6saxonc_15PyXsltProcessor_2__dealloc__(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6saxonc_15PyXsltProcessor_2__dealloc__(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "saxonc.pyx":459
 *         self.thisxptr = NULL
 *      def __dealloc__(self):
 *         if self.thisxptr != NULL:             # <<<<<<<<<<<<<<
 *            del self.thisxptr
 *      def set_cwd(self, cwd):
 */
  __pyx_t_1 = ((__pyx_v_self->thisxptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":460
 *      def __dealloc__(self):
 *         if self.thisxptr != NULL:
 *            del self.thisxptr             # <<<<<<<<<<<<<<
 *      def set_cwd(self, cwd):
 *         """
 */
    delete __pyx_v_self->thisxptr;

    /* "saxonc.pyx":459
 *         self.thisxptr = NULL
 *      def __dealloc__(self):
 *         if self.thisxptr != NULL:             # <<<<<<<<<<<<<<
 *            del self.thisxptr
 *      def set_cwd(self, cwd):
 */
  }

  /* "saxonc.pyx":458
 *         """Default constructor """
 *         self.thisxptr = NULL
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisxptr != NULL:
 *            del self.thisxptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "saxonc.pyx":461
 *         if self.thisxptr != NULL:
 *            del self.thisxptr
 *      def set_cwd(self, cwd):             # <<<<<<<<<<<<<<
 *         """
 *         set_cwd(self, cwd)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_5set_cwd(PyObject *__pyx_v_self, PyObject *__pyx_v_cwd); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_4set_cwd[] = "\n        set_cwd(self, cwd)\n        Set the current working directory.\n\n        Args:\n            cwd (str): current working directory\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_5set_cwd(PyObject *__pyx_v_self, PyObject *__pyx_v_cwd) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cwd (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_4set_cwd(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_cwd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_4set_cwd(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_cwd) {
  PyObject *__pyx_v_py_cwd_string = NULL;
  char *__pyx_v_c_cwd;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cwd", 0);

  /* "saxonc.pyx":469
 *             cwd (str): current working directory
 *         """
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_cwd = py_cwd_string if cwd is not None else ""
 *         self.thisxptr.setcwd(c_cwd)
 */
  __pyx_t_2 = (__pyx_v_cwd != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cwd, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_cwd_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":470
 *         """
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None
 *         cdef char * c_cwd = py_cwd_string if cwd is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxptr.setcwd(c_cwd)
 * 
 */
  __pyx_t_2 = (__pyx_v_cwd != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_cwd_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 470, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_cwd = __pyx_t_6;

  /* "saxonc.pyx":471
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None
 *         cdef char * c_cwd = py_cwd_string if cwd is not None else ""
 *         self.thisxptr.setcwd(c_cwd)             # <<<<<<<<<<<<<<
 * 
 *      def set_source(self, **kwds):
 */
  __pyx_v_self->thisxptr->setcwd(__pyx_v_c_cwd);

  /* "saxonc.pyx":461
 *         if self.thisxptr != NULL:
 *            del self.thisxptr
 *      def set_cwd(self, cwd):             # <<<<<<<<<<<<<<
 *         """
 *         set_cwd(self, cwd)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.set_cwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_cwd_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":473
 *         self.thisxptr.setcwd(c_cwd)
 * 
 *      def set_source(self, **kwds):             # <<<<<<<<<<<<<<
 *         """Set the source document for the transformation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_7set_source(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_6set_source[] = "Set the source document for the transformation.\n\n        Args:\n            **kwds: Keyword argument can only be one of the following: file_name|xdm_node\n        Raises:\n            Exception: Exception is raised if keyword argument is not one of file_name or node.\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_7set_source(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_source (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_source", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_source", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_6set_source(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_6set_source(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_py_error_message = NULL;
  PyObject *__pyx_v_py_value = 0;
  PyObject *__pyx_v_py_value_string = 0;
  char *__pyx_v_c_source;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_xdm_node = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_source", 0);

  /* "saxonc.pyx":482
 *         """
 * 
 *         py_error_message = "Error: setSource should only contain one of the following keyword arguments: (file_name|xdm_node)"             # <<<<<<<<<<<<<<
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(__pyx_kp_s_Error_setSource_should_only_cont);
  __pyx_v_py_error_message = __pyx_kp_s_Error_setSource_should_only_cont;

  /* "saxonc.pyx":483
 * 
 *         py_error_message = "Error: setSource should only contain one of the following keyword arguments: (file_name|xdm_node)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 483, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":484
 *         py_error_message = "Error: setSource should only contain one of the following keyword arguments: (file_name|xdm_node)"
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         cdef py_value = None
 *         cdef py_value_string = None
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 484, __pyx_L1_error)

    /* "saxonc.pyx":483
 * 
 *         py_error_message = "Error: setSource should only contain one of the following keyword arguments: (file_name|xdm_node)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  }

  /* "saxonc.pyx":485
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 *         cdef py_value = None             # <<<<<<<<<<<<<<
 *         cdef py_value_string = None
 *         cdef char * c_source
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value = Py_None;

  /* "saxonc.pyx":486
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 *         cdef py_value_string = None             # <<<<<<<<<<<<<<
 *         cdef char * c_source
 *         cdef PyXdmNode xdm_node = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value_string = Py_None;

  /* "saxonc.pyx":488
 *         cdef py_value_string = None
 *         cdef char * c_source
 *         cdef PyXdmNode xdm_node = None             # <<<<<<<<<<<<<<
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_xdm_node = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":489
 *         cdef char * c_source
 *         cdef PyXdmNode xdm_node = None
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_file_name, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 489, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "saxonc.pyx":490
 *         cdef PyXdmNode xdm_node = None
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]             # <<<<<<<<<<<<<<
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_py_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":491
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None             # <<<<<<<<<<<<<<
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxptr.setSourceFromFile(c_source)
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __Pyx_DECREF_SET(__pyx_v_py_value_string, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":492
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""             # <<<<<<<<<<<<<<
 *             self.thisxptr.setSourceFromFile(c_source)
 *         elif "xdm_node" in kwds:
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 492, __pyx_L1_error)
      __pyx_t_8 = __pyx_t_9;
    } else {
      __pyx_t_8 = ((char *)"");
    }
    __pyx_v_c_source = __pyx_t_8;

    /* "saxonc.pyx":493
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxptr.setSourceFromFile(c_source)             # <<<<<<<<<<<<<<
 *         elif "xdm_node" in kwds:
 *             xdm_node = kwds["xdm_node"]
 */
    __pyx_v_self->thisxptr->setSourceFromFile(__pyx_v_c_source);

    /* "saxonc.pyx":489
 *         cdef char * c_source
 *         cdef PyXdmNode xdm_node = None
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":494
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxptr.setSourceFromFile(c_source)
 *         elif "xdm_node" in kwds:             # <<<<<<<<<<<<<<
 *             xdm_node = kwds["xdm_node"]
 *             self.thisxptr.setSourceFromXdmNode(xdm_node.derivednptr)
 */
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_xdm_node, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 494, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_2)) {

    /* "saxonc.pyx":495
 *             self.thisxptr.setSourceFromFile(c_source)
 *         elif "xdm_node" in kwds:
 *             xdm_node = kwds["xdm_node"]             # <<<<<<<<<<<<<<
 *             self.thisxptr.setSourceFromXdmNode(xdm_node.derivednptr)
 *         else:
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xdm_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6saxonc_PyXdmNode))))) __PYX_ERR(1, 495, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_xdm_node, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "saxonc.pyx":496
 *         elif "xdm_node" in kwds:
 *             xdm_node = kwds["xdm_node"]
 *             self.thisxptr.setSourceFromXdmNode(xdm_node.derivednptr)             # <<<<<<<<<<<<<<
 *         else:
 *           raise Exception(py_error_message)
 */
    __pyx_v_self->thisxptr->setSourceFromXdmNode(__pyx_v_xdm_node->derivednptr);

    /* "saxonc.pyx":494
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxptr.setSourceFromFile(c_source)
 *         elif "xdm_node" in kwds:             # <<<<<<<<<<<<<<
 *             xdm_node = kwds["xdm_node"]
 *             self.thisxptr.setSourceFromXdmNode(xdm_node.derivednptr)
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":498
 *             self.thisxptr.setSourceFromXdmNode(xdm_node.derivednptr)
 *         else:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 * 
 *      def set_output_file(self, output_file):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 498, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "saxonc.pyx":473
 *         self.thisxptr.setcwd(c_cwd)
 * 
 *      def set_source(self, **kwds):             # <<<<<<<<<<<<<<
 *         """Set the source document for the transformation.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.set_source", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_error_message);
  __Pyx_XDECREF(__pyx_v_py_value);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_xdm_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":500
 *           raise Exception(py_error_message)
 * 
 *      def set_output_file(self, output_file):             # <<<<<<<<<<<<<<
 *         """
 *         set_output_file(self, output_file)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_9set_output_file(PyObject *__pyx_v_self, PyObject *__pyx_v_output_file); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_8set_output_file[] = "\n        set_output_file(self, output_file)\n        Set the output file where the output of the transformation will be sent\n\n        Args:\n            output_file (str): The output file supplied as a str\n\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_9set_output_file(PyObject *__pyx_v_self, PyObject *__pyx_v_output_file) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_output_file (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_8set_output_file(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_output_file));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_8set_output_file(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_output_file) {
  PyObject *__pyx_v_py_filename_string = NULL;
  char *__pyx_v_c_outputfile;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_output_file", 0);

  /* "saxonc.pyx":509
 * 
 *         """
 *         py_filename_string = output_file.encode('UTF-8') if output_file is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_outputfile = py_filename_string if output_file is not None else ""
 *         self.thisxptr.setOutputFile(c_outputfile)
 */
  __pyx_t_2 = (__pyx_v_output_file != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_output_file, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_filename_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":510
 *         """
 *         py_filename_string = output_file.encode('UTF-8') if output_file is not None else None
 *         cdef char * c_outputfile = py_filename_string if output_file is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxptr.setOutputFile(c_outputfile)
 * 
 */
  __pyx_t_2 = (__pyx_v_output_file != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_filename_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 510, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_outputfile = __pyx_t_6;

  /* "saxonc.pyx":511
 *         py_filename_string = output_file.encode('UTF-8') if output_file is not None else None
 *         cdef char * c_outputfile = py_filename_string if output_file is not None else ""
 *         self.thisxptr.setOutputFile(c_outputfile)             # <<<<<<<<<<<<<<
 * 
 *      def set_jit_compilation(self, bool jit):
 */
  __pyx_v_self->thisxptr->setOutputFile(__pyx_v_c_outputfile);

  /* "saxonc.pyx":500
 *           raise Exception(py_error_message)
 * 
 *      def set_output_file(self, output_file):             # <<<<<<<<<<<<<<
 *         """
 *         set_output_file(self, output_file)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.set_output_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_filename_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":513
 *         self.thisxptr.setOutputFile(c_outputfile)
 * 
 *      def set_jit_compilation(self, bool jit):             # <<<<<<<<<<<<<<
 *         """
 *         set_jit_compilation(self, jit)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_11set_jit_compilation(PyObject *__pyx_v_self, PyObject *__pyx_arg_jit); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_10set_jit_compilation[] = "\n        set_jit_compilation(self, jit)\n        Say whether just-in-time compilation of template rules should be used.\n\n        Args:\n            jit (bool): True if just-in-time compilation is to be enabled. With this option enabled,\n                static analysis of a template rule is deferred until the first time that the\n                template is matched. This can improve performance when many template\n                rules are rarely used during the course of a particular transformation; however,\n                it means that static errors in the stylesheet will not necessarily cause the\n                compile(Source) method to throw an exception (errors in code that is\n                actually executed will still be notified but this may happen after the compile(Source)\n                method returns). This option is enabled by default in Saxon-EE, and is not available\n                in Saxon-HE or Saxon-PE.\n                Recommendation: disable this option unless you are confident that the\n                stylesheet you are compiling is error-free. \n\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_11set_jit_compilation(PyObject *__pyx_v_self, PyObject *__pyx_arg_jit) {
  bool __pyx_v_jit;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_jit_compilation (wrapper)", 0);
  assert(__pyx_arg_jit); {
    __pyx_v_jit = __Pyx_PyObject_IsTrue(__pyx_arg_jit); if (unlikely((__pyx_v_jit == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 513, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.set_jit_compilation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_10set_jit_compilation(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), ((bool)__pyx_v_jit));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_10set_jit_compilation(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, bool __pyx_v_jit) {
  bool __pyx_v_c_jit;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_jit_compilation", 0);

  /* "saxonc.pyx":533
 *         """
 *         cdef bool c_jit
 *         c_jit = jit             # <<<<<<<<<<<<<<
 *         self.thisxptr.setJustInTimeCompilation(c_jit)
 *         #else:
 */
  __pyx_v_c_jit = __pyx_v_jit;

  /* "saxonc.pyx":534
 *         cdef bool c_jit
 *         c_jit = jit
 *         self.thisxptr.setJustInTimeCompilation(c_jit)             # <<<<<<<<<<<<<<
 *         #else:
 *         #raise Warning("setJustInTimeCompilation: argument must be a boolean type. JIT not set")
 */
  __pyx_v_self->thisxptr->setJustInTimeCompilation(__pyx_v_c_jit);

  /* "saxonc.pyx":513
 *         self.thisxptr.setOutputFile(c_outputfile)
 * 
 *      def set_jit_compilation(self, bool jit):             # <<<<<<<<<<<<<<
 *         """
 *         set_jit_compilation(self, jit)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":537
 *         #else:
 *         #raise Warning("setJustInTimeCompilation: argument must be a boolean type. JIT not set")
 *      def set_parameter(self, name, PyXdmValue value):             # <<<<<<<<<<<<<<
 *         """
 *         set_parameter(self, PyXdmValue value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_13set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_12set_parameter[] = "\n        set_parameter(self, PyXdmValue value)\n        Set the value of a stylesheet parameter\n\n        Args:\n            name (str): the name of the stylesheet parameter, as a string. For namespaced parameter use the JAXP solution i.e. \"{uri}name\n            value (PyXdmValue): the value of the stylesheet parameter, or null to clear a previously set value\n\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_13set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, 1); __PYX_ERR(1, 537, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_parameter") < 0)) __PYX_ERR(1, 537, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = ((struct __pyx_obj_6saxonc_PyXdmValue *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 537, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_6saxonc_PyXdmValue, 1, "value", 0))) __PYX_ERR(1, 537, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_12set_parameter(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_12set_parameter(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value) {
  char const *__pyx_v_c_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_parameter", 0);

  /* "saxonc.pyx":547
 * 
 *         """
 *         cdef const char * c_str = make_c_str(name)             # <<<<<<<<<<<<<<
 *         if c_str is not NULL:
 *             value.thisvptr.incrementRefCount()
 */
  if (!(likely(PyString_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_name)->tp_name), 0))) __PYX_ERR(1, 547, __pyx_L1_error)
  __pyx_v_c_str = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_name));

  /* "saxonc.pyx":548
 *         """
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:             # <<<<<<<<<<<<<<
 *             value.thisvptr.incrementRefCount()
 *             self.thisxptr.setParameter(c_str, value.thisvptr)
 */
  __pyx_t_1 = ((__pyx_v_c_str != NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":549
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:
 *             value.thisvptr.incrementRefCount()             # <<<<<<<<<<<<<<
 *             self.thisxptr.setParameter(c_str, value.thisvptr)
 * 
 */
    __pyx_v_value->thisvptr->incrementRefCount();

    /* "saxonc.pyx":550
 *         if c_str is not NULL:
 *             value.thisvptr.incrementRefCount()
 *             self.thisxptr.setParameter(c_str, value.thisvptr)             # <<<<<<<<<<<<<<
 * 
 *      def get_parameter(self, name):
 */
    __pyx_v_self->thisxptr->setParameter(__pyx_v_c_str, __pyx_v_value->thisvptr);

    /* "saxonc.pyx":548
 *         """
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:             # <<<<<<<<<<<<<<
 *             value.thisvptr.incrementRefCount()
 *             self.thisxptr.setParameter(c_str, value.thisvptr)
 */
  }

  /* "saxonc.pyx":537
 *         #else:
 *         #raise Warning("setJustInTimeCompilation: argument must be a boolean type. JIT not set")
 *      def set_parameter(self, name, PyXdmValue value):             # <<<<<<<<<<<<<<
 *         """
 *         set_parameter(self, PyXdmValue value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":552
 *             self.thisxptr.setParameter(c_str, value.thisvptr)
 * 
 *      def get_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         get_parameter(self, name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_15get_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_14get_parameter[] = "\n        get_parameter(self, name)\n        Get a parameter value by a given name\n\n        Args:\n            name (str): The name of the stylesheet parameter\n\n        Returns:\n            PyXdmValue: The Xdm value of the parameter  \n\n\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_15get_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_parameter (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_14get_parameter(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_14get_parameter(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_py_name_string = NULL;
  char *__pyx_v_c_name;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_parameter", 0);

  /* "saxonc.pyx":565
 * 
 *         """
 *         py_name_string = name.encode('UTF-8') if name is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         cdef PyXdmValue val = PyXdmValue()
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_name_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":566
 *         """
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_name_string if name is not None else ""             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue val = PyXdmValue()
 *         val.thisvptr = self.thisxptr.getParameter(c_name)
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_name_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 566, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_name = __pyx_t_6;

  /* "saxonc.pyx":567
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         cdef PyXdmValue val = PyXdmValue()             # <<<<<<<<<<<<<<
 *         val.thisvptr = self.thisxptr.getParameter(c_name)
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":568
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         cdef PyXdmValue val = PyXdmValue()
 *         val.thisvptr = self.thisxptr.getParameter(c_name)             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_v_val->thisvptr = __pyx_v_self->thisxptr->getParameter(__pyx_v_c_name);

  /* "saxonc.pyx":569
 *         cdef PyXdmValue val = PyXdmValue()
 *         val.thisvptr = self.thisxptr.getParameter(c_name)
 *         return val             # <<<<<<<<<<<<<<
 * 
 *      def remove_parameter(self, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":552
 *             self.thisxptr.setParameter(c_str, value.thisvptr)
 * 
 *      def get_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         get_parameter(self, name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.get_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_name_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":571
 *         return val
 * 
 *      def remove_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         remove_parameter(self, name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_17remove_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_16remove_parameter[] = "\n        remove_parameter(self, name)\n        Remove the parameter given by name from the PyXsltProcessor. The parameter will not have any affect on the stylesheet if it has not yet been executed\n\n        Args:\n            name (str): The name of the stylesheet parameter\n\n        Returns:\n            bool: True if the removal of the parameter has been successful, False otherwise.\n\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_17remove_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_parameter (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_16remove_parameter(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_16remove_parameter(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_py_name_string = NULL;
  char *__pyx_v_c_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_parameter", 0);

  /* "saxonc.pyx":584
 *         """
 * 
 *         py_name_string = name.encode('UTF-8') if name is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         return self.thisxptr.removeParameter(c_name)
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_name_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":585
 * 
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_name_string if name is not None else ""             # <<<<<<<<<<<<<<
 *         return self.thisxptr.removeParameter(c_name)
 * 
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_name_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 585, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_name = __pyx_t_6;

  /* "saxonc.pyx":586
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         return self.thisxptr.removeParameter(c_name)             # <<<<<<<<<<<<<<
 * 
 *      def set_property(self, name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisxptr->removeParameter(__pyx_v_c_name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":571
 *         return val
 * 
 *      def remove_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         remove_parameter(self, name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.remove_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_name_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":588
 *         return self.thisxptr.removeParameter(c_name)
 * 
 *      def set_property(self, name, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_property(self, name, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_19set_property(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_18set_property[] = "\n        set_property(self, name, value)\n        Set a property specific to the processor in use.\n \n        Args:\n            name (str): The name of the property\n            value (str): The value of the property\n\n        Example:\n            XsltProcessor: set serialization properties (names start with '!' i.e. name \"!method\" -> \"xml\")\r\n            'o':outfile name,\r\n            'it': initial template,\r \n            'im': initial mode,\r\n            's': source as file name\r\n            'm': switch on message listener for xsl:message instructions,\r\n            'item'| 'node' : source supplied as an XdmNode object,\r\n            'extc':Set the native library to use with Saxon for extension functions written in C/C++/PHP\r\n\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_19set_property(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_property (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_property", 1, 2, 2, 1); __PYX_ERR(1, 588, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_property") < 0)) __PYX_ERR(1, 588, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_property", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 588, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.set_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_18set_property(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_18set_property(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_py_name_string = NULL;
  char *__pyx_v_c_name;
  PyObject *__pyx_v_py_value_string = NULL;
  char *__pyx_v_c_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_property", 0);

  /* "saxonc.pyx":609
 *         """
 * 
 *         py_name_string = name.encode('UTF-8') if name is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_name_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":610
 * 
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_name_string if name is not None else ""             # <<<<<<<<<<<<<<
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         cdef char * c_value = py_value_string if value is not None else ""
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_name_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 610, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_name = __pyx_t_6;

  /* "saxonc.pyx":611
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         py_value_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_value = py_value_string if value is not None else ""
 *         self.thisxptr.setProperty(c_name, c_value)
 */
  __pyx_t_2 = (__pyx_v_value != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":612
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         cdef char * c_value = py_value_string if value is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxptr.setProperty(c_name, c_value)
 * 
 */
  __pyx_t_2 = (__pyx_v_value != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 612, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_value = __pyx_t_6;

  /* "saxonc.pyx":613
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         cdef char * c_value = py_value_string if value is not None else ""
 *         self.thisxptr.setProperty(c_name, c_value)             # <<<<<<<<<<<<<<
 * 
 *      def clear_parameters(self):
 */
  __pyx_v_self->thisxptr->setProperty(__pyx_v_c_name, __pyx_v_c_value);

  /* "saxonc.pyx":588
 *         return self.thisxptr.removeParameter(c_name)
 * 
 *      def set_property(self, name, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_property(self, name, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.set_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_name_string);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":615
 *         self.thisxptr.setProperty(c_name, c_value)
 * 
 *      def clear_parameters(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_21clear_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_20clear_parameters[] = "\n        clear_parameter(self)\n        Clear all parameters set on the processor for execution of the stylesheet\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_21clear_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_parameters (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_20clear_parameters(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_20clear_parameters(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_parameters", 0);

  /* "saxonc.pyx":621
 *         """
 * 
 *         self.thisxptr.clearParameters()             # <<<<<<<<<<<<<<
 *      def clear_properties(self):
 *         """
 */
  __pyx_v_self->thisxptr->clearParameters();

  /* "saxonc.pyx":615
 *         self.thisxptr.setProperty(c_name, c_value)
 * 
 *      def clear_parameters(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":622
 * 
 *         self.thisxptr.clearParameters()
 *      def clear_properties(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_properties(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_23clear_properties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_22clear_properties[] = "\n        clear_properties(self)\n        Clear all properties set on the processor\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_23clear_properties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_properties (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_22clear_properties(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_22clear_properties(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_properties", 0);

  /* "saxonc.pyx":628
 *         """
 * 
 *         self.thisxptr.clearProperties()             # <<<<<<<<<<<<<<
 *      def get_xsl_messages(self):
 *         """
 */
  __pyx_v_self->thisxptr->clearProperties();

  /* "saxonc.pyx":622
 * 
 *         self.thisxptr.clearParameters()
 *      def clear_properties(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_properties(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":629
 * 
 *         self.thisxptr.clearProperties()
 *      def get_xsl_messages(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the messages written using the <code>xsl:message</code> instruction
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_25get_xsl_messages(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_24get_xsl_messages[] = "\n        Get the messages written using the <code>xsl:message</code> instruction\n        get_xsl_message(self)\n        \n        Returns:\n            PyXdmValue: Messages returned as an XdmValue. \n\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_25get_xsl_messages(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_xsl_messages (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_24get_xsl_messages(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_24get_xsl_messages(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_xsl_messages", 0);

  /* "saxonc.pyx":639
 *         """
 * 
 *         cdef PyXdmValue val = PyXdmValue()             # <<<<<<<<<<<<<<
 *         val.thisvptr = self.thisxptr.getXslMessages()
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":640
 * 
 *         cdef PyXdmValue val = PyXdmValue()
 *         val.thisvptr = self.thisxptr.getXslMessages()             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_v_val->thisvptr = __pyx_v_self->thisxptr->getXslMessages();

  /* "saxonc.pyx":641
 *         cdef PyXdmValue val = PyXdmValue()
 *         val.thisvptr = self.thisxptr.getXslMessages()
 *         return val             # <<<<<<<<<<<<<<
 * 
 *      def transform_to_string(self, **kwds):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":629
 * 
 *         self.thisxptr.clearProperties()
 *      def get_xsl_messages(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the messages written using the <code>xsl:message</code> instruction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.get_xsl_messages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":643
 *         return val
 * 
 *      def transform_to_string(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         transform_to_string(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_27transform_to_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_26transform_to_string[] = "\n        transform_to_string(self, **kwds)\n        Execute transformation to string.\n\n        Args:\n            **kwds: Possible arguments: source_file (str) or xdm_node (PyXdmNode). Other allowed argument: stylesheet_file (str)\n\n\n        Example:\n\n            1) result = xsltproc.transform_to_string(source_file=\"cat.xml\", stylesheet_file=\"test1.xsl\")\n\n            2) xsltproc.set_source(\"cat.xml\")\r\n               result = xsltproc.transform_to_string(stylesheet_file=\"test1.xsl\")\n\n\n            3) node = saxon_proc.parse_xml(xml_text=\"<in/>\")\r\n               result = xsltproc.transform_to_string(stylesheet_file=\"test1.xsl\", xdm_node= node)\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_27transform_to_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_to_string (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("transform_to_string", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "transform_to_string", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_26transform_to_string(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_26transform_to_string(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  char *__pyx_v_c_sourcefile;
  char *__pyx_v_c_stylesheetfile;
  PyObject *__pyx_v_py_source_string = NULL;
  PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform_to_string", 0);

  /* "saxonc.pyx":666
 *         cdef char * c_sourcefile
 *         cdef char * c_stylesheetfile
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":667
 *         cdef char * c_stylesheetfile
 *         py_source_string = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":668
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 668, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 668, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 668, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 668, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 668, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 668, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 668, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 668, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 668, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":669
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":670
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               if py_source_string  is None or isfile(py_source_string) == False:
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 670, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":671
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *               if py_source_string  is None or isfile(py_source_string) == False:
 *                 raise Exception("source file name does not exist")
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 671, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 671, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __pyx_t_6;
          __pyx_t_6 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_1 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_py_source_string, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "saxonc.pyx":672
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               if py_source_string  is None or isfile(py_source_string) == False:             # <<<<<<<<<<<<<<
 *                 raise Exception("source file name does not exist")
 *               c_sourcefile = py_source_string if value is not None else ""
 */
        __pyx_t_9 = (__pyx_v_py_source_string == Py_None);
        __pyx_t_11 = (__pyx_t_9 != 0);
        if (!__pyx_t_11) {
        } else {
          __pyx_t_10 = __pyx_t_11;
          goto __pyx_L10_bool_binop_done;
        }
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_isfile); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 672, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_py_source_string) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_py_source_string);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 672, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 672, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(1, 672, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = __pyx_t_11;
        __pyx_L10_bool_binop_done:;
        if (unlikely(__pyx_t_10)) {

          /* "saxonc.pyx":673
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               if py_source_string  is None or isfile(py_source_string) == False:
 *                 raise Exception("source file name does not exist")             # <<<<<<<<<<<<<<
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "stylesheet_file":
 */
          __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 673, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_Raise(__pyx_t_6, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __PYX_ERR(1, 673, __pyx_L1_error)

          /* "saxonc.pyx":672
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               if py_source_string  is None or isfile(py_source_string) == False:             # <<<<<<<<<<<<<<
 *                 raise Exception("source file name does not exist")
 *               c_sourcefile = py_source_string if value is not None else ""
 */
        }

        /* "saxonc.pyx":674
 *               if py_source_string  is None or isfile(py_source_string) == False:
 *                 raise Exception("source file name does not exist")
 *               c_sourcefile = py_source_string if value is not None else ""             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_v_py_source_string); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(1, 674, __pyx_L1_error)
          __pyx_t_12 = __pyx_t_13;
        } else {
          __pyx_t_12 = ((char *)"");
        }
        __pyx_v_c_sourcefile = __pyx_t_12;

        /* "saxonc.pyx":670
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               if py_source_string  is None or isfile(py_source_string) == False:
 */
      }

      /* "saxonc.pyx":675
 *                 raise Exception("source file name does not exist")
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 675, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":676
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "stylesheet_file":
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *               if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *                 raise Exception("Stylesheet file does not exist")
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 676, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 676, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_6 = __pyx_t_1;
          __pyx_t_1 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_6 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "saxonc.pyx":677
 *             if key == "stylesheet_file":
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:             # <<<<<<<<<<<<<<
 *                 raise Exception("Stylesheet file does not exist")
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 */
        __pyx_t_11 = (__pyx_v_py_stylesheet_string == Py_None);
        __pyx_t_9 = (__pyx_t_11 != 0);
        if (!__pyx_t_9) {
        } else {
          __pyx_t_10 = __pyx_t_9;
          goto __pyx_L14_bool_binop_done;
        }
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_isfile); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 677, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v_py_stylesheet_string) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_py_stylesheet_string);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 677, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 677, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 677, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = __pyx_t_9;
        __pyx_L14_bool_binop_done:;
        if (unlikely(__pyx_t_10)) {

          /* "saxonc.pyx":678
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *                 raise Exception("Stylesheet file does not exist")             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":
 */
          __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 678, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(1, 678, __pyx_L1_error)

          /* "saxonc.pyx":677
 *             if key == "stylesheet_file":
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:             # <<<<<<<<<<<<<<
 *                 raise Exception("Stylesheet file does not exist")
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 */
        }

        /* "saxonc.pyx":679
 *               if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *                 raise Exception("Stylesheet file does not exist")
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""             # <<<<<<<<<<<<<<
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(1, 679, __pyx_L1_error)
          __pyx_t_12 = __pyx_t_13;
        } else {
          __pyx_t_12 = ((char *)"");
        }
        __pyx_v_c_stylesheetfile = __pyx_t_12;

        /* "saxonc.pyx":675
 *                 raise Exception("source file name does not exist")
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 */
      }

      /* "saxonc.pyx":669
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":680
 *                 raise Exception("Stylesheet file does not exist")
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmNode):
 *               self.setSourceFromXdmNode(value)
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_node, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 680, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":681
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *               self.setSourceFromXdmNode(value)
 *           elif len(kwds) > 0:
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmNode); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":682
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):
 *               self.setSourceFromXdmNode(value)             # <<<<<<<<<<<<<<
 *           elif len(kwds) > 0:
 *             raise Warning("Warning: transform_to_string should only the following keyword arguments: (source_file, stylesheet_file, xdm_node)")
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setSourceFromXdmNode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 682, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_value);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 682, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "saxonc.pyx":681
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *               self.setSourceFromXdmNode(value)
 *           elif len(kwds) > 0:
 */
      }

      /* "saxonc.pyx":680
 *                 raise Exception("Stylesheet file does not exist")
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmNode):
 *               self.setSourceFromXdmNode(value)
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":683
 *             if isinstance(value, PyXdmNode):
 *               self.setSourceFromXdmNode(value)
 *           elif len(kwds) > 0:             # <<<<<<<<<<<<<<
 *             raise Warning("Warning: transform_to_string should only the following keyword arguments: (source_file, stylesheet_file, xdm_node)")
 * 
 */
    __pyx_t_14 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(1, 683, __pyx_L1_error)
    __pyx_t_9 = ((__pyx_t_14 > 0) != 0);
    if (unlikely(__pyx_t_9)) {

      /* "saxonc.pyx":684
 *               self.setSourceFromXdmNode(value)
 *           elif len(kwds) > 0:
 *             raise Warning("Warning: transform_to_string should only the following keyword arguments: (source_file, stylesheet_file, xdm_node)")             # <<<<<<<<<<<<<<
 * 
 *         cdef const char* c_string
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_Warning, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 684, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 684, __pyx_L1_error)

      /* "saxonc.pyx":683
 *             if isinstance(value, PyXdmNode):
 *               self.setSourceFromXdmNode(value)
 *           elif len(kwds) > 0:             # <<<<<<<<<<<<<<
 *             raise Warning("Warning: transform_to_string should only the following keyword arguments: (source_file, stylesheet_file, xdm_node)")
 * 
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":668
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":687
 * 
 *         cdef const char* c_string
 *         if len(kwds) == 0:             # <<<<<<<<<<<<<<
 *           c_string = self.thisxptr.transformToString()
 *         else:
 */
  __pyx_t_3 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 687, __pyx_L1_error)
  __pyx_t_9 = ((__pyx_t_3 == 0) != 0);
  if (__pyx_t_9) {

    /* "saxonc.pyx":688
 *         cdef const char* c_string
 *         if len(kwds) == 0:
 *           c_string = self.thisxptr.transformToString()             # <<<<<<<<<<<<<<
 *         else:
 *           c_string = self.thisxptr.transformFileToString(c_sourcefile if py_source_string is not None else NULL, c_stylesheetfile if py_stylesheet_string is not None else NULL)
 */
    __pyx_v_c_string = __pyx_v_self->thisxptr->transformToString();

    /* "saxonc.pyx":687
 * 
 *         cdef const char* c_string
 *         if len(kwds) == 0:             # <<<<<<<<<<<<<<
 *           c_string = self.thisxptr.transformToString()
 *         else:
 */
    goto __pyx_L17;
  }

  /* "saxonc.pyx":690
 *           c_string = self.thisxptr.transformToString()
 *         else:
 *           c_string = self.thisxptr.transformFileToString(c_sourcefile if py_source_string is not None else NULL, c_stylesheetfile if py_stylesheet_string is not None else NULL)             # <<<<<<<<<<<<<<
 * 
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 */
  /*else*/ {
    __pyx_t_9 = (__pyx_v_py_source_string != Py_None);
    if ((__pyx_t_9 != 0)) {
      __pyx_t_12 = __pyx_v_c_sourcefile;
    } else {
      __pyx_t_12 = NULL;
    }
    __pyx_t_9 = (__pyx_v_py_stylesheet_string != Py_None);
    if ((__pyx_t_9 != 0)) {
      __pyx_t_13 = __pyx_v_c_stylesheetfile;
    } else {
      __pyx_t_13 = NULL;
    }
    __pyx_v_c_string = __pyx_v_self->thisxptr->transformFileToString(__pyx_t_12, __pyx_t_13);
  }
  __pyx_L17:;

  /* "saxonc.pyx":692
 *           c_string = self.thisxptr.transformFileToString(c_sourcefile if py_source_string is not None else NULL, c_stylesheetfile if py_stylesheet_string is not None else NULL)
 * 
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":693
 * 
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 *      def transform_to_file(self, **kwds):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":643
 *         return val
 * 
 *      def transform_to_string(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         transform_to_string(self, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.transform_to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":695
 *         return ustring
 * 
 *      def transform_to_file(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         transform_to_file(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_29transform_to_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_28transform_to_file[] = "\n        transform_to_file(self, **kwds)\n        Execute transformation to a file. It is possible to specify the as an argument or using the set_output_file method.       \n        Args:\n            **kwds: Possible optional arguments: source_file (str) or xdm_node (PyXdmNode). Other allowed argument: stylesheet_file (str), output_file (str)\n\n\n        Example:\n\n            1) xsltproc.transform_to_file(source_file=\"cat.xml\", stylesheet_file=\"test1.xsl\", output_file=\"result.xml\")\n\n            2) xsltproc.set_source(\"cat.xml\")\r\n               xsltproc.setoutput_file(\"result.xml\")\r\n               xsltproc.transform_to_file(stylesheet_file=\"test1.xsl\")\n\n\n            3) node = saxon_proc.parse_xml(xml_text=\"<in/>\")\r\n               xsltproc.transform_to_file(output_file=\"result.xml\", stylesheet_file=\"test1.xsl\", xdm_node= node)        \n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_29transform_to_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_to_file (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("transform_to_file", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "transform_to_file", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_28transform_to_file(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_28transform_to_file(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  char *__pyx_v_c_sourcefile;
  char *__pyx_v_c_outputfile;
  char *__pyx_v_c_stylesheetfile;
  PyObject *__pyx_v_py_source_string = NULL;
  PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_py_output_string = NULL;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_node_ = 0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform_to_file", 0);

  /* "saxonc.pyx":718
 *         cdef char * c_outputfile
 *         cdef char * c_stylesheetfile
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         py_output_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":719
 *         cdef char * c_stylesheetfile
 *         py_source_string = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         py_output_string = None
 *         cdef PyXdmNode node_
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":720
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         py_output_string = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode node_
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_output_string = Py_None;

  /* "saxonc.pyx":722
 *         py_output_string = None
 *         cdef PyXdmNode node_
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 722, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 722, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 722, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 722, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 722, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 722, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 722, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 722, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 722, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":723
 *         cdef PyXdmNode node_
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":724
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               c_sourcefile = py_source_string if value is not None else ""
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 724, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":725
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "output_file":
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 725, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 725, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __pyx_t_6;
          __pyx_t_6 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_1 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_py_source_string, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "saxonc.pyx":726
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               c_sourcefile = py_source_string if value is not None else ""             # <<<<<<<<<<<<<<
 *             if key == "output_file":
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_v_py_source_string); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(1, 726, __pyx_L1_error)
          __pyx_t_11 = __pyx_t_12;
        } else {
          __pyx_t_11 = ((char *)"");
        }
        __pyx_v_c_sourcefile = __pyx_t_11;

        /* "saxonc.pyx":724
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               c_sourcefile = py_source_string if value is not None else ""
 */
      }

      /* "saxonc.pyx":727
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "output_file":             # <<<<<<<<<<<<<<
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_output_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 727, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":728
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "output_file":
 *               py_output_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 728, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 728, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __pyx_t_6;
          __pyx_t_6 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_1 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_py_output_string, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "saxonc.pyx":729
 *             if key == "output_file":
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_v_py_output_string); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(1, 729, __pyx_L1_error)
          __pyx_t_11 = __pyx_t_12;
        } else {
          __pyx_t_11 = ((char *)"");
        }
        __pyx_v_c_outputfile = __pyx_t_11;

        /* "saxonc.pyx":727
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "output_file":             # <<<<<<<<<<<<<<
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 */
      }

      /* "saxonc.pyx":730
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 730, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":731
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 731, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 731, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __pyx_t_6;
          __pyx_t_6 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_1 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "saxonc.pyx":732
 *             if key == "stylesheet_file":
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""             # <<<<<<<<<<<<<<
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(1, 732, __pyx_L1_error)
          __pyx_t_11 = __pyx_t_12;
        } else {
          __pyx_t_11 = ((char *)"");
        }
        __pyx_v_c_stylesheetfile = __pyx_t_11;

        /* "saxonc.pyx":730
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 */
      }

      /* "saxonc.pyx":723
 *         cdef PyXdmNode node_
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":733
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmNode):
 *               node_ = value
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_node, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 733, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":734
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *               node_ = value
 *               self.thisxptr.setSourceFromXdmNode(node_.derivednptr)
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmNode); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":735
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):
 *               node_ = value             # <<<<<<<<<<<<<<
 *               self.thisxptr.setSourceFromXdmNode(node_.derivednptr)
 * 
 */
        if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmNode))))) __PYX_ERR(1, 735, __pyx_L1_error)
        __pyx_t_1 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_node_, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "saxonc.pyx":736
 *             if isinstance(value, PyXdmNode):
 *               node_ = value
 *               self.thisxptr.setSourceFromXdmNode(node_.derivednptr)             # <<<<<<<<<<<<<<
 * 
 *         if len(kwds) == 0:
 */
        __pyx_v_self->thisxptr->setSourceFromXdmNode(__pyx_v_node_->derivednptr);

        /* "saxonc.pyx":734
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *               node_ = value
 *               self.thisxptr.setSourceFromXdmNode(node_.derivednptr)
 */
      }

      /* "saxonc.pyx":733
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmNode):
 *               node_ = value
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":722
 *         py_output_string = None
 *         cdef PyXdmNode node_
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":738
 *               self.thisxptr.setSourceFromXdmNode(node_.derivednptr)
 * 
 *         if len(kwds) == 0:             # <<<<<<<<<<<<<<
 *           self.thisxptr.transformToFile()
 *         else:
 */
  __pyx_t_3 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 738, __pyx_L1_error)
  __pyx_t_9 = ((__pyx_t_3 == 0) != 0);
  if (__pyx_t_9) {

    /* "saxonc.pyx":739
 * 
 *         if len(kwds) == 0:
 *           self.thisxptr.transformToFile()             # <<<<<<<<<<<<<<
 *         else:
 *           self.thisxptr.transformFileToFile(c_sourcefile if py_source_string is not None else NULL, c_stylesheetfile if py_stylesheet_string is not None else NULL, c_outputfile if py_output_string is not None else NULL)
 */
    __pyx_v_self->thisxptr->transformToFile();

    /* "saxonc.pyx":738
 *               self.thisxptr.setSourceFromXdmNode(node_.derivednptr)
 * 
 *         if len(kwds) == 0:             # <<<<<<<<<<<<<<
 *           self.thisxptr.transformToFile()
 *         else:
 */
    goto __pyx_L12;
  }

  /* "saxonc.pyx":741
 *           self.thisxptr.transformToFile()
 *         else:
 *           self.thisxptr.transformFileToFile(c_sourcefile if py_source_string is not None else NULL, c_stylesheetfile if py_stylesheet_string is not None else NULL, c_outputfile if py_output_string is not None else NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_9 = (__pyx_v_py_source_string != Py_None);
    if ((__pyx_t_9 != 0)) {
      __pyx_t_11 = __pyx_v_c_sourcefile;
    } else {
      __pyx_t_11 = NULL;
    }
    __pyx_t_9 = (__pyx_v_py_stylesheet_string != Py_None);
    if ((__pyx_t_9 != 0)) {
      __pyx_t_12 = __pyx_v_c_stylesheetfile;
    } else {
      __pyx_t_12 = NULL;
    }
    __pyx_t_9 = (__pyx_v_py_output_string != Py_None);
    if ((__pyx_t_9 != 0)) {
      __pyx_t_13 = __pyx_v_c_outputfile;
    } else {
      __pyx_t_13 = NULL;
    }
    __pyx_v_self->thisxptr->transformFileToFile(__pyx_t_11, __pyx_t_12, __pyx_t_13);
  }
  __pyx_L12:;

  /* "saxonc.pyx":695
 *         return ustring
 * 
 *      def transform_to_file(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         transform_to_file(self, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.transform_to_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_py_output_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_node_);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":744
 * 
 * 
 *      def transform_to_value(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         transform_to_value(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_31transform_to_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_30transform_to_value[] = "\n        transform_to_value(self, **kwds)\n        Execute transformation to an Xdm Node\n\n        Args:\n            **kwds: Possible optional arguments: source_file (str) or xdm_node (PyXdmNode). Other allowed argument: stylesheet_file (str)\n\n\n\n        Returns:\n            PyXdmNode: Result of the transformation as an PyXdmNode object\n\n\n        Example:\n\n            1) node = xsltproc.transform_to_value(source_file=\"cat.xml\", stylesheet_file=\"test1.xsl\")\n\n            2) xsltproc.set_source(\"cat.xml\")\r\n               node = xsltproc.transform_to_value(stylesheet_file=\"test1.xsl\")\n\n\n            3) node = saxon_proc.parse_xml(xml_text=\"<in/>\")\r\n               node = xsltproc.transform_tovalue(stylesheet_file=\"test1.xsl\", xdm_node= node)        \n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_31transform_to_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_to_value (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("transform_to_value", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "transform_to_value", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_30transform_to_value(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_30transform_to_value(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  char const *__pyx_v_c_sourcefile;
  char const *__pyx_v_c_stylesheetfile;
  CYTHON_UNUSED PyObject *__pyx_v_py_source_string = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_aval = 0;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_nval = 0;
  XdmValue *__pyx_v_xdmValue;
  PyObject *__pyx_v_type_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform_to_value", 0);

  /* "saxonc.pyx":769
 *                node = xsltproc.transform_tovalue(stylesheet_file="test1.xsl", xdm_node= node)
 *         """
 *         cdef const char * c_sourcefile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_stylesheetfile = NULL
 *         py_source_string = None
 */
  __pyx_v_c_sourcefile = NULL;

  /* "saxonc.pyx":770
 *         """
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL             # <<<<<<<<<<<<<<
 *         py_source_string = None
 *         py_stylesheet_string = None
 */
  __pyx_v_c_stylesheetfile = NULL;

  /* "saxonc.pyx":771
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":772
 *         cdef const char * c_stylesheetfile = NULL
 *         py_source_string = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":773
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 773, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 773, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 773, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 773, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 773, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 773, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 773, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 773, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 773, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 773, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 773, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 773, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":774
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":775
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *             if key == "stylesheet_file":
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 775, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":776
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 776, __pyx_L1_error)
        __pyx_v_c_sourcefile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":775
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *             if key == "stylesheet_file":
 */
      }

      /* "saxonc.pyx":777
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 777, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":778
 *               c_sourcefile = make_c_str(value)
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)             # <<<<<<<<<<<<<<
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 778, __pyx_L1_error)
        __pyx_v_c_stylesheetfile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":777
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":
 */
      }

      /* "saxonc.pyx":774
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":779
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmNode):
 *               self.setSourceFromXdmNode(value)
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_node, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 779, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":780
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *               self.setSourceFromXdmNode(value)
 *         cdef PyXdmValue val = None
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmNode); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":781
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):
 *               self.setSourceFromXdmNode(value)             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setSourceFromXdmNode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 781, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_value);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 781, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "saxonc.pyx":780
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *               self.setSourceFromXdmNode(value)
 *         cdef PyXdmValue val = None
 */
      }

      /* "saxonc.pyx":779
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmNode):
 *               self.setSourceFromXdmNode(value)
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":773
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":782
 *             if isinstance(value, PyXdmNode):
 *               self.setSourceFromXdmNode(value)
 *         cdef PyXdmValue val = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":783
 *               self.setSourceFromXdmNode(value)
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_aval = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)Py_None);

  /* "saxonc.pyx":784
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         if len(kwds) == 0:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_nval = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":785
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL             # <<<<<<<<<<<<<<
 *         if len(kwds) == 0:
 *           xdmValue = self.thisxptr.transformToValue()
 */
  __pyx_v_xdmValue = NULL;

  /* "saxonc.pyx":786
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         if len(kwds) == 0:             # <<<<<<<<<<<<<<
 *           xdmValue = self.thisxptr.transformToValue()
 *         else:
 */
  __pyx_t_3 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 786, __pyx_L1_error)
  __pyx_t_9 = ((__pyx_t_3 == 0) != 0);
  if (__pyx_t_9) {

    /* "saxonc.pyx":787
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         if len(kwds) == 0:
 *           xdmValue = self.thisxptr.transformToValue()             # <<<<<<<<<<<<<<
 *         else:
 *           xdmValue = self.thisxptr.transformFileToValue(c_sourcefile, c_stylesheetfile)
 */
    __pyx_v_xdmValue = __pyx_v_self->thisxptr->transformToValue();

    /* "saxonc.pyx":786
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         if len(kwds) == 0:             # <<<<<<<<<<<<<<
 *           xdmValue = self.thisxptr.transformToValue()
 *         else:
 */
    goto __pyx_L11;
  }

  /* "saxonc.pyx":789
 *           xdmValue = self.thisxptr.transformToValue()
 *         else:
 *           xdmValue = self.thisxptr.transformFileToValue(c_sourcefile, c_stylesheetfile)             # <<<<<<<<<<<<<<
 * 
 *         if xdmValue is NULL:
 */
  /*else*/ {
    __pyx_v_xdmValue = __pyx_v_self->thisxptr->transformFileToValue(__pyx_v_c_sourcefile, __pyx_v_c_stylesheetfile);
  }
  __pyx_L11:;

  /* "saxonc.pyx":791
 *           xdmValue = self.thisxptr.transformFileToValue(c_sourcefile, c_stylesheetfile)
 * 
 *         if xdmValue is NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef type_ = xdmValue.getType()
 */
  __pyx_t_9 = ((__pyx_v_xdmValue == NULL) != 0);
  if (__pyx_t_9) {

    /* "saxonc.pyx":792
 * 
 *         if xdmValue is NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":791
 *           xdmValue = self.thisxptr.transformFileToValue(c_sourcefile, c_stylesheetfile)
 * 
 *         if xdmValue is NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef type_ = xdmValue.getType()
 */
  }

  /* "saxonc.pyx":793
 *         if xdmValue is NULL:
 *             return None
 *         cdef type_ = xdmValue.getType()             # <<<<<<<<<<<<<<
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_xdmValue->getType()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_type_ = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":794
 *             return None
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:             # <<<<<<<<<<<<<<
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "saxonc.pyx":795
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_aval, ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":796
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue             # <<<<<<<<<<<<<<
 *             return aval
 *         elif type_ == 3:
 */
    __pyx_v_aval->derivedaptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
    __pyx_v_aval->__pyx_base.derivedptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
    __pyx_v_aval->__pyx_base.__pyx_base.thisvptr = ((XdmAtomicValue *)__pyx_v_xdmValue);

    /* "saxonc.pyx":797
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval             # <<<<<<<<<<<<<<
 *         elif type_ == 3:
 *             nval = PyXdmNode()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_aval));
    __pyx_r = ((PyObject *)__pyx_v_aval);
    goto __pyx_L0;

    /* "saxonc.pyx":794
 *             return None
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:             # <<<<<<<<<<<<<<
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
  }

  /* "saxonc.pyx":798
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 798, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "saxonc.pyx":799
 *             return aval
 *         elif type_ == 3:
 *             nval = PyXdmNode()             # <<<<<<<<<<<<<<
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *             return nval
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_nval, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":800
 *         elif type_ == 3:
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue             # <<<<<<<<<<<<<<
 *             return nval
 *         else:
 */
    __pyx_v_nval->derivednptr = ((XdmNode *)__pyx_v_xdmValue);
    __pyx_v_nval->__pyx_base.derivedptr = ((XdmNode *)__pyx_v_xdmValue);
    __pyx_v_nval->__pyx_base.__pyx_base.thisvptr = ((XdmNode *)__pyx_v_xdmValue);

    /* "saxonc.pyx":801
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *             return nval             # <<<<<<<<<<<<<<
 *         else:
 *             val = PyXdmValue()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_nval));
    __pyx_r = ((PyObject *)__pyx_v_nval);
    goto __pyx_L0;

    /* "saxonc.pyx":798
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
  }

  /* "saxonc.pyx":803
 *             return nval
 *         else:
 *             val = PyXdmValue()             # <<<<<<<<<<<<<<
 *             val.thisvptr = xdmValue
 *             return val
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmValue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":804
 *         else:
 *             val = PyXdmValue()
 *             val.thisvptr = xdmValue             # <<<<<<<<<<<<<<
 *             return val
 * 
 */
    __pyx_v_val->thisvptr = __pyx_v_xdmValue;

    /* "saxonc.pyx":805
 *             val = PyXdmValue()
 *             val.thisvptr = xdmValue
 *             return val             # <<<<<<<<<<<<<<
 * 
 *      def compile_stylesheet(self, **kwds):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;
  }

  /* "saxonc.pyx":744
 * 
 * 
 *      def transform_to_value(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         transform_to_value(self, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.transform_to_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XDECREF((PyObject *)__pyx_v_aval);
  __Pyx_XDECREF((PyObject *)__pyx_v_nval);
  __Pyx_XDECREF(__pyx_v_type_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":807
 *             return val
 * 
 *      def compile_stylesheet(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         compile_stylesheet(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_33compile_stylesheet(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_32compile_stylesheet[] = "\n        compile_stylesheet(self, **kwds)\n        Compile a stylesheet  received as text, uri or as a node object. The compiled stylesheet is cached and available for execution\n        later. It is also possible to save the compiled stylesheet (SEF file) given the option 'save' and 'output_file'\n   \n        Args:\n            **kwds: Possible keyword arguments stylesheet_text (str), stylesheet_file (str) or stylsheetnode (PyXdmNode). Also possible\n                    to add the options save (boolean) and output_file, which creates an exported stylesheet to file (SEF).\n\n        Example:\n            1. xsltproc.compile_stylesheet(stylesheet_text=\"<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='2.0'>\n            <xsl:param name='values' select='(2,3,4)' /><xsl:output method='xml' indent='yes' /><xsl:template match='*'><output>\n              <xsl:value-of select='//person[1]'/>\n              <xsl:for-each select='$values' >\n                <out><xsl:value-of select='. * 3'/></out>\n              </xsl:for-each></output></xsl:template>\n            </xsl:stylesheet>\")\n\n            2. xsltproc.compile_stylesheet(stylesheet_file=\"test1.xsl\", save=True, output_file=\"test1.sef\")\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_33compile_stylesheet(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compile_stylesheet (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("compile_stylesheet", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "compile_stylesheet", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_32compile_stylesheet(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_32compile_stylesheet(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_py_error_message = NULL;
  char *__pyx_v_c_outputfile;
  char *__pyx_v_c_stylesheet;
  PyObject *__pyx_v_py_output_string = NULL;
  PyObject *__pyx_v_py_stylesheet_string = NULL;
  CYTHON_UNUSED int __pyx_v_py_save;
  CYTHON_UNUSED int __pyx_v_option;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_py_xdmNode = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  char *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compile_stylesheet", 0);

  /* "saxonc.pyx":828
 *             2. xsltproc.compile_stylesheet(stylesheet_file="test1.xsl", save=True, output_file="test1.sef")
 *         """
 *         py_error_message = "CompileStylesheet should only be one of the keyword option: (stylesheet_text|stylesheet_file|stylesheet_node), also in allowed in addition the optional keyword 'save' boolean with the keyword 'outputfile' keyword"             # <<<<<<<<<<<<<<
 *         if len(kwds) >3:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(__pyx_kp_s_CompileStylesheet_should_only_be);
  __pyx_v_py_error_message = __pyx_kp_s_CompileStylesheet_should_only_be;

  /* "saxonc.pyx":829
 *         """
 *         py_error_message = "CompileStylesheet should only be one of the keyword option: (stylesheet_text|stylesheet_file|stylesheet_node), also in allowed in addition the optional keyword 'save' boolean with the keyword 'outputfile' keyword"
 *         if len(kwds) >3:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef char * c_outputfile
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 829, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 > 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":830
 *         py_error_message = "CompileStylesheet should only be one of the keyword option: (stylesheet_text|stylesheet_file|stylesheet_node), also in allowed in addition the optional keyword 'save' boolean with the keyword 'outputfile' keyword"
 *         if len(kwds) >3:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         cdef char * c_outputfile
 *         cdef char * c_stylesheet
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 830, __pyx_L1_error)

    /* "saxonc.pyx":829
 *         """
 *         py_error_message = "CompileStylesheet should only be one of the keyword option: (stylesheet_text|stylesheet_file|stylesheet_node), also in allowed in addition the optional keyword 'save' boolean with the keyword 'outputfile' keyword"
 *         if len(kwds) >3:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef char * c_outputfile
 */
  }

  /* "saxonc.pyx":833
 *         cdef char * c_outputfile
 *         cdef char * c_stylesheet
 *         py_output_string = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         py_save = False
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_output_string = Py_None;

  /* "saxonc.pyx":834
 *         cdef char * c_stylesheet
 *         py_output_string = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         py_save = False
 *         cdef int option = 0
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":835
 *         py_output_string = None
 *         py_stylesheet_string = None
 *         py_save = False             # <<<<<<<<<<<<<<
 *         cdef int option = 0
 *         cdef PyXdmNode py_xdmNode = None
 */
  __pyx_v_py_save = 0;

  /* "saxonc.pyx":836
 *         py_stylesheet_string = None
 *         py_save = False
 *         cdef int option = 0             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode py_xdmNode = None
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:
 */
  __pyx_v_option = 0;

  /* "saxonc.pyx":837
 *         py_save = False
 *         cdef int option = 0
 *         cdef PyXdmNode py_xdmNode = None             # <<<<<<<<<<<<<<
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_xdmNode = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":838
 *         cdef int option = 0
 *         cdef PyXdmNode py_xdmNode = None
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:
 */
  __pyx_t_3 = __Pyx_PyDict_Keys(__pyx_v_kwds); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PySet_Add(__pyx_t_4, __pyx_n_s_stylesheet_text) < 0) __PYX_ERR(1, 838, __pyx_L1_error)
  if (PySet_Add(__pyx_t_4, __pyx_n_s_stylesheet_file) < 0) __PYX_ERR(1, 838, __pyx_L1_error)
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 838, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 838, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":839
 *         cdef PyXdmNode py_xdmNode = None
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:
 *           raise Exception(py_error_message)
 */
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 839, __pyx_L1_error)

    /* "saxonc.pyx":838
 *         cdef int option = 0
 *         cdef PyXdmNode py_xdmNode = None
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:
 */
  }

  /* "saxonc.pyx":840
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_node", "stylesheet_file"}:
 */
  __pyx_t_5 = __Pyx_PyDict_Keys(__pyx_v_kwds); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PySet_Add(__pyx_t_4, __pyx_n_s_stylesheet_text) < 0) __PYX_ERR(1, 840, __pyx_L1_error)
  if (PySet_Add(__pyx_t_4, __pyx_n_s_stylesheet_node) < 0) __PYX_ERR(1, 840, __pyx_L1_error)
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 840, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 840, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":841
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         if kwds.keys() >= {"stylesheet_node", "stylesheet_file"}:
 *           raise Exception(py_error_message)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 841, __pyx_L1_error)

    /* "saxonc.pyx":840
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_node", "stylesheet_file"}:
 */
  }

  /* "saxonc.pyx":842
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_node", "stylesheet_file"}:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_Keys(__pyx_v_kwds); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PySet_Add(__pyx_t_4, __pyx_n_s_stylesheet_node) < 0) __PYX_ERR(1, 842, __pyx_L1_error)
  if (PySet_Add(__pyx_t_4, __pyx_n_s_stylesheet_file) < 0) __PYX_ERR(1, 842, __pyx_L1_error)
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 842, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 842, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":843
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_node", "stylesheet_file"}:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 * 
 *         if ("save" in kwds) and kwds["save"]==True:
 */
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 843, __pyx_L1_error)

    /* "saxonc.pyx":842
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_node", "stylesheet_file"}:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 * 
 */
  }

  /* "saxonc.pyx":845
 *           raise Exception(py_error_message)
 * 
 *         if ("save" in kwds) and kwds["save"]==True:             # <<<<<<<<<<<<<<
 *           del kwds["save"]
 *           if "output_file" not in kwds:
 */
  __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_save, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 845, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_save); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 845, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 845, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __pyx_t_7;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_2) {

    /* "saxonc.pyx":846
 * 
 *         if ("save" in kwds) and kwds["save"]==True:
 *           del kwds["save"]             # <<<<<<<<<<<<<<
 *           if "output_file" not in kwds:
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")
 */
    if (unlikely(PyDict_DelItem(__pyx_v_kwds, __pyx_n_s_save) < 0)) __PYX_ERR(1, 846, __pyx_L1_error)

    /* "saxonc.pyx":847
 *         if ("save" in kwds) and kwds["save"]==True:
 *           del kwds["save"]
 *           if "output_file" not in kwds:             # <<<<<<<<<<<<<<
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 */
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_output_file, __pyx_v_kwds, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 847, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (unlikely(__pyx_t_7)) {

      /* "saxonc.pyx":848
 *           del kwds["save"]
 *           if "output_file" not in kwds:
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")             # <<<<<<<<<<<<<<
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 *           c_outputfile = py_output_string
 */
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 848, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 848, __pyx_L1_error)

      /* "saxonc.pyx":847
 *         if ("save" in kwds) and kwds["save"]==True:
 *           del kwds["save"]
 *           if "output_file" not in kwds:             # <<<<<<<<<<<<<<
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 */
    }

    /* "saxonc.pyx":849
 *           if "output_file" not in kwds:
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")
 *           py_output_string = kwds["output_file"].encode('UTF-8')             # <<<<<<<<<<<<<<
 *           c_outputfile = py_output_string
 *           if "stylesheet_text" in kwds:
 */
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_output_file); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_py_output_string, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "saxonc.pyx":850
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 *           c_outputfile = py_output_string             # <<<<<<<<<<<<<<
 *           if "stylesheet_text" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 */
    __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_py_output_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 850, __pyx_L1_error)
    __pyx_v_c_outputfile = __pyx_t_8;

    /* "saxonc.pyx":851
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 *           c_outputfile = py_output_string
 *           if "stylesheet_text" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
    __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stylesheet_text, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 851, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_7 != 0);
    if (__pyx_t_2) {

      /* "saxonc.pyx":852
 *           c_outputfile = py_output_string
 *           if "stylesheet_text" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')             # <<<<<<<<<<<<<<
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromStringAndSave(c_stylesheet, c_outputfile)
 */
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_stylesheet_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "saxonc.pyx":853
 *           if "stylesheet_text" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string             # <<<<<<<<<<<<<<
 *             self.thisxptr.compileFromStringAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_file" in kwds:
 */
      __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 853, __pyx_L1_error)
      __pyx_v_c_stylesheet = __pyx_t_8;

      /* "saxonc.pyx":854
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromStringAndSave(c_stylesheet, c_outputfile)             # <<<<<<<<<<<<<<
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 */
      __pyx_v_self->thisxptr->compileFromStringAndSave(__pyx_v_c_stylesheet, __pyx_v_c_outputfile);

      /* "saxonc.pyx":851
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 *           c_outputfile = py_output_string
 *           if "stylesheet_text" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
      goto __pyx_L11;
    }

    /* "saxonc.pyx":855
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromStringAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_file" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stylesheet_file, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 855, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (__pyx_t_7) {

      /* "saxonc.pyx":856
 *             self.thisxptr.compileFromStringAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')             # <<<<<<<<<<<<<<
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromFileAndSave(c_stylesheet, c_outputfile)
 */
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_stylesheet_file); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "saxonc.pyx":857
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string             # <<<<<<<<<<<<<<
 *             self.thisxptr.compileFromFileAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_node" in kwds:
 */
      __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 857, __pyx_L1_error)
      __pyx_v_c_stylesheet = __pyx_t_8;

      /* "saxonc.pyx":858
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromFileAndSave(c_stylesheet, c_outputfile)             # <<<<<<<<<<<<<<
 *           elif "stylesheet_node" in kwds:
 *             py_xdmNode = kwds["stylesheet_node"]
 */
      __pyx_v_self->thisxptr->compileFromFileAndSave(__pyx_v_c_stylesheet, __pyx_v_c_outputfile);

      /* "saxonc.pyx":855
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromStringAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_file" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
      goto __pyx_L11;
    }

    /* "saxonc.pyx":859
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromFileAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_node" in kwds:             # <<<<<<<<<<<<<<
 *             py_xdmNode = kwds["stylesheet_node"]
 *             #if not isinstance(py_value, PyXdmNode):
 */
    __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stylesheet_node, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 859, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_7 != 0);
    if (likely(__pyx_t_2)) {

      /* "saxonc.pyx":860
 *             self.thisxptr.compileFromFileAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_node" in kwds:
 *             py_xdmNode = kwds["stylesheet_node"]             # <<<<<<<<<<<<<<
 *             #if not isinstance(py_value, PyXdmNode):
 *               #raise Exception("StylesheetNode keyword arugment is not of type XdmNode")
 */
      __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_stylesheet_node); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_6saxonc_PyXdmNode))))) __PYX_ERR(1, 860, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_py_xdmNode, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "saxonc.pyx":864
 *               #raise Exception("StylesheetNode keyword arugment is not of type XdmNode")
 *             #value = PyXdmNode(py_value)
 *             self.thisxptr.compileFromXdmNodeAndSave(py_xdmNode.derivednptr, c_outputfile)             # <<<<<<<<<<<<<<
 *           else:
 *             raise Exception(py_error_message)
 */
      __pyx_v_self->thisxptr->compileFromXdmNodeAndSave(__pyx_v_py_xdmNode->derivednptr, __pyx_v_c_outputfile);

      /* "saxonc.pyx":859
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromFileAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_node" in kwds:             # <<<<<<<<<<<<<<
 *             py_xdmNode = kwds["stylesheet_node"]
 *             #if not isinstance(py_value, PyXdmNode):
 */
      goto __pyx_L11;
    }

    /* "saxonc.pyx":866
 *             self.thisxptr.compileFromXdmNodeAndSave(py_xdmNode.derivednptr, c_outputfile)
 *           else:
 *             raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         else:
 *           if "stylesheet_text" in kwds:
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 866, __pyx_L1_error)
    }
    __pyx_L11:;

    /* "saxonc.pyx":845
 *           raise Exception(py_error_message)
 * 
 *         if ("save" in kwds) and kwds["save"]==True:             # <<<<<<<<<<<<<<
 *           del kwds["save"]
 *           if "output_file" not in kwds:
 */
    goto __pyx_L7;
  }

  /* "saxonc.pyx":868
 *             raise Exception(py_error_message)
 *         else:
 *           if "stylesheet_text" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
  /*else*/ {
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stylesheet_text, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 868, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (__pyx_t_7) {

      /* "saxonc.pyx":869
 *         else:
 *           if "stylesheet_text" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')             # <<<<<<<<<<<<<<
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromString(c_stylesheet)
 */
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_stylesheet_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "saxonc.pyx":870
 *           if "stylesheet_text" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string             # <<<<<<<<<<<<<<
 *             self.thisxptr.compileFromString(c_stylesheet)
 *           elif "stylesheet_file" in kwds:
 */
      __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 870, __pyx_L1_error)
      __pyx_v_c_stylesheet = __pyx_t_8;

      /* "saxonc.pyx":871
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromString(c_stylesheet)             # <<<<<<<<<<<<<<
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 */
      __pyx_v_self->thisxptr->compileFromString(__pyx_v_c_stylesheet);

      /* "saxonc.pyx":868
 *             raise Exception(py_error_message)
 *         else:
 *           if "stylesheet_text" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
      goto __pyx_L12;
    }

    /* "saxonc.pyx":872
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromString(c_stylesheet)
 *           elif "stylesheet_file" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
    __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stylesheet_file, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 872, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_7 != 0);
    if (__pyx_t_2) {

      /* "saxonc.pyx":873
 *             self.thisxptr.compileFromString(c_stylesheet)
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')             # <<<<<<<<<<<<<<
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromFile(c_stylesheet)
 */
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_stylesheet_file); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 873, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 873, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 873, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "saxonc.pyx":874
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string             # <<<<<<<<<<<<<<
 *             self.thisxptr.compileFromFile(c_stylesheet)
 *           elif "stylesheet_node" in kwds:
 */
      __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 874, __pyx_L1_error)
      __pyx_v_c_stylesheet = __pyx_t_8;

      /* "saxonc.pyx":875
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromFile(c_stylesheet)             # <<<<<<<<<<<<<<
 *           elif "stylesheet_node" in kwds:
 *             py_xdmNode = kwds["stylesheet_node"]
 */
      __pyx_v_self->thisxptr->compileFromFile(__pyx_v_c_stylesheet);

      /* "saxonc.pyx":872
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromString(c_stylesheet)
 *           elif "stylesheet_file" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
      goto __pyx_L12;
    }

    /* "saxonc.pyx":876
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromFile(c_stylesheet)
 *           elif "stylesheet_node" in kwds:             # <<<<<<<<<<<<<<
 *             py_xdmNode = kwds["stylesheet_node"]
 *             #if not isinstance(py_value, PyXdmNode):
 */
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stylesheet_node, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 876, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (likely(__pyx_t_7)) {

      /* "saxonc.pyx":877
 *             self.thisxptr.compileFromFile(c_stylesheet)
 *           elif "stylesheet_node" in kwds:
 *             py_xdmNode = kwds["stylesheet_node"]             # <<<<<<<<<<<<<<
 *             #if not isinstance(py_value, PyXdmNode):
 *               #raise Exception("StylesheetNode keyword arugment is not of type XdmNode")
 */
      __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_stylesheet_node); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 877, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_6saxonc_PyXdmNode))))) __PYX_ERR(1, 877, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_py_xdmNode, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "saxonc.pyx":881
 *               #raise Exception("StylesheetNode keyword arugment is not of type XdmNode")
 *             #value = PyXdmNode(py_value)
 *             self.thisxptr.compileFromXdmNode(py_xdmNode.derivednptr)             # <<<<<<<<<<<<<<
 *           else:
 *             raise Exception(py_error_message)
 */
      __pyx_v_self->thisxptr->compileFromXdmNode(__pyx_v_py_xdmNode->derivednptr);

      /* "saxonc.pyx":876
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromFile(c_stylesheet)
 *           elif "stylesheet_node" in kwds:             # <<<<<<<<<<<<<<
 *             py_xdmNode = kwds["stylesheet_node"]
 *             #if not isinstance(py_value, PyXdmNode):
 */
      goto __pyx_L12;
    }

    /* "saxonc.pyx":883
 *             self.thisxptr.compileFromXdmNode(py_xdmNode.derivednptr)
 *           else:
 *             raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 * 
 *      def release_stylesheet(self):
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 883, __pyx_L1_error)
    }
    __pyx_L12:;
  }
  __pyx_L7:;

  /* "saxonc.pyx":807
 *             return val
 * 
 *      def compile_stylesheet(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         compile_stylesheet(self, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.compile_stylesheet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_error_message);
  __Pyx_XDECREF(__pyx_v_py_output_string);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_py_xdmNode);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":885
 *             raise Exception(py_error_message)
 * 
 *      def release_stylesheet(self):             # <<<<<<<<<<<<<<
 *         """
 *         release_stylesheet(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_35release_stylesheet(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_34release_stylesheet[] = "\n        release_stylesheet(self)\n        Release cached stylesheet\n\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_35release_stylesheet(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("release_stylesheet (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_34release_stylesheet(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_34release_stylesheet(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("release_stylesheet", 0);

  /* "saxonc.pyx":891
 * 
 *         """
 *         self.thisxptr.releaseStylesheet()             # <<<<<<<<<<<<<<
 * 
 *      def exception_occurred(self):
 */
  __pyx_v_self->thisxptr->releaseStylesheet();

  /* "saxonc.pyx":885
 *             raise Exception(py_error_message)
 * 
 *      def release_stylesheet(self):             # <<<<<<<<<<<<<<
 *         """
 *         release_stylesheet(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":893
 *         self.thisxptr.releaseStylesheet()
 * 
 *      def exception_occurred(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_occurred(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_37exception_occurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_36exception_occurred[] = "\n        exception_occurred(self)\n        Checks for pending exceptions without creating a local reference to the exception object\n        Returns:\n            boolean: True when there is a pending exception; otherwise return False        \n\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_37exception_occurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_occurred (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_36exception_occurred(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_36exception_occurred(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exception_occurred", 0);

  /* "saxonc.pyx":901
 * 
 *         """
 *         return self.thisxptr.exceptionCount() >0             # <<<<<<<<<<<<<<
 * 
 *      def check_exception(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisxptr->exceptionCount() > 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":893
 *         self.thisxptr.releaseStylesheet()
 * 
 *      def exception_occurred(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_occurred(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.exception_occurred", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":903
 *         return self.thisxptr.exceptionCount() >0
 * 
 *      def check_exception(self):             # <<<<<<<<<<<<<<
 *         """
 *         check_exception(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_39check_exception(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_38check_exception[] = "\n        check_exception(self)\n        Check for exception thrown and get message of the exception.\n  \n        Returns:\n            str: Returns the exception message if thrown otherwise return None\n\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_39check_exception(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_exception (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_38check_exception(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_38check_exception(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_exception", 0);

  /* "saxonc.pyx":912
 * 
 *         """
 *         cdef const char* c_string = self.thisxptr.checkException()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->thisxptr->checkException();

  /* "saxonc.pyx":913
 *         """
 *         cdef const char* c_string = self.thisxptr.checkException()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":914
 *         cdef const char* c_string = self.thisxptr.checkException()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 *      def exception_clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":903
 *         return self.thisxptr.exceptionCount() >0
 * 
 *      def check_exception(self):             # <<<<<<<<<<<<<<
 *         """
 *         check_exception(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.check_exception", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":916
 *         return ustring
 * 
 *      def exception_clear(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_clear(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_41exception_clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_40exception_clear[] = "\n        exception_clear(self)\n        Clear any exception thrown\n\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_41exception_clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_clear (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_40exception_clear(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_40exception_clear(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_clear", 0);

  /* "saxonc.pyx":922
 * 
 *         """
 *         self.thisxptr.exceptionClear()             # <<<<<<<<<<<<<<
 * 
 *      def exception_count(self):
 */
  __pyx_v_self->thisxptr->exceptionClear();

  /* "saxonc.pyx":916
 *         return ustring
 * 
 *      def exception_clear(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_clear(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":924
 *         self.thisxptr.exceptionClear()
 * 
 *      def exception_count(self):             # <<<<<<<<<<<<<<
 *         """
 *         excepton_count(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_43exception_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_42exception_count[] = "\n        excepton_count(self)\n        Get number of errors reported during execution.\n\n        Returns:\n            int: Count of the exceptions thrown during execution\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_43exception_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_count (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_42exception_count(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_42exception_count(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exception_count", 0);

  /* "saxonc.pyx":932
 *             int: Count of the exceptions thrown during execution
 *         """
 *         return self.thisxptr.exceptionCount()             # <<<<<<<<<<<<<<
 * 
 *      def get_error_message(self, index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisxptr->exceptionCount()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":924
 *         self.thisxptr.exceptionClear()
 * 
 *      def exception_count(self):             # <<<<<<<<<<<<<<
 *         """
 *         excepton_count(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.exception_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":934
 *         return self.thisxptr.exceptionCount()
 * 
 *      def get_error_message(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_message(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_45get_error_message(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_44get_error_message[] = "\n        get_error_message(self, index)\n        A transformation may have a number of errors reported against it. Get the ith error message if there are any errors\n\n        Args:\n            index (int): The i'th exception\n        \n        Returns:\n            str: The message of the i'th exception. Return None if the i'th exception does not exist.\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_45get_error_message(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_error_message (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_44get_error_message(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_44get_error_message(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_index) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_error_message", 0);

  /* "saxonc.pyx":945
 *             str: The message of the i'th exception. Return None if the i'th exception does not exist.
 *         """
 *         cdef const char* c_string = self.thisxptr.getErrorMessage(index)             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 945, __pyx_L1_error)
  __pyx_v_c_string = __pyx_v_self->thisxptr->getErrorMessage(__pyx_t_1);

  /* "saxonc.pyx":946
 *         """
 *         cdef const char* c_string = self.thisxptr.getErrorMessage(index)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 946, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":947
 *         cdef const char* c_string = self.thisxptr.getErrorMessage(index)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 *      def get_error_code(self, index):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":934
 *         return self.thisxptr.exceptionCount()
 * 
 *      def get_error_message(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_message(self, index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.get_error_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":949
 *         return ustring
 * 
 *      def get_error_code(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_code(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_47get_error_code(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_6saxonc_15PyXsltProcessor_46get_error_code[] = "\n        get_error_code(self, index)\n        A transformation may have a number of errors reported against it. Get the i'th error code if there are any errors\n\n        Args:\n            index (int): The i'th exception\n        \n        Returns:\n            str: The error code associated with the i'th exception. Return None if the i'th exception does not exist.\n\n        ";
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_47get_error_code(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_error_code (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_46get_error_code(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_46get_error_code(struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, PyObject *__pyx_v_index) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_error_code", 0);

  /* "saxonc.pyx":961
 * 
 *         """
 *         cdef const char* c_string = self.thisxptr.getErrorCode(index)             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 961, __pyx_L1_error)
  __pyx_v_c_string = __pyx_v_self->thisxptr->getErrorCode(__pyx_t_1);

  /* "saxonc.pyx":962
 *         """
 *         cdef const char* c_string = self.thisxptr.getErrorCode(index)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":963
 *         cdef const char* c_string = self.thisxptr.getErrorCode(index)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 * parametersDict = None
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":949
 *         return ustring
 * 
 *      def get_error_code(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_code(self, index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.get_error_code", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_49__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_49__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_48__reduce_cython__(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_48__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_51__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6saxonc_15PyXsltProcessor_51__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_15PyXsltProcessor_50__setstate_cython__(((struct __pyx_obj_6saxonc_PyXsltProcessor *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_15PyXsltProcessor_50__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXsltProcessor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXsltProcessor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":974
 * 
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """Default constructor """
 *         self.thisxptr = NULL
 */

/* Python wrapper */
static int __pyx_pw_6saxonc_17PyXslt30Processor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6saxonc_17PyXslt30Processor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor___cinit__(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6saxonc_17PyXslt30Processor___cinit__(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "saxonc.pyx":976
 *      def __cinit__(self):
 *         """Default constructor """
 *         self.thisxptr = NULL             # <<<<<<<<<<<<<<
 *      def __dealloc__(self):
 *         if self.thisxptr != NULL:
 */
  __pyx_v_self->thisxptr = NULL;

  /* "saxonc.pyx":974
 * 
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """Default constructor """
 *         self.thisxptr = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":977
 *         """Default constructor """
 *         self.thisxptr = NULL
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisxptr != NULL:
 *            del self.thisxptr
 */

/* Python wrapper */
static void __pyx_pw_6saxonc_17PyXslt30Processor_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6saxonc_17PyXslt30Processor_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6saxonc_17PyXslt30Processor_2__dealloc__(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6saxonc_17PyXslt30Processor_2__dealloc__(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "saxonc.pyx":978
 *         self.thisxptr = NULL
 *      def __dealloc__(self):
 *         if self.thisxptr != NULL:             # <<<<<<<<<<<<<<
 *            del self.thisxptr
 *      def set_cwd(self, cwd):
 */
  __pyx_t_1 = ((__pyx_v_self->thisxptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":979
 *      def __dealloc__(self):
 *         if self.thisxptr != NULL:
 *            del self.thisxptr             # <<<<<<<<<<<<<<
 *      def set_cwd(self, cwd):
 *         """
 */
    delete __pyx_v_self->thisxptr;

    /* "saxonc.pyx":978
 *         self.thisxptr = NULL
 *      def __dealloc__(self):
 *         if self.thisxptr != NULL:             # <<<<<<<<<<<<<<
 *            del self.thisxptr
 *      def set_cwd(self, cwd):
 */
  }

  /* "saxonc.pyx":977
 *         """Default constructor """
 *         self.thisxptr = NULL
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisxptr != NULL:
 *            del self.thisxptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "saxonc.pyx":980
 *         if self.thisxptr != NULL:
 *            del self.thisxptr
 *      def set_cwd(self, cwd):             # <<<<<<<<<<<<<<
 *         """
 *         set_cwd(self, cwd)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_5set_cwd(PyObject *__pyx_v_self, PyObject *__pyx_v_cwd); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_4set_cwd[] = "\n        set_cwd(self, cwd)\n        Set the current working directory.\n\n        Args:\n            cwd (str): current working directory\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_5set_cwd(PyObject *__pyx_v_self, PyObject *__pyx_v_cwd) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cwd (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_4set_cwd(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), ((PyObject *)__pyx_v_cwd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_4set_cwd(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_cwd) {
  PyObject *__pyx_v_py_cwd_string = NULL;
  char *__pyx_v_c_cwd;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cwd", 0);

  /* "saxonc.pyx":988
 *             cwd (str): current working directory
 *         """
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_cwd = py_cwd_string if cwd is not None else ""
 *         self.thisxptr.setcwd(c_cwd)
 */
  __pyx_t_2 = (__pyx_v_cwd != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cwd, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_cwd_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":989
 *         """
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None
 *         cdef char * c_cwd = py_cwd_string if cwd is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxptr.setcwd(c_cwd)
 * 
 */
  __pyx_t_2 = (__pyx_v_cwd != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_cwd_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 989, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_cwd = __pyx_t_6;

  /* "saxonc.pyx":990
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None
 *         cdef char * c_cwd = py_cwd_string if cwd is not None else ""
 *         self.thisxptr.setcwd(c_cwd)             # <<<<<<<<<<<<<<
 * 
 *      def set_global_context_item(self, **kwds):
 */
  __pyx_v_self->thisxptr->setcwd(__pyx_v_c_cwd);

  /* "saxonc.pyx":980
 *         if self.thisxptr != NULL:
 *            del self.thisxptr
 *      def set_cwd(self, cwd):             # <<<<<<<<<<<<<<
 *         """
 *         set_cwd(self, cwd)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.set_cwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_cwd_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":992
 *         self.thisxptr.setcwd(c_cwd)
 * 
 *      def set_global_context_item(self, **kwds):             # <<<<<<<<<<<<<<
 *         """Set the global context item for the transformation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_7set_global_context_item(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_6set_global_context_item[] = "Set the global context item for the transformation.\n\n        Args:\n            **kwds: Keyword argument can only be one of the following: file_name|xdm_item\n        Raises:\n            Exception: Exception is raised if keyword argument is not one of file_name or an Xdm item.\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_7set_global_context_item(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_global_context_item (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_global_context_item", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_global_context_item", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_6set_global_context_item(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_6set_global_context_item(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_py_error_message = NULL;
  PyObject *__pyx_v_py_value = 0;
  PyObject *__pyx_v_py_value_string = 0;
  char *__pyx_v_c_source;
  struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_xdm_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_global_context_item", 0);

  /* "saxonc.pyx":1001
 *         """
 * 
 *         py_error_message = "Error: set_global_context_item should only contain one of the following keyword arguments: (file_name|xdm_item)"             # <<<<<<<<<<<<<<
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(__pyx_kp_s_Error_set_global_context_item_sh);
  __pyx_v_py_error_message = __pyx_kp_s_Error_set_global_context_item_sh;

  /* "saxonc.pyx":1002
 * 
 *         py_error_message = "Error: set_global_context_item should only contain one of the following keyword arguments: (file_name|xdm_item)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1002, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":1003
 *         py_error_message = "Error: set_global_context_item should only contain one of the following keyword arguments: (file_name|xdm_item)"
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         cdef py_value = None
 *         cdef py_value_string = None
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1003, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1003, __pyx_L1_error)

    /* "saxonc.pyx":1002
 * 
 *         py_error_message = "Error: set_global_context_item should only contain one of the following keyword arguments: (file_name|xdm_item)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  }

  /* "saxonc.pyx":1004
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 *         cdef py_value = None             # <<<<<<<<<<<<<<
 *         cdef py_value_string = None
 *         cdef char * c_source
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value = Py_None;

  /* "saxonc.pyx":1005
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 *         cdef py_value_string = None             # <<<<<<<<<<<<<<
 *         cdef char * c_source
 *         cdef PyXdmItem xdm_item = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value_string = Py_None;

  /* "saxonc.pyx":1007
 *         cdef py_value_string = None
 *         cdef char * c_source
 *         cdef PyXdmItem xdm_item = None             # <<<<<<<<<<<<<<
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_xdm_item = ((struct __pyx_obj_6saxonc_PyXdmItem *)Py_None);

  /* "saxonc.pyx":1008
 *         cdef char * c_source
 *         cdef PyXdmItem xdm_item = None
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_file_name, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 1008, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "saxonc.pyx":1009
 *         cdef PyXdmItem xdm_item = None
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]             # <<<<<<<<<<<<<<
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1009, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_py_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":1010
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None             # <<<<<<<<<<<<<<
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxptr.setGlobalContextFromFile(c_source)
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1010, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1010, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __Pyx_DECREF_SET(__pyx_v_py_value_string, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":1011
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""             # <<<<<<<<<<<<<<
 *             self.thisxptr.setGlobalContextFromFile(c_source)
 *         elif "xdm_item" in kwds:
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 1011, __pyx_L1_error)
      __pyx_t_8 = __pyx_t_9;
    } else {
      __pyx_t_8 = ((char *)"");
    }
    __pyx_v_c_source = __pyx_t_8;

    /* "saxonc.pyx":1012
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxptr.setGlobalContextFromFile(c_source)             # <<<<<<<<<<<<<<
 *         elif "xdm_item" in kwds:
 *             if isinstance(kwds["xdm_item"], PyXdmItem):
 */
    __pyx_v_self->thisxptr->setGlobalContextFromFile(__pyx_v_c_source);

    /* "saxonc.pyx":1008
 *         cdef char * c_source
 *         cdef PyXdmItem xdm_item = None
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":1013
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxptr.setGlobalContextFromFile(c_source)
 *         elif "xdm_item" in kwds:             # <<<<<<<<<<<<<<
 *             if isinstance(kwds["xdm_item"], PyXdmItem):
 *                 xdm_item = kwds["xdm_item"]
 */
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_xdm_item, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_2)) {

    /* "saxonc.pyx":1014
 *             self.thisxptr.setGlobalContextFromFile(c_source)
 *         elif "xdm_item" in kwds:
 *             if isinstance(kwds["xdm_item"], PyXdmItem):             # <<<<<<<<<<<<<<
 *                 xdm_item = kwds["xdm_item"]
 *                 self.thisxptr.setGlobalContextItem(xdm_item.derivedptr)
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xdm_item); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1014, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_3, __pyx_ptype_6saxonc_PyXdmItem); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = (__pyx_t_2 != 0);
    if (likely(__pyx_t_4)) {

      /* "saxonc.pyx":1015
 *         elif "xdm_item" in kwds:
 *             if isinstance(kwds["xdm_item"], PyXdmItem):
 *                 xdm_item = kwds["xdm_item"]             # <<<<<<<<<<<<<<
 *                 self.thisxptr.setGlobalContextItem(xdm_item.derivedptr)
 *             else:
 */
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xdm_item); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6saxonc_PyXdmItem))))) __PYX_ERR(1, 1015, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_xdm_item, ((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "saxonc.pyx":1016
 *             if isinstance(kwds["xdm_item"], PyXdmItem):
 *                 xdm_item = kwds["xdm_item"]
 *                 self.thisxptr.setGlobalContextItem(xdm_item.derivedptr)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise Exception("xdm_item value must be of type PyXdmItem")
 */
      __pyx_v_self->thisxptr->setGlobalContextItem(__pyx_v_xdm_item->derivedptr);

      /* "saxonc.pyx":1014
 *             self.thisxptr.setGlobalContextFromFile(c_source)
 *         elif "xdm_item" in kwds:
 *             if isinstance(kwds["xdm_item"], PyXdmItem):             # <<<<<<<<<<<<<<
 *                 xdm_item = kwds["xdm_item"]
 *                 self.thisxptr.setGlobalContextItem(xdm_item.derivedptr)
 */
      goto __pyx_L5;
    }

    /* "saxonc.pyx":1018
 *                 self.thisxptr.setGlobalContextItem(xdm_item.derivedptr)
 *             else:
 *                 raise Exception("xdm_item value must be of type PyXdmItem")             # <<<<<<<<<<<<<<
 *         else:
 *           raise Exception(py_error_message)
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 1018, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "saxonc.pyx":1013
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxptr.setGlobalContextFromFile(c_source)
 *         elif "xdm_item" in kwds:             # <<<<<<<<<<<<<<
 *             if isinstance(kwds["xdm_item"], PyXdmItem):
 *                 xdm_item = kwds["xdm_item"]
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":1020
 *                 raise Exception("xdm_item value must be of type PyXdmItem")
 *         else:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 * 
 *      def set_initial_match_selection(self, **kwds):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1020, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1020, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "saxonc.pyx":992
 *         self.thisxptr.setcwd(c_cwd)
 * 
 *      def set_global_context_item(self, **kwds):             # <<<<<<<<<<<<<<
 *         """Set the global context item for the transformation.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.set_global_context_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_error_message);
  __Pyx_XDECREF(__pyx_v_py_value);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_xdm_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1022
 *           raise Exception(py_error_message)
 * 
 *      def set_initial_match_selection(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         set_initial_match_selection(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_9set_initial_match_selection(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_8set_initial_match_selection[] = "\n        set_initial_match_selection(self, **kwds)\n        The initial filename to which templates are to be applied (equivalent to the <code>select</code> attribute of <code>xsl:apply-templates</code>).\n\n        Args:\n            **kwds: Keyword argument can only be one of the following: file_name|xdm_value\n        Raises:\n            Exception: Exception is raised if keyword argument is not one of file_name or XdmValue.\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_9set_initial_match_selection(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_initial_match_selection (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_initial_match_selection", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_initial_match_selection", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_8set_initial_match_selection(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_8set_initial_match_selection(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_py_error_message = NULL;
  PyObject *__pyx_v_py_value = 0;
  PyObject *__pyx_v_py_value_string = 0;
  char *__pyx_v_c_source;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_xdm_value = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_initial_match_selection", 0);

  /* "saxonc.pyx":1033
 *         """
 * 
 *         py_error_message = "Error: set_initial_match_selection should only contain one of the following keyword arguments: (file_name|xdm_value)"             # <<<<<<<<<<<<<<
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(__pyx_kp_s_Error_set_initial_match_selectio);
  __pyx_v_py_error_message = __pyx_kp_s_Error_set_initial_match_selectio;

  /* "saxonc.pyx":1034
 * 
 *         py_error_message = "Error: set_initial_match_selection should only contain one of the following keyword arguments: (file_name|xdm_value)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1034, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":1035
 *         py_error_message = "Error: set_initial_match_selection should only contain one of the following keyword arguments: (file_name|xdm_value)"
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         cdef py_value = None
 *         cdef py_value_string = None
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1035, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1035, __pyx_L1_error)

    /* "saxonc.pyx":1034
 * 
 *         py_error_message = "Error: set_initial_match_selection should only contain one of the following keyword arguments: (file_name|xdm_value)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  }

  /* "saxonc.pyx":1036
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 *         cdef py_value = None             # <<<<<<<<<<<<<<
 *         cdef py_value_string = None
 *         cdef char * c_source
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value = Py_None;

  /* "saxonc.pyx":1037
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 *         cdef py_value_string = None             # <<<<<<<<<<<<<<
 *         cdef char * c_source
 *         cdef PyXdmValue xdm_value = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value_string = Py_None;

  /* "saxonc.pyx":1039
 *         cdef py_value_string = None
 *         cdef char * c_source
 *         cdef PyXdmValue xdm_value = None             # <<<<<<<<<<<<<<
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_xdm_value = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1040
 *         cdef char * c_source
 *         cdef PyXdmValue xdm_value = None
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_file_name, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 1040, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "saxonc.pyx":1041
 *         cdef PyXdmValue xdm_value = None
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]             # <<<<<<<<<<<<<<
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1041, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_py_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":1042
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None             # <<<<<<<<<<<<<<
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxptr.setInitialMatchSelectionAsFile(c_source)
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __Pyx_DECREF_SET(__pyx_v_py_value_string, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":1043
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""             # <<<<<<<<<<<<<<
 *             self.thisxptr.setInitialMatchSelectionAsFile(c_source)
 *         elif "xdm_value" in kwds:
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 1043, __pyx_L1_error)
      __pyx_t_8 = __pyx_t_9;
    } else {
      __pyx_t_8 = ((char *)"");
    }
    __pyx_v_c_source = __pyx_t_8;

    /* "saxonc.pyx":1044
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxptr.setInitialMatchSelectionAsFile(c_source)             # <<<<<<<<<<<<<<
 *         elif "xdm_value" in kwds:
 *             xdm_value = kwds["xdm_value"]
 */
    __pyx_v_self->thisxptr->setInitialMatchSelectionAsFile(__pyx_v_c_source);

    /* "saxonc.pyx":1040
 *         cdef char * c_source
 *         cdef PyXdmValue xdm_value = None
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":1045
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxptr.setInitialMatchSelectionAsFile(c_source)
 *         elif "xdm_value" in kwds:             # <<<<<<<<<<<<<<
 *             xdm_value = kwds["xdm_value"]
 *             self.thisxptr.setInitialMatchSelection(xdm_value.thisvptr)
 */
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_xdm_value, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 1045, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_2)) {

    /* "saxonc.pyx":1046
 *             self.thisxptr.setInitialMatchSelectionAsFile(c_source)
 *         elif "xdm_value" in kwds:
 *             xdm_value = kwds["xdm_value"]             # <<<<<<<<<<<<<<
 *             self.thisxptr.setInitialMatchSelection(xdm_value.thisvptr)
 *         else:
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xdm_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6saxonc_PyXdmValue))))) __PYX_ERR(1, 1046, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_xdm_value, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "saxonc.pyx":1047
 *         elif "xdm_value" in kwds:
 *             xdm_value = kwds["xdm_value"]
 *             self.thisxptr.setInitialMatchSelection(xdm_value.thisvptr)             # <<<<<<<<<<<<<<
 *         else:
 *           raise Exception(py_error_message)
 */
    __pyx_v_self->thisxptr->setInitialMatchSelection(__pyx_v_xdm_value->thisvptr);

    /* "saxonc.pyx":1045
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxptr.setInitialMatchSelectionAsFile(c_source)
 *         elif "xdm_value" in kwds:             # <<<<<<<<<<<<<<
 *             xdm_value = kwds["xdm_value"]
 *             self.thisxptr.setInitialMatchSelection(xdm_value.thisvptr)
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":1049
 *             self.thisxptr.setInitialMatchSelection(xdm_value.thisvptr)
 *         else:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 * 
 *      def set_output_file(self, output_file):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1049, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "saxonc.pyx":1022
 *           raise Exception(py_error_message)
 * 
 *      def set_initial_match_selection(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         set_initial_match_selection(self, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.set_initial_match_selection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_error_message);
  __Pyx_XDECREF(__pyx_v_py_value);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_xdm_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1051
 *           raise Exception(py_error_message)
 * 
 *      def set_output_file(self, output_file):             # <<<<<<<<<<<<<<
 *         """
 *         set_output_file(self, output_file)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_11set_output_file(PyObject *__pyx_v_self, PyObject *__pyx_v_output_file); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_10set_output_file[] = "\n        set_output_file(self, output_file)\n        Set the output file where the output of the transformation will be sent\n\n        Args:\n            output_file (str): The output file supplied as a str\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_11set_output_file(PyObject *__pyx_v_self, PyObject *__pyx_v_output_file) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_output_file (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_10set_output_file(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), ((PyObject *)__pyx_v_output_file));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_10set_output_file(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_output_file) {
  PyObject *__pyx_v_py_filename_string = NULL;
  char *__pyx_v_c_outputfile;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_output_file", 0);

  /* "saxonc.pyx":1060
 * 
 *         """
 *         py_filename_string = output_file.encode('UTF-8') if output_file is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_outputfile = py_filename_string if output_file is not None else ""
 *         self.thisxptr.setOutputFile(c_outputfile)
 */
  __pyx_t_2 = (__pyx_v_output_file != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_output_file, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_filename_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":1061
 *         """
 *         py_filename_string = output_file.encode('UTF-8') if output_file is not None else None
 *         cdef char * c_outputfile = py_filename_string if output_file is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxptr.setOutputFile(c_outputfile)
 * 
 */
  __pyx_t_2 = (__pyx_v_output_file != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_filename_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 1061, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_outputfile = __pyx_t_6;

  /* "saxonc.pyx":1062
 *         py_filename_string = output_file.encode('UTF-8') if output_file is not None else None
 *         cdef char * c_outputfile = py_filename_string if output_file is not None else ""
 *         self.thisxptr.setOutputFile(c_outputfile)             # <<<<<<<<<<<<<<
 * 
 *      def set_jit_compilation(self, bool jit):
 */
  __pyx_v_self->thisxptr->setOutputFile(__pyx_v_c_outputfile);

  /* "saxonc.pyx":1051
 *           raise Exception(py_error_message)
 * 
 *      def set_output_file(self, output_file):             # <<<<<<<<<<<<<<
 *         """
 *         set_output_file(self, output_file)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.set_output_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_filename_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1064
 *         self.thisxptr.setOutputFile(c_outputfile)
 * 
 *      def set_jit_compilation(self, bool jit):             # <<<<<<<<<<<<<<
 *         """
 *         set_jit_compilation(self, jit)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_13set_jit_compilation(PyObject *__pyx_v_self, PyObject *__pyx_arg_jit); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_12set_jit_compilation[] = "\n        set_jit_compilation(self, jit)\n        Say whether just-in-time compilation of template rules should be used.\n\n        Args:\n            jit (bool): True if just-in-time compilation is to be enabled. With this option enabled,\n                static analysis of a template rule is deferred until the first time that the\n                template is matched. This can improve performance when many template\n                rules are rarely used during the course of a particular transformation; however,\n                it means that static errors in the stylesheet will not necessarily cause the\n                compile(Source) method to throw an exception (errors in code that is\n                actually executed will still be notified but this may happen after the compile(Source)\n                method returns). This option is enabled by default in Saxon-EE, and is not available\n                in Saxon-HE or Saxon-PE.\n                Recommendation: disable this option unless you are confident that the\n                stylesheet you are compiling is error-free.\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_13set_jit_compilation(PyObject *__pyx_v_self, PyObject *__pyx_arg_jit) {
  bool __pyx_v_jit;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_jit_compilation (wrapper)", 0);
  assert(__pyx_arg_jit); {
    __pyx_v_jit = __Pyx_PyObject_IsTrue(__pyx_arg_jit); if (unlikely((__pyx_v_jit == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1064, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.set_jit_compilation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_12set_jit_compilation(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), ((bool)__pyx_v_jit));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_12set_jit_compilation(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, bool __pyx_v_jit) {
  bool __pyx_v_c_jit;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_jit_compilation", 0);

  /* "saxonc.pyx":1084
 *         """
 *         cdef bool c_jit
 *         c_jit = jit             # <<<<<<<<<<<<<<
 *         self.thisxptr.setJustInTimeCompilation(c_jit)
 *         #else:
 */
  __pyx_v_c_jit = __pyx_v_jit;

  /* "saxonc.pyx":1085
 *         cdef bool c_jit
 *         c_jit = jit
 *         self.thisxptr.setJustInTimeCompilation(c_jit)             # <<<<<<<<<<<<<<
 *         #else:
 *         #raise Warning("setJustInTimeCompilation: argument must be a boolean type. JIT not set")
 */
  __pyx_v_self->thisxptr->setJustInTimeCompilation(__pyx_v_c_jit);

  /* "saxonc.pyx":1064
 *         self.thisxptr.setOutputFile(c_outputfile)
 * 
 *      def set_jit_compilation(self, bool jit):             # <<<<<<<<<<<<<<
 *         """
 *         set_jit_compilation(self, jit)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1090
 * 
 * 
 *      def set_result_as_raw_value(self, bool is_raw):             # <<<<<<<<<<<<<<
 *         """
 *         set_result_as_raw_value(self, is_raw)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_15set_result_as_raw_value(PyObject *__pyx_v_self, PyObject *__pyx_arg_is_raw); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_14set_result_as_raw_value[] = "\n        set_result_as_raw_value(self, is_raw)\n        Set true if the return type of callTemplate, applyTemplates and transform methods is to return XdmValue, otherwise return XdmNode object with root Document node\n\n        Args:\n            is_raw (bool): True if returning raw result, i.e. XdmValue, otherwise return XdmNode\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_15set_result_as_raw_value(PyObject *__pyx_v_self, PyObject *__pyx_arg_is_raw) {
  bool __pyx_v_is_raw;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_result_as_raw_value (wrapper)", 0);
  assert(__pyx_arg_is_raw); {
    __pyx_v_is_raw = __Pyx_PyObject_IsTrue(__pyx_arg_is_raw); if (unlikely((__pyx_v_is_raw == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1090, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.set_result_as_raw_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_14set_result_as_raw_value(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), ((bool)__pyx_v_is_raw));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_14set_result_as_raw_value(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, bool __pyx_v_is_raw) {
  bool __pyx_v_c_raw;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_result_as_raw_value", 0);

  /* "saxonc.pyx":1100
 *         """
 *         cdef bool c_raw
 *         c_raw = is_raw             # <<<<<<<<<<<<<<
 *         self.thisxptr.setResultAsRawValue(c_raw)
 *         #else:
 */
  __pyx_v_c_raw = __pyx_v_is_raw;

  /* "saxonc.pyx":1101
 *         cdef bool c_raw
 *         c_raw = is_raw
 *         self.thisxptr.setResultAsRawValue(c_raw)             # <<<<<<<<<<<<<<
 *         #else:
 *         #raise Warning("setJustInTimeCompilation: argument must be a boolean type. JIT not set")
 */
  __pyx_v_self->thisxptr->setResultAsRawValue(__pyx_v_c_raw);

  /* "saxonc.pyx":1090
 * 
 * 
 *      def set_result_as_raw_value(self, bool is_raw):             # <<<<<<<<<<<<<<
 *         """
 *         set_result_as_raw_value(self, is_raw)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1105
 *         #raise Warning("setJustInTimeCompilation: argument must be a boolean type. JIT not set")
 * 
 *      def set_parameter(self, name, PyXdmValue value):             # <<<<<<<<<<<<<<
 *         """
 *         set_parameter(self, PyXdmValue value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_17set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_16set_parameter[] = "\n        set_parameter(self, PyXdmValue value)\n        Set the value of a stylesheet parameter\n\n        Args:\n            name (str): the name of the stylesheet parameter, as a string. For namespaced parameter use the JAXP solution i.e. \"{uri}name\n            value (PyXdmValue): the value of the stylesheet parameter, or null to clear a previously set value\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_17set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, 1); __PYX_ERR(1, 1105, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_parameter") < 0)) __PYX_ERR(1, 1105, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = ((struct __pyx_obj_6saxonc_PyXdmValue *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1105, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_6saxonc_PyXdmValue, 1, "value", 0))) __PYX_ERR(1, 1105, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_16set_parameter(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_16set_parameter(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value) {
  char const *__pyx_v_c_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_parameter", 0);

  /* "saxonc.pyx":1115
 * 
 *         """
 *         cdef const char * c_str = make_c_str(name)             # <<<<<<<<<<<<<<
 *         if c_str is not NULL:
 *             '''value.thisvptr.incrementRefCount()
 */
  if (!(likely(PyString_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_name)->tp_name), 0))) __PYX_ERR(1, 1115, __pyx_L1_error)
  __pyx_v_c_str = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_name));

  /* "saxonc.pyx":1116
 *         """
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:             # <<<<<<<<<<<<<<
 *             '''value.thisvptr.incrementRefCount()
 *             print("set_parameter called")'''
 */
  __pyx_t_1 = ((__pyx_v_c_str != NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":1119
 *             '''value.thisvptr.incrementRefCount()
 *             print("set_parameter called")'''
 *             self.thisxptr.setParameter(c_str, value.thisvptr, False)             # <<<<<<<<<<<<<<
 * 
 *      def get_parameter(self, name):
 */
    __pyx_v_self->thisxptr->setParameter(__pyx_v_c_str, __pyx_v_value->thisvptr, 0);

    /* "saxonc.pyx":1116
 *         """
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:             # <<<<<<<<<<<<<<
 *             '''value.thisvptr.incrementRefCount()
 *             print("set_parameter called")'''
 */
  }

  /* "saxonc.pyx":1105
 *         #raise Warning("setJustInTimeCompilation: argument must be a boolean type. JIT not set")
 * 
 *      def set_parameter(self, name, PyXdmValue value):             # <<<<<<<<<<<<<<
 *         """
 *         set_parameter(self, PyXdmValue value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1121
 *             self.thisxptr.setParameter(c_str, value.thisvptr, False)
 * 
 *      def get_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         get_parameter(self, name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_19get_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_18get_parameter[] = "\n        get_parameter(self, name)\n        Get a parameter value by a given name\n\n        Args:\n            name (str): The name of the stylesheet parameter\n\n        Returns:\n            PyXdmValue: The Xdm value of the parameter\n\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_19get_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_parameter (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_18get_parameter(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_18get_parameter(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_py_name_string = NULL;
  char *__pyx_v_c_name;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_parameter", 0);

  /* "saxonc.pyx":1134
 * 
 *         """
 *         py_name_string = name.encode('UTF-8') if name is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         cdef PyXdmValue val = PyXdmValue()
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_name_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":1135
 *         """
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_name_string if name is not None else ""             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue val = PyXdmValue()
 *         val.thisvptr = self.thisxptr.getParameter(c_name)
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_name_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 1135, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_name = __pyx_t_6;

  /* "saxonc.pyx":1136
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         cdef PyXdmValue val = PyXdmValue()             # <<<<<<<<<<<<<<
 *         val.thisvptr = self.thisxptr.getParameter(c_name)
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":1137
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         cdef PyXdmValue val = PyXdmValue()
 *         val.thisvptr = self.thisxptr.getParameter(c_name)             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_v_val->thisvptr = __pyx_v_self->thisxptr->getParameter(__pyx_v_c_name);

  /* "saxonc.pyx":1138
 *         cdef PyXdmValue val = PyXdmValue()
 *         val.thisvptr = self.thisxptr.getParameter(c_name)
 *         return val             # <<<<<<<<<<<<<<
 * 
 *      def remove_parameter(self, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":1121
 *             self.thisxptr.setParameter(c_str, value.thisvptr, False)
 * 
 *      def get_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         get_parameter(self, name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.get_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_name_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1140
 *         return val
 * 
 *      def remove_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         remove_parameter(self, name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_21remove_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_20remove_parameter[] = "\n        remove_parameter(self, name)\n        Remove the parameter given by name from the PyXslt30Processor. The parameter will not have any affect on the stylesheet if it has not yet been executed\n\n        Args:\n            name (str): The name of the stylesheet parameter\n\n        Returns:\n            bool: True if the removal of the parameter has been successful, False otherwise.\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_21remove_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_parameter (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_20remove_parameter(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_20remove_parameter(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_py_name_string = NULL;
  char *__pyx_v_c_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_parameter", 0);

  /* "saxonc.pyx":1153
 *         """
 * 
 *         py_name_string = name.encode('UTF-8') if name is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         return self.thisxptr.removeParameter(c_name)
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_name_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":1154
 * 
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_name_string if name is not None else ""             # <<<<<<<<<<<<<<
 *         return self.thisxptr.removeParameter(c_name)
 * 
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_name_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 1154, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_name = __pyx_t_6;

  /* "saxonc.pyx":1155
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         return self.thisxptr.removeParameter(c_name)             # <<<<<<<<<<<<<<
 * 
 *      def set_property(self, name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisxptr->removeParameter(__pyx_v_c_name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":1140
 *         return val
 * 
 *      def remove_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         remove_parameter(self, name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.remove_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_name_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1157
 *         return self.thisxptr.removeParameter(c_name)
 * 
 *      def set_property(self, name, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_property(self, name, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_23set_property(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_22set_property[] = "\n        set_property(self, name, value)\n        Set a property specific to the processor in use.\n\n        Args:\n            name (str): The name of the property\n            value (str): The value of the property\n\n        Example:\n            XsltProcessor: set serialization properties (names start with '!' i.e. name \"!method\" -> \"xml\")\r\n            'o':outfile name,\r\n            'it': initial template,\r\n            'im': initial mode,\r\n            's': source as file name\r\n            'm': switch on message listener for xsl:message instructions,\r\n            'item'| 'node' : source supplied as an XdmNode object,\r\n            'extc':Set the native library to use with Saxon for extension functions written in C/C++/PHP\r\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_23set_property(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_property (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_property", 1, 2, 2, 1); __PYX_ERR(1, 1157, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_property") < 0)) __PYX_ERR(1, 1157, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_property", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1157, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.set_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_22set_property(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_22set_property(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_py_name_string = NULL;
  char *__pyx_v_c_name;
  PyObject *__pyx_v_py_value_string = NULL;
  char *__pyx_v_c_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_property", 0);

  /* "saxonc.pyx":1178
 *         """
 * 
 *         py_name_string = name.encode('UTF-8') if name is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_name_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":1179
 * 
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_name_string if name is not None else ""             # <<<<<<<<<<<<<<
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         cdef char * c_value = py_value_string if value is not None else ""
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_name_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 1179, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_name = __pyx_t_6;

  /* "saxonc.pyx":1180
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         py_value_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_value = py_value_string if value is not None else ""
 *         self.thisxptr.setProperty(c_name, c_value)
 */
  __pyx_t_2 = (__pyx_v_value != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":1181
 *         cdef char * c_name = py_name_string if name is not None else ""
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         cdef char * c_value = py_value_string if value is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxptr.setProperty(c_name, c_value)
 * 
 */
  __pyx_t_2 = (__pyx_v_value != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 1181, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_value = __pyx_t_6;

  /* "saxonc.pyx":1182
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         cdef char * c_value = py_value_string if value is not None else ""
 *         self.thisxptr.setProperty(c_name, c_value)             # <<<<<<<<<<<<<<
 * 
 *      def clear_parameters(self):
 */
  __pyx_v_self->thisxptr->setProperty(__pyx_v_c_name, __pyx_v_c_value);

  /* "saxonc.pyx":1157
 *         return self.thisxptr.removeParameter(c_name)
 * 
 *      def set_property(self, name, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_property(self, name, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.set_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_name_string);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1184
 *         self.thisxptr.setProperty(c_name, c_value)
 * 
 *      def clear_parameters(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_25clear_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_24clear_parameters[] = "\n        clear_parameter(self)\n        Clear all parameters set on the processor for execution of the stylesheet\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_25clear_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_parameters (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_24clear_parameters(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_24clear_parameters(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_parameters", 0);

  /* "saxonc.pyx":1190
 *         """
 * 
 *         self.thisxptr.clearParameters()             # <<<<<<<<<<<<<<
 *      def clear_properties(self):
 *         """
 */
  __pyx_v_self->thisxptr->clearParameters(NULL);

  /* "saxonc.pyx":1184
 *         self.thisxptr.setProperty(c_name, c_value)
 * 
 *      def clear_parameters(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1191
 * 
 *         self.thisxptr.clearParameters()
 *      def clear_properties(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_properties(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_27clear_properties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_26clear_properties[] = "\n        clear_properties(self)\n        Clear all properties set on the processor\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_27clear_properties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_properties (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_26clear_properties(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_26clear_properties(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_properties", 0);

  /* "saxonc.pyx":1197
 *         """
 * 
 *         self.thisxptr.clearProperties()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisxptr->clearProperties();

  /* "saxonc.pyx":1191
 * 
 *         self.thisxptr.clearParameters()
 *      def clear_properties(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_properties(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1200
 * 
 * 
 *      def set_initial_template_parameters(self, bool tunnel, dict kwds):             # <<<<<<<<<<<<<<
 *         """
 *         set_initial_template_parameters(self, bool tunnel, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_29set_initial_template_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_28set_initial_template_parameters[] = "\n        set_initial_template_parameters(self, bool tunnel, **kwds)\n        Set parameters to be passed to the initial template. These are used\n        whether the transformation is invoked by applying templates to an initial source item,\n        or by invoking a named template. The parameters in question are the xsl:param elements\n        appearing as children of the xsl:template element.\n\n        TODO: To fix issue where we pass XdmValue object created directly in the function argument. This causes seg error\n        e.g. set_initial_template_parameter(False, {a:saxonproc.make_integer_value(12)})\n        Do the following instead:\n        paramArr = {a:saxonproc.make_integer_value(12)}\n        set_initial_template_parameter(False, paramArr)\n\n        Args:\n        \ttunnel (bool): True if these values are to be used for setting tunnel parameters;\n        \t**kwds: the parameters to be used for the initial template supplied as an key-value pair.\n        \tFalse if they are to be used for non-tunnel parameters. The default is false.\n\n        Example:\n\n        \t1)paramArr = {'a':saxonproc.make_integer_value(12), 'b':saxonproc.make_integer_value(5)} \n                  xsltproc.set_initial_template_parameters(False, paramArr)\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_29set_initial_template_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_tunnel;
  PyObject *__pyx_v_kwds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_initial_template_parameters (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tunnel,&__pyx_n_s_kwds,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tunnel)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kwds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_initial_template_parameters", 1, 2, 2, 1); __PYX_ERR(1, 1200, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_initial_template_parameters") < 0)) __PYX_ERR(1, 1200, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_tunnel = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_tunnel == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1200, __pyx_L3_error)
    __pyx_v_kwds = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_initial_template_parameters", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1200, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.set_initial_template_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kwds), (&PyDict_Type), 1, "kwds", 1))) __PYX_ERR(1, 1200, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_28set_initial_template_parameters(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_tunnel, __pyx_v_kwds);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_28set_initial_template_parameters(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, bool __pyx_v_tunnel, PyObject *__pyx_v_kwds) {
  std::map<std::string,XdmValue *>  __pyx_v_parameters;
  bool __pyx_v_c_tunnel;
  std::string __pyx_v_key_str;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_value_ = 0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  std::string __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_initial_template_parameters", 0);

  /* "saxonc.pyx":1227
 *         cdef bool c_tunnel
 *         cdef string key_str
 *         c_tunnel = tunnel             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue value_
 *         global parametersDict
 */
  __pyx_v_c_tunnel = __pyx_v_tunnel;

  /* "saxonc.pyx":1230
 *         cdef PyXdmAtomicValue value_
 *         global parametersDict
 *         if kwds is not None:             # <<<<<<<<<<<<<<
 *                 parametersDict = kwds
 *         for (key, value) in kwds.items():
 */
  __pyx_t_1 = (__pyx_v_kwds != ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":1231
 *         global parametersDict
 *         if kwds is not None:
 *                 parametersDict = kwds             # <<<<<<<<<<<<<<
 *         for (key, value) in kwds.items():
 *                 if isinstance(value, PyXdmAtomicValue):
 */
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_parametersDict, __pyx_v_kwds) < 0) __PYX_ERR(1, 1231, __pyx_L1_error)

    /* "saxonc.pyx":1230
 *         cdef PyXdmAtomicValue value_
 *         global parametersDict
 *         if kwds is not None:             # <<<<<<<<<<<<<<
 *                 parametersDict = kwds
 *         for (key, value) in kwds.items():
 */
  }

  /* "saxonc.pyx":1232
 *         if kwds is not None:
 *                 parametersDict = kwds
 *         for (key, value) in kwds.items():             # <<<<<<<<<<<<<<
 *                 if isinstance(value, PyXdmAtomicValue):
 *                         value_ = value
 */
  if (unlikely(__pyx_v_kwds == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 1232, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1232, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 1232, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 1232, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1232, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1232, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(1, 1232, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1232, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "saxonc.pyx":1233
 *                 parametersDict = kwds
 *         for (key, value) in kwds.items():
 *                 if isinstance(value, PyXdmAtomicValue):             # <<<<<<<<<<<<<<
 *                         value_ = value
 *                         key_str = key.encode('UTF-8')
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmAtomicValue); 
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (likely(__pyx_t_1)) {

      /* "saxonc.pyx":1234
 *         for (key, value) in kwds.items():
 *                 if isinstance(value, PyXdmAtomicValue):
 *                         value_ = value             # <<<<<<<<<<<<<<
 *                         key_str = key.encode('UTF-8')
 *                         value_.derivedptr.incrementRefCount()
 */
      if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmAtomicValue))))) __PYX_ERR(1, 1234, __pyx_L1_error)
      __pyx_t_3 = __pyx_v_value;
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "saxonc.pyx":1235
 *                 if isinstance(value, PyXdmAtomicValue):
 *                         value_ = value
 *                         key_str = key.encode('UTF-8')             # <<<<<<<<<<<<<<
 *                         value_.derivedptr.incrementRefCount()
 *                         parameters[key_str] = <saxoncClasses.XdmValue *> value_.derivedaptr
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1235, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_key_str = __pyx_t_11;

      /* "saxonc.pyx":1236
 *                         value_ = value
 *                         key_str = key.encode('UTF-8')
 *                         value_.derivedptr.incrementRefCount()             # <<<<<<<<<<<<<<
 *                         parameters[key_str] = <saxoncClasses.XdmValue *> value_.derivedaptr
 *                 else:
 */
      __pyx_v_value_->__pyx_base.derivedptr->incrementRefCount();

      /* "saxonc.pyx":1237
 *                         key_str = key.encode('UTF-8')
 *                         value_.derivedptr.incrementRefCount()
 *                         parameters[key_str] = <saxoncClasses.XdmValue *> value_.derivedaptr             # <<<<<<<<<<<<<<
 *                 else:
 *                         raise Exception("Initial template parameters can only be of type PyXdmValue")
 */
      (__pyx_v_parameters[__pyx_v_key_str]) = ((XdmValue *)__pyx_v_value_->derivedaptr);

      /* "saxonc.pyx":1233
 *                 parametersDict = kwds
 *         for (key, value) in kwds.items():
 *                 if isinstance(value, PyXdmAtomicValue):             # <<<<<<<<<<<<<<
 *                         value_ = value
 *                         key_str = key.encode('UTF-8')
 */
      goto __pyx_L8;
    }

    /* "saxonc.pyx":1239
 *                         parameters[key_str] = <saxoncClasses.XdmValue *> value_.derivedaptr
 *                 else:
 *                         raise Exception("Initial template parameters can only be of type PyXdmValue")             # <<<<<<<<<<<<<<
 *         if len(kwds) > 0:
 *             self.thisxptr.setInitialTemplateParameters(parameters, c_tunnel);
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 1239, __pyx_L1_error)
    }
    __pyx_L8:;

    /* "saxonc.pyx":1232
 *         if kwds is not None:
 *                 parametersDict = kwds
 *         for (key, value) in kwds.items():             # <<<<<<<<<<<<<<
 *                 if isinstance(value, PyXdmAtomicValue):
 *                         value_ = value
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "saxonc.pyx":1240
 *                 else:
 *                         raise Exception("Initial template parameters can only be of type PyXdmValue")
 *         if len(kwds) > 0:             # <<<<<<<<<<<<<<
 *             self.thisxptr.setInitialTemplateParameters(parameters, c_tunnel);
 * 
 */
  if (unlikely(__pyx_v_kwds == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1240, __pyx_L1_error)
  }
  __pyx_t_5 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1240, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_5 > 0) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":1241
 *                         raise Exception("Initial template parameters can only be of type PyXdmValue")
 *         if len(kwds) > 0:
 *             self.thisxptr.setInitialTemplateParameters(parameters, c_tunnel);             # <<<<<<<<<<<<<<
 * 
 *      def get_xsl_messages(self):
 */
    __pyx_v_self->thisxptr->setInitialTemplateParameters(__pyx_v_parameters, __pyx_v_c_tunnel);

    /* "saxonc.pyx":1240
 *                 else:
 *                         raise Exception("Initial template parameters can only be of type PyXdmValue")
 *         if len(kwds) > 0:             # <<<<<<<<<<<<<<
 *             self.thisxptr.setInitialTemplateParameters(parameters, c_tunnel);
 * 
 */
  }

  /* "saxonc.pyx":1200
 * 
 * 
 *      def set_initial_template_parameters(self, bool tunnel, dict kwds):             # <<<<<<<<<<<<<<
 *         """
 *         set_initial_template_parameters(self, bool tunnel, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.set_initial_template_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value_);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1243
 *             self.thisxptr.setInitialTemplateParameters(parameters, c_tunnel);
 * 
 *      def get_xsl_messages(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the messages written using the <code>xsl:message</code> instruction
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_31get_xsl_messages(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_30get_xsl_messages[] = "\n        Get the messages written using the <code>xsl:message</code> instruction\n        get_xsl_message(self)\n\n        Returns:\n            PyXdmValue: Messages returned as an XdmValue.\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_31get_xsl_messages(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_xsl_messages (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_30get_xsl_messages(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_30get_xsl_messages(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_xsl_messages", 0);

  /* "saxonc.pyx":1253
 *         """
 * 
 *         cdef PyXdmValue val = PyXdmValue()             # <<<<<<<<<<<<<<
 *         val.thisvptr = self.thisxptr.getXslMessages()
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":1254
 * 
 *         cdef PyXdmValue val = PyXdmValue()
 *         val.thisvptr = self.thisxptr.getXslMessages()             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_v_val->thisvptr = __pyx_v_self->thisxptr->getXslMessages();

  /* "saxonc.pyx":1255
 *         cdef PyXdmValue val = PyXdmValue()
 *         val.thisvptr = self.thisxptr.getXslMessages()
 *         return val             # <<<<<<<<<<<<<<
 * 
 *      def transform_to_string(self, **kwds):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":1243
 *             self.thisxptr.setInitialTemplateParameters(parameters, c_tunnel);
 * 
 *      def get_xsl_messages(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the messages written using the <code>xsl:message</code> instruction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.get_xsl_messages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1257
 *         return val
 * 
 *      def transform_to_string(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         transform_to_string(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_33transform_to_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_32transform_to_string[] = "\n        transform_to_string(self, **kwds)\n        Execute transformation to string.\n\n        Args:\n            **kwds: Possible arguments: source_file (str) or xdm_node (PyXdmNode). Other allowed argument: stylesheet_file (str)\n\n\n        Example:\n\n            1) result = xsltproc.transform_to_string(source_file=\"cat.xml\", stylesheet_file=\"test1.xsl\")\n\n            2) xsltproc.set_source(\"cat.xml\")\r\n               result = xsltproc.transform_to_string(stylesheet_file=\"test1.xsl\")\n\n\n            3) node = saxon_proc.parse_xml(xml_text=\"<in/>\")\r\n               result = xsltproc.transform_to_string(stylesheet_file=\"test1.xsl\", xdm_node= node)\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_33transform_to_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_to_string (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("transform_to_string", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "transform_to_string", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_32transform_to_string(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_32transform_to_string(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  char *__pyx_v_c_sourcefile;
  char *__pyx_v_c_stylesheetfile;
  PyObject *__pyx_v_py_source_string = NULL;
  PyObject *__pyx_v_py_stylesheet_string = NULL;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_node_ = 0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  char *__pyx_t_11;
  char *__pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform_to_string", 0);

  /* "saxonc.pyx":1280
 *         cdef char * c_sourcefile
 *         cdef char * c_stylesheetfile
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         cdef PyXdmNode node_ = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":1281
 *         cdef char * c_stylesheetfile
 *         py_source_string = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode node_ = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":1282
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         cdef PyXdmNode node_ = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_node_ = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":1283
 *         py_stylesheet_string = None
 *         cdef PyXdmNode node_ = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1283, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1283, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1283, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1283, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1283, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1283, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1283, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1283, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1283, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":1284
 *         cdef PyXdmNode node_ = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":1285
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               c_sourcefile = py_source_string if value is not None else ""
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1285, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1286
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "stylesheet_file":
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1286, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1286, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __pyx_t_6;
          __pyx_t_6 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_1 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_py_source_string, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1287
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               c_sourcefile = py_source_string if value is not None else ""             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_v_py_source_string); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(1, 1287, __pyx_L1_error)
          __pyx_t_11 = __pyx_t_12;
        } else {
          __pyx_t_11 = ((char *)"");
        }
        __pyx_v_c_sourcefile = __pyx_t_11;

        /* "saxonc.pyx":1285
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               c_sourcefile = py_source_string if value is not None else ""
 */
      }

      /* "saxonc.pyx":1288
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1288, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1289
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "stylesheet_file":
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1289, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1289, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __pyx_t_6;
          __pyx_t_6 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_1 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1290
 *             if key == "stylesheet_file":
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""             # <<<<<<<<<<<<<<
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(1, 1290, __pyx_L1_error)
          __pyx_t_11 = __pyx_t_12;
        } else {
          __pyx_t_11 = ((char *)"");
        }
        __pyx_v_c_stylesheetfile = __pyx_t_11;

        /* "saxonc.pyx":1288
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 */
      }

      /* "saxonc.pyx":1284
 *         cdef PyXdmNode node_ = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":1291
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmNode):
 *               node_ = value
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_node, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1291, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":1292
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *               node_ = value
 *           elif len(kwds) > 0:
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmNode); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":1293
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):
 *               node_ = value             # <<<<<<<<<<<<<<
 *           elif len(kwds) > 0:
 *             raise Warning("Warning: transform_to_string should only contain the following keyword arguments: (source_file|xdm_node, stylesheet_file)")
 */
        if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmNode))))) __PYX_ERR(1, 1293, __pyx_L1_error)
        __pyx_t_1 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_node_, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1292
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *               node_ = value
 *           elif len(kwds) > 0:
 */
      }

      /* "saxonc.pyx":1291
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmNode):
 *               node_ = value
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":1294
 *             if isinstance(value, PyXdmNode):
 *               node_ = value
 *           elif len(kwds) > 0:             # <<<<<<<<<<<<<<
 *             raise Warning("Warning: transform_to_string should only contain the following keyword arguments: (source_file|xdm_node, stylesheet_file)")
 * 
 */
    __pyx_t_13 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1294, __pyx_L1_error)
    __pyx_t_9 = ((__pyx_t_13 > 0) != 0);
    if (unlikely(__pyx_t_9)) {

      /* "saxonc.pyx":1295
 *               node_ = value
 *           elif len(kwds) > 0:
 *             raise Warning("Warning: transform_to_string should only contain the following keyword arguments: (source_file|xdm_node, stylesheet_file)")             # <<<<<<<<<<<<<<
 * 
 *         cdef const char* c_string
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_Warning, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 1295, __pyx_L1_error)

      /* "saxonc.pyx":1294
 *             if isinstance(value, PyXdmNode):
 *               node_ = value
 *           elif len(kwds) > 0:             # <<<<<<<<<<<<<<
 *             raise Warning("Warning: transform_to_string should only contain the following keyword arguments: (source_file|xdm_node, stylesheet_file)")
 * 
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":1283
 *         py_stylesheet_string = None
 *         cdef PyXdmNode node_ = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":1298
 * 
 *         cdef const char* c_string
 *         if node_ is not None:             # <<<<<<<<<<<<<<
 *           if py_stylesheet_string is not None:
 *             self.thisxptr.compileFromFile(c_stylesheetfile)
 */
  __pyx_t_9 = (((PyObject *)__pyx_v_node_) != Py_None);
  __pyx_t_10 = (__pyx_t_9 != 0);
  if (__pyx_t_10) {

    /* "saxonc.pyx":1299
 *         cdef const char* c_string
 *         if node_ is not None:
 *           if py_stylesheet_string is not None:             # <<<<<<<<<<<<<<
 *             self.thisxptr.compileFromFile(c_stylesheetfile)
 *           c_string = self.thisxptr.transformToString(node_.derivednptr)
 */
    __pyx_t_10 = (__pyx_v_py_stylesheet_string != Py_None);
    __pyx_t_9 = (__pyx_t_10 != 0);
    if (__pyx_t_9) {

      /* "saxonc.pyx":1300
 *         if node_ is not None:
 *           if py_stylesheet_string is not None:
 *             self.thisxptr.compileFromFile(c_stylesheetfile)             # <<<<<<<<<<<<<<
 *           c_string = self.thisxptr.transformToString(node_.derivednptr)
 *         else:
 */
      __pyx_v_self->thisxptr->compileFromFile(__pyx_v_c_stylesheetfile);

      /* "saxonc.pyx":1299
 *         cdef const char* c_string
 *         if node_ is not None:
 *           if py_stylesheet_string is not None:             # <<<<<<<<<<<<<<
 *             self.thisxptr.compileFromFile(c_stylesheetfile)
 *           c_string = self.thisxptr.transformToString(node_.derivednptr)
 */
    }

    /* "saxonc.pyx":1301
 *           if py_stylesheet_string is not None:
 *             self.thisxptr.compileFromFile(c_stylesheetfile)
 *           c_string = self.thisxptr.transformToString(node_.derivednptr)             # <<<<<<<<<<<<<<
 *         else:
 *           c_string = self.thisxptr.transformFileToString(c_sourcefile if py_source_string is not None else NULL, c_stylesheetfile if py_stylesheet_string is not None else NULL)
 */
    __pyx_v_c_string = __pyx_v_self->thisxptr->transformToString(__pyx_v_node_->derivednptr);

    /* "saxonc.pyx":1298
 * 
 *         cdef const char* c_string
 *         if node_ is not None:             # <<<<<<<<<<<<<<
 *           if py_stylesheet_string is not None:
 *             self.thisxptr.compileFromFile(c_stylesheetfile)
 */
    goto __pyx_L11;
  }

  /* "saxonc.pyx":1303
 *           c_string = self.thisxptr.transformToString(node_.derivednptr)
 *         else:
 *           c_string = self.thisxptr.transformFileToString(c_sourcefile if py_source_string is not None else NULL, c_stylesheetfile if py_stylesheet_string is not None else NULL)             # <<<<<<<<<<<<<<
 * 
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 */
  /*else*/ {
    __pyx_t_9 = (__pyx_v_py_source_string != Py_None);
    if ((__pyx_t_9 != 0)) {
      __pyx_t_11 = __pyx_v_c_sourcefile;
    } else {
      __pyx_t_11 = NULL;
    }
    __pyx_t_9 = (__pyx_v_py_stylesheet_string != Py_None);
    if ((__pyx_t_9 != 0)) {
      __pyx_t_12 = __pyx_v_c_stylesheetfile;
    } else {
      __pyx_t_12 = NULL;
    }
    __pyx_v_c_string = __pyx_v_self->thisxptr->transformFileToString(__pyx_t_11, __pyx_t_12);
  }
  __pyx_L11:;

  /* "saxonc.pyx":1305
 *           c_string = self.thisxptr.transformFileToString(c_sourcefile if py_source_string is not None else NULL, c_stylesheetfile if py_stylesheet_string is not None else NULL)
 * 
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":1306
 * 
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 *      def transform_to_file(self, **kwds):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":1257
 *         return val
 * 
 *      def transform_to_string(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         transform_to_string(self, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.transform_to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_node_);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1308
 *         return ustring
 * 
 *      def transform_to_file(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         transform_to_file(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_35transform_to_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_34transform_to_file[] = "\n        transform_to_file(self, **kwds)\n        Execute transformation to a file. It is possible to specify the as an argument or using the set_output_file method.\n        Args:\n            **kwds: Possible optional arguments: source_file (str) or xdm_node (PyXdmNode). Other allowed argument: stylesheet_file (str), output_file (str)\n\n\n        Example:\n\n            1) xsltproc.transform_to_file(source_file=\"cat.xml\", stylesheet_file=\"test1.xsl\", output_file=\"result.xml\")\n\n            2) xsltproc.set_source(\"cat.xml\")\r\n               xsltproc.setoutput_file(\"result.xml\")\r\n               xsltproc.transform_to_file(stylesheet_file=\"test1.xsl\")\n\n\n            3) node = saxon_proc.parse_xml(xml_text=\"<in/>\")\r\n               xsltproc.transform_to_file(output_file=\"result.xml\", stylesheet_file=\"test1.xsl\", xdm_node= node)\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_35transform_to_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_to_file (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("transform_to_file", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "transform_to_file", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_34transform_to_file(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_34transform_to_file(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  char *__pyx_v_c_sourcefile;
  char *__pyx_v_c_outputfile;
  char *__pyx_v_c_stylesheetfile;
  PyObject *__pyx_v_py_source_string = NULL;
  PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_py_output_string = NULL;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_node_ = 0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform_to_file", 0);

  /* "saxonc.pyx":1331
 *         cdef char * c_outputfile
 *         cdef char * c_stylesheetfile
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         py_output_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":1332
 *         cdef char * c_stylesheetfile
 *         py_source_string = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         py_output_string = None
 *         cdef PyXdmNode node_ = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":1333
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         py_output_string = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode node_ = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_output_string = Py_None;

  /* "saxonc.pyx":1334
 *         py_stylesheet_string = None
 *         py_output_string = None
 *         cdef PyXdmNode node_ = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *                 if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_node_ = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":1335
 *         py_output_string = None
 *         cdef PyXdmNode node_ = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *                 if isinstance(value, str):
 *                         if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1335, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1335, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1335, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1335, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1335, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1335, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1335, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":1336
 *         cdef PyXdmNode node_ = None
 *         for key, value in kwds.items():
 *                 if isinstance(value, str):             # <<<<<<<<<<<<<<
 *                         if key == "source_file":
 *                                 py_source_string = value.encode('UTF-8') if value is not None else None
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":1337
 *         for key, value in kwds.items():
 *                 if isinstance(value, str):
 *                         if key == "source_file":             # <<<<<<<<<<<<<<
 *                                 py_source_string = value.encode('UTF-8') if value is not None else None
 *                                 c_sourcefile = py_source_string if value is not None else ""
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1337, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1338
 *                 if isinstance(value, str):
 *                         if key == "source_file":
 *                                 py_source_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *                                 c_sourcefile = py_source_string if value is not None else ""
 *                         if key == "output_file":
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1338, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1338, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __pyx_t_6;
          __pyx_t_6 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_1 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_py_source_string, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1339
 *                         if key == "source_file":
 *                                 py_source_string = value.encode('UTF-8') if value is not None else None
 *                                 c_sourcefile = py_source_string if value is not None else ""             # <<<<<<<<<<<<<<
 *                         if key == "output_file":
 *                                 py_output_string = value.encode('UTF-8') if value is not None else None
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_v_py_source_string); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(1, 1339, __pyx_L1_error)
          __pyx_t_11 = __pyx_t_12;
        } else {
          __pyx_t_11 = ((char *)"");
        }
        __pyx_v_c_sourcefile = __pyx_t_11;

        /* "saxonc.pyx":1337
 *         for key, value in kwds.items():
 *                 if isinstance(value, str):
 *                         if key == "source_file":             # <<<<<<<<<<<<<<
 *                                 py_source_string = value.encode('UTF-8') if value is not None else None
 *                                 c_sourcefile = py_source_string if value is not None else ""
 */
      }

      /* "saxonc.pyx":1340
 *                                 py_source_string = value.encode('UTF-8') if value is not None else None
 *                                 c_sourcefile = py_source_string if value is not None else ""
 *                         if key == "output_file":             # <<<<<<<<<<<<<<
 *                                 py_output_string = value.encode('UTF-8') if value is not None else None
 *                                 c_outputfile = py_output_string if value is not None else ""
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_output_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1340, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1341
 *                                 c_sourcefile = py_source_string if value is not None else ""
 *                         if key == "output_file":
 *                                 py_output_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *                                 c_outputfile = py_output_string if value is not None else ""
 *                         if key == "stylesheet_file":
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1341, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1341, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __pyx_t_6;
          __pyx_t_6 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_1 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_py_output_string, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1342
 *                         if key == "output_file":
 *                                 py_output_string = value.encode('UTF-8') if value is not None else None
 *                                 c_outputfile = py_output_string if value is not None else ""             # <<<<<<<<<<<<<<
 *                         if key == "stylesheet_file":
 *                                 py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_v_py_output_string); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(1, 1342, __pyx_L1_error)
          __pyx_t_11 = __pyx_t_12;
        } else {
          __pyx_t_11 = ((char *)"");
        }
        __pyx_v_c_outputfile = __pyx_t_11;

        /* "saxonc.pyx":1340
 *                                 py_source_string = value.encode('UTF-8') if value is not None else None
 *                                 c_sourcefile = py_source_string if value is not None else ""
 *                         if key == "output_file":             # <<<<<<<<<<<<<<
 *                                 py_output_string = value.encode('UTF-8') if value is not None else None
 *                                 c_outputfile = py_output_string if value is not None else ""
 */
      }

      /* "saxonc.pyx":1343
 *                                 py_output_string = value.encode('UTF-8') if value is not None else None
 *                                 c_outputfile = py_output_string if value is not None else ""
 *                         if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *                                 py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *                                 c_stylesheetfile = py_stylesheet_string if value is not None else ""
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1343, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1344
 *                                 c_outputfile = py_output_string if value is not None else ""
 *                         if key == "stylesheet_file":
 *                                 py_stylesheet_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *                                 c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *                         elif key == "xdm_node":
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1344, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1344, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __pyx_t_6;
          __pyx_t_6 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_1 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1345
 *                         if key == "stylesheet_file":
 *                                 py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *                                 c_stylesheetfile = py_stylesheet_string if value is not None else ""             # <<<<<<<<<<<<<<
 *                         elif key == "xdm_node":
 *                                 if isinstance(value, PyXdmNode):
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(1, 1345, __pyx_L1_error)
          __pyx_t_11 = __pyx_t_12;
        } else {
          __pyx_t_11 = ((char *)"");
        }
        __pyx_v_c_stylesheetfile = __pyx_t_11;

        /* "saxonc.pyx":1343
 *                                 py_output_string = value.encode('UTF-8') if value is not None else None
 *                                 c_outputfile = py_output_string if value is not None else ""
 *                         if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *                                 py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *                                 c_stylesheetfile = py_stylesheet_string if value is not None else ""
 */
        goto __pyx_L10;
      }

      /* "saxonc.pyx":1346
 *                                 py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *                                 c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *                         elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *                                 if isinstance(value, PyXdmNode):
 *                                         node_ = value
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_node, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1346, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1347
 *                                 c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *                         elif key == "xdm_node":
 *                                 if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *                                         node_ = value
 * 
 */
        __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmNode); 
        __pyx_t_9 = (__pyx_t_10 != 0);
        if (__pyx_t_9) {

          /* "saxonc.pyx":1348
 *                         elif key == "xdm_node":
 *                                 if isinstance(value, PyXdmNode):
 *                                         node_ = value             # <<<<<<<<<<<<<<
 * 
 *         if node_ is not None:
 */
          if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmNode))))) __PYX_ERR(1, 1348, __pyx_L1_error)
          __pyx_t_1 = __pyx_v_value;
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_DECREF_SET(__pyx_v_node_, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_1));
          __pyx_t_1 = 0;

          /* "saxonc.pyx":1347
 *                                 c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *                         elif key == "xdm_node":
 *                                 if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *                                         node_ = value
 * 
 */
        }

        /* "saxonc.pyx":1346
 *                                 py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *                                 c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *                         elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *                                 if isinstance(value, PyXdmNode):
 *                                         node_ = value
 */
      }
      __pyx_L10:;

      /* "saxonc.pyx":1336
 *         cdef PyXdmNode node_ = None
 *         for key, value in kwds.items():
 *                 if isinstance(value, str):             # <<<<<<<<<<<<<<
 *                         if key == "source_file":
 *                                 py_source_string = value.encode('UTF-8') if value is not None else None
 */
    }

    /* "saxonc.pyx":1335
 *         py_output_string = None
 *         cdef PyXdmNode node_ = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *                 if isinstance(value, str):
 *                         if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":1350
 *                                         node_ = value
 * 
 *         if node_ is not None:             # <<<<<<<<<<<<<<
 *                 if py_output_string is not None:
 *                         self.thisxptr.setOutputFile(c_outputfile);
 */
  __pyx_t_9 = (((PyObject *)__pyx_v_node_) != Py_None);
  __pyx_t_10 = (__pyx_t_9 != 0);
  if (__pyx_t_10) {

    /* "saxonc.pyx":1351
 * 
 *         if node_ is not None:
 *                 if py_output_string is not None:             # <<<<<<<<<<<<<<
 *                         self.thisxptr.setOutputFile(c_outputfile);
 *                 self.thisxptr.transformToFile(node_.derivednptr)
 */
    __pyx_t_10 = (__pyx_v_py_output_string != Py_None);
    __pyx_t_9 = (__pyx_t_10 != 0);
    if (__pyx_t_9) {

      /* "saxonc.pyx":1352
 *         if node_ is not None:
 *                 if py_output_string is not None:
 *                         self.thisxptr.setOutputFile(c_outputfile);             # <<<<<<<<<<<<<<
 *                 self.thisxptr.transformToFile(node_.derivednptr)
 *         else:
 */
      __pyx_v_self->thisxptr->setOutputFile(__pyx_v_c_outputfile);

      /* "saxonc.pyx":1351
 * 
 *         if node_ is not None:
 *                 if py_output_string is not None:             # <<<<<<<<<<<<<<
 *                         self.thisxptr.setOutputFile(c_outputfile);
 *                 self.thisxptr.transformToFile(node_.derivednptr)
 */
    }

    /* "saxonc.pyx":1353
 *                 if py_output_string is not None:
 *                         self.thisxptr.setOutputFile(c_outputfile);
 *                 self.thisxptr.transformToFile(node_.derivednptr)             # <<<<<<<<<<<<<<
 *         else:
 *                 self.thisxptr.transformFileToFile(c_sourcefile if py_source_string is not None else NULL, c_stylesheetfile if py_stylesheet_string is not None else NULL, c_outputfile if py_output_string is not None else NULL)
 */
    __pyx_v_self->thisxptr->transformToFile(__pyx_v_node_->derivednptr);

    /* "saxonc.pyx":1350
 *                                         node_ = value
 * 
 *         if node_ is not None:             # <<<<<<<<<<<<<<
 *                 if py_output_string is not None:
 *                         self.thisxptr.setOutputFile(c_outputfile);
 */
    goto __pyx_L12;
  }

  /* "saxonc.pyx":1355
 *                 self.thisxptr.transformToFile(node_.derivednptr)
 *         else:
 *                 self.thisxptr.transformFileToFile(c_sourcefile if py_source_string is not None else NULL, c_stylesheetfile if py_stylesheet_string is not None else NULL, c_outputfile if py_output_string is not None else NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_9 = (__pyx_v_py_source_string != Py_None);
    if ((__pyx_t_9 != 0)) {
      __pyx_t_11 = __pyx_v_c_sourcefile;
    } else {
      __pyx_t_11 = NULL;
    }
    __pyx_t_9 = (__pyx_v_py_stylesheet_string != Py_None);
    if ((__pyx_t_9 != 0)) {
      __pyx_t_12 = __pyx_v_c_stylesheetfile;
    } else {
      __pyx_t_12 = NULL;
    }
    __pyx_t_9 = (__pyx_v_py_output_string != Py_None);
    if ((__pyx_t_9 != 0)) {
      __pyx_t_13 = __pyx_v_c_outputfile;
    } else {
      __pyx_t_13 = NULL;
    }
    __pyx_v_self->thisxptr->transformFileToFile(__pyx_t_11, __pyx_t_12, __pyx_t_13);
  }
  __pyx_L12:;

  /* "saxonc.pyx":1308
 *         return ustring
 * 
 *      def transform_to_file(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         transform_to_file(self, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.transform_to_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_py_output_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_node_);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1358
 * 
 * 
 *      def transform_to_value(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         transform_to_value(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_37transform_to_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_36transform_to_value[] = "\n        transform_to_value(self, **kwds)\n        Execute transformation to an Xdm Node\n\n        Args:\n            **kwds: Possible optional arguments: source_file (str) or xdm_node (PyXdmNode). Other allowed argument: stylesheet_file (str)\n\n\n\n        Returns:\n            PyXdmNode: Result of the transformation as an PyXdmNode object\n\n\n        Example:\n\n            1) node = xsltproc.transform_to_value(source_file=\"cat.xml\", stylesheet_file=\"test1.xsl\")\n\n            2) xsltproc.set_source(\"cat.xml\")\r\n               node = xsltproc.transform_to_value(stylesheet_file=\"test1.xsl\")\n\n\n            3) node = saxon_proc.parse_xml(xml_text=\"<in/>\")\r\n               node = xsltproc.transform_tovalue(stylesheet_file=\"test1.xsl\", xdm_node= node)\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_37transform_to_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_to_value (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("transform_to_value", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "transform_to_value", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_36transform_to_value(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_36transform_to_value(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  char const *__pyx_v_c_sourcefile;
  char const *__pyx_v_c_stylesheetfile;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_node_ = 0;
  CYTHON_UNUSED PyObject *__pyx_v_py_source_string = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_aval = 0;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_nval = 0;
  XdmValue *__pyx_v_xdmValue;
  PyObject *__pyx_v_type_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform_to_value", 0);

  /* "saxonc.pyx":1383
 *                node = xsltproc.transform_tovalue(stylesheet_file="test1.xsl", xdm_node= node)
 *         """
 *         cdef const char * c_sourcefile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmNode node_ = None
 */
  __pyx_v_c_sourcefile = NULL;

  /* "saxonc.pyx":1384
 *         """
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode node_ = None
 *         py_source_string = None
 */
  __pyx_v_c_stylesheetfile = NULL;

  /* "saxonc.pyx":1385
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmNode node_ = None             # <<<<<<<<<<<<<<
 *         py_source_string = None
 *         py_stylesheet_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_node_ = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":1386
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmNode node_ = None
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":1387
 *         cdef PyXdmNode node_ = None
 *         py_source_string = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":1388
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1388, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1388, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1388, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1388, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1388, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1388, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1388, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1388, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1388, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":1389
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":1390
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *             if key == "stylesheet_file":
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1390, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1391
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1391, __pyx_L1_error)
        __pyx_v_c_sourcefile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1390
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *             if key == "stylesheet_file":
 */
      }

      /* "saxonc.pyx":1392
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1392, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1393
 *               c_sourcefile = make_c_str(value)
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)             # <<<<<<<<<<<<<<
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1393, __pyx_L1_error)
        __pyx_v_c_stylesheetfile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1392
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":
 */
      }

      /* "saxonc.pyx":1389
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":1394
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmNode):
 *               node_ = value
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_node, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1394, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":1395
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *               node_ = value
 *         cdef PyXdmValue val = None
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmNode); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":1396
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):
 *               node_ = value             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 */
        if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmNode))))) __PYX_ERR(1, 1396, __pyx_L1_error)
        __pyx_t_1 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_node_, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1395
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *               node_ = value
 *         cdef PyXdmValue val = None
 */
      }

      /* "saxonc.pyx":1394
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmNode):
 *               node_ = value
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":1388
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":1397
 *             if isinstance(value, PyXdmNode):
 *               node_ = value
 *         cdef PyXdmValue val = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1398
 *               node_ = value
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_aval = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)Py_None);

  /* "saxonc.pyx":1399
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         if len(kwds) == 1 and node_ is not None:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_nval = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":1400
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL             # <<<<<<<<<<<<<<
 *         if len(kwds) == 1 and node_ is not None:
 *           xdmValue = self.thisxptr.transformToValue(node_.derivednptr)
 */
  __pyx_v_xdmValue = NULL;

  /* "saxonc.pyx":1401
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         if len(kwds) == 1 and node_ is not None:             # <<<<<<<<<<<<<<
 *           xdmValue = self.thisxptr.transformToValue(node_.derivednptr)
 *         else:
 */
  __pyx_t_3 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1401, __pyx_L1_error)
  __pyx_t_10 = ((__pyx_t_3 == 1) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_10 = (((PyObject *)__pyx_v_node_) != Py_None);
  __pyx_t_11 = (__pyx_t_10 != 0);
  __pyx_t_9 = __pyx_t_11;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_9) {

    /* "saxonc.pyx":1402
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         if len(kwds) == 1 and node_ is not None:
 *           xdmValue = self.thisxptr.transformToValue(node_.derivednptr)             # <<<<<<<<<<<<<<
 *         else:
 *           xdmValue = self.thisxptr.transformFileToValue(c_sourcefile, c_stylesheetfile)
 */
    __pyx_v_xdmValue = __pyx_v_self->thisxptr->transformToValue(__pyx_v_node_->derivednptr);

    /* "saxonc.pyx":1401
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         if len(kwds) == 1 and node_ is not None:             # <<<<<<<<<<<<<<
 *           xdmValue = self.thisxptr.transformToValue(node_.derivednptr)
 *         else:
 */
    goto __pyx_L11;
  }

  /* "saxonc.pyx":1404
 *           xdmValue = self.thisxptr.transformToValue(node_.derivednptr)
 *         else:
 *           xdmValue = self.thisxptr.transformFileToValue(c_sourcefile, c_stylesheetfile)             # <<<<<<<<<<<<<<
 * 
 *         if xdmValue is NULL:
 */
  /*else*/ {
    __pyx_v_xdmValue = __pyx_v_self->thisxptr->transformFileToValue(__pyx_v_c_sourcefile, __pyx_v_c_stylesheetfile);
  }
  __pyx_L11:;

  /* "saxonc.pyx":1406
 *           xdmValue = self.thisxptr.transformFileToValue(c_sourcefile, c_stylesheetfile)
 * 
 *         if xdmValue is NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef type_ = xdmValue.getType()
 */
  __pyx_t_9 = ((__pyx_v_xdmValue == NULL) != 0);
  if (__pyx_t_9) {

    /* "saxonc.pyx":1407
 * 
 *         if xdmValue is NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":1406
 *           xdmValue = self.thisxptr.transformFileToValue(c_sourcefile, c_stylesheetfile)
 * 
 *         if xdmValue is NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef type_ = xdmValue.getType()
 */
  }

  /* "saxonc.pyx":1408
 *         if xdmValue is NULL:
 *             return None
 *         cdef type_ = xdmValue.getType()             # <<<<<<<<<<<<<<
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_xdmValue->getType()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_type_ = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":1409
 *             return None
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:             # <<<<<<<<<<<<<<
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "saxonc.pyx":1410
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_aval, ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":1411
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue             # <<<<<<<<<<<<<<
 *             return aval
 *         elif type_ == 3:
 */
    __pyx_v_aval->derivedaptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
    __pyx_v_aval->__pyx_base.derivedptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
    __pyx_v_aval->__pyx_base.__pyx_base.thisvptr = ((XdmAtomicValue *)__pyx_v_xdmValue);

    /* "saxonc.pyx":1412
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval             # <<<<<<<<<<<<<<
 *         elif type_ == 3:
 *             nval = PyXdmNode()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_aval));
    __pyx_r = ((PyObject *)__pyx_v_aval);
    goto __pyx_L0;

    /* "saxonc.pyx":1409
 *             return None
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:             # <<<<<<<<<<<<<<
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
  }

  /* "saxonc.pyx":1413
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "saxonc.pyx":1414
 *             return aval
 *         elif type_ == 3:
 *             nval = PyXdmNode()             # <<<<<<<<<<<<<<
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *             return nval
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_nval, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":1415
 *         elif type_ == 3:
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue             # <<<<<<<<<<<<<<
 *             return nval
 *         else:
 */
    __pyx_v_nval->derivednptr = ((XdmNode *)__pyx_v_xdmValue);
    __pyx_v_nval->__pyx_base.derivedptr = ((XdmNode *)__pyx_v_xdmValue);
    __pyx_v_nval->__pyx_base.__pyx_base.thisvptr = ((XdmNode *)__pyx_v_xdmValue);

    /* "saxonc.pyx":1416
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *             return nval             # <<<<<<<<<<<<<<
 *         else:
 *             val = PyXdmValue()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_nval));
    __pyx_r = ((PyObject *)__pyx_v_nval);
    goto __pyx_L0;

    /* "saxonc.pyx":1413
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
  }

  /* "saxonc.pyx":1418
 *             return nval
 *         else:
 *             val = PyXdmValue()             # <<<<<<<<<<<<<<
 *             val.thisvptr = xdmValue
 *             return val
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmValue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":1419
 *         else:
 *             val = PyXdmValue()
 *             val.thisvptr = xdmValue             # <<<<<<<<<<<<<<
 *             return val
 * 
 */
    __pyx_v_val->thisvptr = __pyx_v_xdmValue;

    /* "saxonc.pyx":1420
 *             val = PyXdmValue()
 *             val.thisvptr = xdmValue
 *             return val             # <<<<<<<<<<<<<<
 * 
 *      def apply_templates_returning_value(self, **kwds):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;
  }

  /* "saxonc.pyx":1358
 * 
 * 
 *      def transform_to_value(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         transform_to_value(self, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.transform_to_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node_);
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XDECREF((PyObject *)__pyx_v_aval);
  __Pyx_XDECREF((PyObject *)__pyx_v_nval);
  __Pyx_XDECREF(__pyx_v_type_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1422
 *             return val
 * 
 *      def apply_templates_returning_value(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         apply_templates_returning_value(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_39apply_templates_returning_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_38apply_templates_returning_value[] = "\n        apply_templates_returning_value(self, **kwds)\n        Invoke the stylesheet by applying templates to a supplied input sequence, Saving the results as an XdmValue.\n\n        Args:\n            **kwds: Possible optional arguments: source_file (str) or xdm_value (PyXdmValue). Other allowed argument: stylesheet_file (str)\n\n\n\n        Returns:\n            PyXdmValue: Result of the transformation as an PyXdmValue object\n\n\n        Example:\n\n            1) xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               node = xsltproc.apply_templates_returning_value(stylesheet_file=\"test1.xsl\")\n\n\n            2) xsltproc.compile_stylesheet(stylesheet_file=\"test1.xsl\")\n\t\t\t   xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               node = xsltproc.apply_templates_returning_value()\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_39apply_templates_returning_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply_templates_returning_value (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("apply_templates_returning_value", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "apply_templates_returning_value", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_38apply_templates_returning_value(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_38apply_templates_returning_value(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  char const *__pyx_v_c_sourcefile;
  char const *__pyx_v_c_stylesheetfile;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value_ = 0;
  CYTHON_UNUSED PyObject *__pyx_v_py_source_string = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_aval = 0;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_nval = 0;
  XdmValue *__pyx_v_xdmValue;
  PyObject *__pyx_v_type_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply_templates_returning_value", 0);

  /* "saxonc.pyx":1447
 * 
 *         """
 *         cdef const char * c_sourcefile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 */
  __pyx_v_c_sourcefile = NULL;

  /* "saxonc.pyx":1448
 *         """
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 */
  __pyx_v_c_stylesheetfile = NULL;

  /* "saxonc.pyx":1449
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None             # <<<<<<<<<<<<<<
 *         py_source_string = None
 *         py_stylesheet_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_value_ = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1450
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":1451
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":1452
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1452, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1452, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1452, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1452, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1452, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1452, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1452, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1452, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1452, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1452, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1452, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1452, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":1453
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":1454
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1454, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1455
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1455, __pyx_L1_error)
        __pyx_v_c_sourcefile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1456
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 */
        __pyx_v_self->thisxptr->setInitialMatchSelectionAsFile(__pyx_v_c_sourcefile);

        /* "saxonc.pyx":1454
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      }

      /* "saxonc.pyx":1457
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1457, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1458
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)             # <<<<<<<<<<<<<<
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1458, __pyx_L1_error)
        __pyx_v_c_stylesheetfile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1457
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 */
      }

      /* "saxonc.pyx":1453
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":1459
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_value, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1459, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":1460
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":1461
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef PyXdmValue val = None
 */
        if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue))))) __PYX_ERR(1, 1461, __pyx_L1_error)
        __pyx_t_1 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1462
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 */
        __pyx_v_self->thisxptr->setInitialMatchSelection(__pyx_v_value_->thisvptr);

        /* "saxonc.pyx":1460
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      }

      /* "saxonc.pyx":1459
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":1452
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":1463
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef PyXdmValue val = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1464
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_aval = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)Py_None);

  /* "saxonc.pyx":1465
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         xdmValue = self.thisxptr.applyTemplatesReturningValue(c_stylesheetfile)
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_nval = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":1466
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL             # <<<<<<<<<<<<<<
 *         xdmValue = self.thisxptr.applyTemplatesReturningValue(c_stylesheetfile)
 * 
 */
  __pyx_v_xdmValue = NULL;

  /* "saxonc.pyx":1467
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         xdmValue = self.thisxptr.applyTemplatesReturningValue(c_stylesheetfile)             # <<<<<<<<<<<<<<
 * 
 *         if xdmValue is NULL:
 */
  __pyx_v_xdmValue = __pyx_v_self->thisxptr->applyTemplatesReturningValue(__pyx_v_c_stylesheetfile);

  /* "saxonc.pyx":1469
 *         xdmValue = self.thisxptr.applyTemplatesReturningValue(c_stylesheetfile)
 * 
 *         if xdmValue is NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef type_ = xdmValue.getType()
 */
  __pyx_t_9 = ((__pyx_v_xdmValue == NULL) != 0);
  if (__pyx_t_9) {

    /* "saxonc.pyx":1470
 * 
 *         if xdmValue is NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":1469
 *         xdmValue = self.thisxptr.applyTemplatesReturningValue(c_stylesheetfile)
 * 
 *         if xdmValue is NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef type_ = xdmValue.getType()
 */
  }

  /* "saxonc.pyx":1471
 *         if xdmValue is NULL:
 *             return None
 *         cdef type_ = xdmValue.getType()             # <<<<<<<<<<<<<<
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_xdmValue->getType()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_type_ = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":1472
 *             return None
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:             # <<<<<<<<<<<<<<
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "saxonc.pyx":1473
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_aval, ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":1474
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue             # <<<<<<<<<<<<<<
 *             return aval
 *         elif type_ == 3:
 */
    __pyx_v_aval->derivedaptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
    __pyx_v_aval->__pyx_base.derivedptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
    __pyx_v_aval->__pyx_base.__pyx_base.thisvptr = ((XdmAtomicValue *)__pyx_v_xdmValue);

    /* "saxonc.pyx":1475
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval             # <<<<<<<<<<<<<<
 *         elif type_ == 3:
 *             nval = PyXdmNode()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_aval));
    __pyx_r = ((PyObject *)__pyx_v_aval);
    goto __pyx_L0;

    /* "saxonc.pyx":1472
 *             return None
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:             # <<<<<<<<<<<<<<
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
  }

  /* "saxonc.pyx":1476
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "saxonc.pyx":1477
 *             return aval
 *         elif type_ == 3:
 *             nval = PyXdmNode()             # <<<<<<<<<<<<<<
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *             return nval
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_nval, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":1478
 *         elif type_ == 3:
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue             # <<<<<<<<<<<<<<
 *             return nval
 *         else:
 */
    __pyx_v_nval->derivednptr = ((XdmNode *)__pyx_v_xdmValue);
    __pyx_v_nval->__pyx_base.derivedptr = ((XdmNode *)__pyx_v_xdmValue);
    __pyx_v_nval->__pyx_base.__pyx_base.thisvptr = ((XdmNode *)__pyx_v_xdmValue);

    /* "saxonc.pyx":1479
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *             return nval             # <<<<<<<<<<<<<<
 *         else:
 *             val = PyXdmValue()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_nval));
    __pyx_r = ((PyObject *)__pyx_v_nval);
    goto __pyx_L0;

    /* "saxonc.pyx":1476
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
  }

  /* "saxonc.pyx":1481
 *             return nval
 *         else:
 *             val = PyXdmValue()             # <<<<<<<<<<<<<<
 *             val.thisvptr = xdmValue
 *             return val
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmValue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":1482
 *         else:
 *             val = PyXdmValue()
 *             val.thisvptr = xdmValue             # <<<<<<<<<<<<<<
 *             return val
 * 
 */
    __pyx_v_val->thisvptr = __pyx_v_xdmValue;

    /* "saxonc.pyx":1483
 *             val = PyXdmValue()
 *             val.thisvptr = xdmValue
 *             return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;
  }

  /* "saxonc.pyx":1422
 *             return val
 * 
 *      def apply_templates_returning_value(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         apply_templates_returning_value(self, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.apply_templates_returning_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value_);
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XDECREF((PyObject *)__pyx_v_aval);
  __Pyx_XDECREF((PyObject *)__pyx_v_nval);
  __Pyx_XDECREF(__pyx_v_type_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1486
 * 
 * 
 *      def apply_templates_returning_string(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         apply_templates_returning_string(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_41apply_templates_returning_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_40apply_templates_returning_string[] = "\n        apply_templates_returning_string(self, **kwds)\n        Invoke the stylesheet by applying templates to a supplied input sequence, Saving the results as a str.\n\n        Args:\n            **kwds: Possible optional arguments: source_file (str) or xdm_value (PyXdmValue). Other allowed argument: stylesheet_file (str)\n\n\n\n        Returns:\n            PyXdmValue: Result of the transformation as an PyXdmValue object\n\n\n        Example:\n\n            1) xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               content = xsltproc.apply_templates_returning_str(stylesheet_file=\"test1.xsl\")\n\t\t\t   print(content)\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_41apply_templates_returning_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply_templates_returning_string (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("apply_templates_returning_string", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "apply_templates_returning_string", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_40apply_templates_returning_string(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_40apply_templates_returning_string(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  char const *__pyx_v_c_sourcefile;
  char const *__pyx_v_c_stylesheetfile;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value_ = 0;
  CYTHON_UNUSED PyObject *__pyx_v_py_source_string = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply_templates_returning_string", 0);

  /* "saxonc.pyx":1507
 * 
 *         """
 *         cdef const char * c_sourcefile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 */
  __pyx_v_c_sourcefile = NULL;

  /* "saxonc.pyx":1508
 *         """
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 */
  __pyx_v_c_stylesheetfile = NULL;

  /* "saxonc.pyx":1509
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None             # <<<<<<<<<<<<<<
 *         py_source_string = None
 *         py_stylesheet_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_value_ = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1510
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":1511
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":1512
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1512, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1512, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1512, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1512, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1512, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1512, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1512, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1512, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1512, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":1513
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":1514
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1514, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1515
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1515, __pyx_L1_error)
        __pyx_v_c_sourcefile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1516
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 */
        __pyx_v_self->thisxptr->setInitialMatchSelectionAsFile(__pyx_v_c_sourcefile);

        /* "saxonc.pyx":1514
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      }

      /* "saxonc.pyx":1517
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1517, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1518
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)             # <<<<<<<<<<<<<<
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1518, __pyx_L1_error)
        __pyx_v_c_stylesheetfile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1517
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 */
      }

      /* "saxonc.pyx":1513
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":1519
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_value, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1519, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":1520
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":1521
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef const char* c_string  = self.thisxptr.applyTemplatesReturningString(c_stylesheetfile)
 */
        if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue))))) __PYX_ERR(1, 1521, __pyx_L1_error)
        __pyx_t_1 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1522
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)             # <<<<<<<<<<<<<<
 *         cdef const char* c_string  = self.thisxptr.applyTemplatesReturningString(c_stylesheetfile)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 */
        __pyx_v_self->thisxptr->setInitialMatchSelection(__pyx_v_value_->thisvptr);

        /* "saxonc.pyx":1520
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      }

      /* "saxonc.pyx":1519
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":1512
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":1523
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef const char* c_string  = self.thisxptr.applyTemplatesReturningString(c_stylesheetfile)             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->thisxptr->applyTemplatesReturningString(__pyx_v_c_stylesheetfile);

  /* "saxonc.pyx":1524
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef const char* c_string  = self.thisxptr.applyTemplatesReturningString(c_stylesheetfile)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":1525
 *         cdef const char* c_string  = self.thisxptr.applyTemplatesReturningString(c_stylesheetfile)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 *      def apply_templates_returning_file(self, **kwds):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":1486
 * 
 * 
 *      def apply_templates_returning_string(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         apply_templates_returning_string(self, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.apply_templates_returning_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value_);
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1527
 *         return ustring
 * 
 *      def apply_templates_returning_file(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         apply_templates_returning_file(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_43apply_templates_returning_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_42apply_templates_returning_file[] = "\n        apply_templates_returning_file(self, **kwds)\n        Invoke the stylesheet by applying templates to a supplied input sequence, Saving the \n        results to file.\n\n        Args:\n            **kwds: Possible optional arguments: source_file (str) or xdm_value (PyXdmValue). \n            Other allowed argument: stylesheet_file (str) and the required argument output_file (str)\n\n\n        Returns:\n            PyXdmValue: Result of the transformation as an PyXdmValue object\n\n\n        Example:\n\n            1) xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               content = xsltproc.apply_templates_returning_file(stylesheet_file=\"test1.xsl\", output_file=\"result.xml\")\n\t\t\t   print(content)\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_43apply_templates_returning_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply_templates_returning_file (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("apply_templates_returning_file", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "apply_templates_returning_file", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_42apply_templates_returning_file(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_42apply_templates_returning_file(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  char const *__pyx_v_c_sourcefile;
  char const *__pyx_v_c_stylesheetfile;
  char const *__pyx_v_c_outputfile;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value_ = 0;
  CYTHON_UNUSED PyObject *__pyx_v_py_source_string = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_py_output_string = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  char const *__pyx_t_11;
  char const *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply_templates_returning_file", 0);

  /* "saxonc.pyx":1549
 * 
 *         """
 *         cdef const char * c_sourcefile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef const char * c_outputfile = NULL
 */
  __pyx_v_c_sourcefile = NULL;

  /* "saxonc.pyx":1550
 *         """
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_outputfile = NULL
 *         cdef PyXdmValue value_ = None
 */
  __pyx_v_c_stylesheetfile = NULL;

  /* "saxonc.pyx":1551
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef const char * c_outputfile = NULL             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 */
  __pyx_v_c_outputfile = NULL;

  /* "saxonc.pyx":1552
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef const char * c_outputfile = NULL
 *         cdef PyXdmValue value_ = None             # <<<<<<<<<<<<<<
 *         py_source_string = None
 *         py_stylesheet_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_value_ = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1553
 *         cdef const char * c_outputfile = NULL
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         py_output_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":1554
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         py_output_string = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":1555
 *         py_source_string = None
 *         py_stylesheet_string = None
 *         py_output_string = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_output_string = Py_None;

  /* "saxonc.pyx":1556
 *         py_stylesheet_string = None
 *         py_output_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1556, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1556, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1556, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1556, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1556, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1556, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1556, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1556, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1556, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1556, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1556, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1556, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":1557
 *         py_output_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":1558
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1558, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1559
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "output_file":
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1559, __pyx_L1_error)
        __pyx_v_c_sourcefile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1560
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)             # <<<<<<<<<<<<<<
 *             if key == "output_file":
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 */
        __pyx_v_self->thisxptr->setInitialMatchSelectionAsFile(__pyx_v_c_sourcefile);

        /* "saxonc.pyx":1558
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      }

      /* "saxonc.pyx":1561
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "output_file":             # <<<<<<<<<<<<<<
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_output_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1561, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1562
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "output_file":
 *               py_output_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1562, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1562, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __pyx_t_6;
          __pyx_t_6 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_1 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_py_output_string, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1563
 *             if key == "output_file":
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_v_py_output_string); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(1, 1563, __pyx_L1_error)
          __pyx_t_11 = __pyx_t_12;
        } else {
          __pyx_t_11 = ((char const *)"");
        }
        __pyx_v_c_outputfile = __pyx_t_11;

        /* "saxonc.pyx":1561
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "output_file":             # <<<<<<<<<<<<<<
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 */
      }

      /* "saxonc.pyx":1564
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1564, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1565
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)             # <<<<<<<<<<<<<<
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmNode):
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1565, __pyx_L1_error)
        __pyx_v_c_stylesheetfile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1564
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 */
      }

      /* "saxonc.pyx":1557
 *         py_output_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":1566
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmNode):
 *               value_ = value;
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_value, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1566, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":1567
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmNode); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":1568
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmNode):
 *               value_ = value;             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         self.thisxptr.applyTemplatesReturningFile(c_stylesheetfile, c_outputfile)
 */
        if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue))))) __PYX_ERR(1, 1568, __pyx_L1_error)
        __pyx_t_1 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1569
 *             if isinstance(value, PyXdmNode):
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)             # <<<<<<<<<<<<<<
 *         self.thisxptr.applyTemplatesReturningFile(c_stylesheetfile, c_outputfile)
 * 
 */
        __pyx_v_self->thisxptr->setInitialMatchSelection(__pyx_v_value_->thisvptr);

        /* "saxonc.pyx":1567
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmNode):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      }

      /* "saxonc.pyx":1566
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmNode):
 *               value_ = value;
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":1556
 *         py_stylesheet_string = None
 *         py_output_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":1570
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         self.thisxptr.applyTemplatesReturningFile(c_stylesheetfile, c_outputfile)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisxptr->applyTemplatesReturningFile(__pyx_v_c_stylesheetfile, __pyx_v_c_outputfile);

  /* "saxonc.pyx":1527
 *         return ustring
 * 
 *      def apply_templates_returning_file(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         apply_templates_returning_file(self, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.apply_templates_returning_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value_);
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_py_output_string);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1573
 * 
 * 
 *      def call_template_returning_value(self, str template_name=None, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         call_template_returning_value(self, str template_name, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_45call_template_returning_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_44call_template_returning_value[] = "\n        call_template_returning_value(self, str template_name, **kwds)\n        Invoke a transformation by calling a named template and return result as an PyXdmValue.\n\n        Args:\n\t\t\ttemplate_name(str): The name of the template to invoke. If None is supplied then call the initial-template\n            **kwds: Possible optional arguments: source_file (str) or xdm_value (PyXdmValue). Other allowed argument: stylesheet_file (str)\n\n\n\n        Returns:\n            PyXdmValue: Result of the transformation as an PyXdmValue object\n\n\n        Example:\n            1) node = xsltproc.call_template_returning_value(\"main\", stylesheet_file=\"test1.xsl\")\n\n\n            2) xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               node = xsltproc.call_template_returning_value(\"main\", stylesheet_file=\"test1.xsl\")\n\n\n            3) xsltproc.compile_stylesheet(stylesheet_file=\"test2.xsl\")\n\t\t\t   xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               node = xsltproc.call_template_returning_value(\"go\")\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_45call_template_returning_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_template_name = 0;
  PyObject *__pyx_v_kwds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call_template_returning_value (wrapper)", 0);
  __pyx_v_kwds = PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_template_name,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_template_name);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwds, values, pos_args, "call_template_returning_value") < 0)) __PYX_ERR(1, 1573, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_template_name = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("call_template_returning_value", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1573, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwds); __pyx_v_kwds = 0;
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.call_template_returning_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_template_name), (&PyString_Type), 1, "template_name", 1))) __PYX_ERR(1, 1573, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_44call_template_returning_value(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_template_name, __pyx_v_kwds);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_44call_template_returning_value(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_template_name, PyObject *__pyx_v_kwds) {
  char const *__pyx_v_c_templateName;
  char const *__pyx_v_c_sourcefile;
  char const *__pyx_v_c_stylesheetfile;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value_ = 0;
  CYTHON_UNUSED PyObject *__pyx_v_py_source_string = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_template_name_str = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_aval = 0;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_nval = 0;
  XdmValue *__pyx_v_xdmValue;
  PyObject *__pyx_v_type_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("call_template_returning_value", 0);

  /* "saxonc.pyx":1601
 * 
 *         """
 *         cdef const char * c_templateName = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 */
  __pyx_v_c_templateName = NULL;

  /* "saxonc.pyx":1602
 *         """
 *         cdef const char * c_templateName = NULL
 *         cdef const char * c_sourcefile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 */
  __pyx_v_c_sourcefile = NULL;

  /* "saxonc.pyx":1603
 *         cdef const char * c_templateName = NULL
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 */
  __pyx_v_c_stylesheetfile = NULL;

  /* "saxonc.pyx":1604
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None             # <<<<<<<<<<<<<<
 *         py_source_string = None
 *         py_template_name_str = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_value_ = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1605
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":1606
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 *         py_template_name_str = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_template_name_str = Py_None;

  /* "saxonc.pyx":1607
 *         py_source_string = None
 *         py_template_name_str = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":1608
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1608, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1608, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1608, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1608, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1608, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1608, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1608, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":1609
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":1610
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1610, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1611
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1611, __pyx_L1_error)
        __pyx_v_c_sourcefile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1612
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 */
        __pyx_v_self->thisxptr->setInitialMatchSelectionAsFile(__pyx_v_c_sourcefile);

        /* "saxonc.pyx":1610
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      }

      /* "saxonc.pyx":1613
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1613, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1614
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)             # <<<<<<<<<<<<<<
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmValue):
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1614, __pyx_L1_error)
        __pyx_v_c_stylesheetfile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1613
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":
 */
      }

      /* "saxonc.pyx":1609
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":1615
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_node, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1615, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":1616
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":1617
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 * 
 */
        if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue))))) __PYX_ERR(1, 1617, __pyx_L1_error)
        __pyx_t_1 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1618
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)             # <<<<<<<<<<<<<<
 * 
 *         c_templateName = make_c_str(template_name)
 */
        __pyx_v_self->thisxptr->setInitialMatchSelection(__pyx_v_value_->thisvptr);

        /* "saxonc.pyx":1616
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      }

      /* "saxonc.pyx":1615
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_node":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":1608
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":1620
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 * 
 *         c_templateName = make_c_str(template_name)             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 */
  __pyx_v_c_templateName = __pyx_f_6saxonc_make_c_str(__pyx_v_template_name);

  /* "saxonc.pyx":1621
 * 
 *         c_templateName = make_c_str(template_name)
 *         cdef PyXdmValue val = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1622
 *         c_templateName = make_c_str(template_name)
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_aval = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)Py_None);

  /* "saxonc.pyx":1623
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         xdmValue = self.thisxptr.callTemplateReturningValue(c_stylesheetfile, c_templateName)
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_nval = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":1624
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL             # <<<<<<<<<<<<<<
 *         xdmValue = self.thisxptr.callTemplateReturningValue(c_stylesheetfile, c_templateName)
 * 
 */
  __pyx_v_xdmValue = NULL;

  /* "saxonc.pyx":1625
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         xdmValue = self.thisxptr.callTemplateReturningValue(c_stylesheetfile, c_templateName)             # <<<<<<<<<<<<<<
 * 
 *         if xdmValue is NULL:
 */
  __pyx_v_xdmValue = __pyx_v_self->thisxptr->callTemplateReturningValue(__pyx_v_c_stylesheetfile, __pyx_v_c_templateName);

  /* "saxonc.pyx":1627
 *         xdmValue = self.thisxptr.callTemplateReturningValue(c_stylesheetfile, c_templateName)
 * 
 *         if xdmValue is NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef type_ = xdmValue.getType()
 */
  __pyx_t_9 = ((__pyx_v_xdmValue == NULL) != 0);
  if (__pyx_t_9) {

    /* "saxonc.pyx":1628
 * 
 *         if xdmValue is NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":1627
 *         xdmValue = self.thisxptr.callTemplateReturningValue(c_stylesheetfile, c_templateName)
 * 
 *         if xdmValue is NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef type_ = xdmValue.getType()
 */
  }

  /* "saxonc.pyx":1629
 *         if xdmValue is NULL:
 *             return None
 *         cdef type_ = xdmValue.getType()             # <<<<<<<<<<<<<<
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_xdmValue->getType()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_type_ = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":1630
 *             return None
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:             # <<<<<<<<<<<<<<
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1630, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "saxonc.pyx":1631
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_aval, ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":1632
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue             # <<<<<<<<<<<<<<
 *             return aval
 *         elif type_ == 3:
 */
    __pyx_v_aval->derivedaptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
    __pyx_v_aval->__pyx_base.derivedptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
    __pyx_v_aval->__pyx_base.__pyx_base.thisvptr = ((XdmAtomicValue *)__pyx_v_xdmValue);

    /* "saxonc.pyx":1633
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval             # <<<<<<<<<<<<<<
 *         elif type_ == 3:
 *             nval = PyXdmNode()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_aval));
    __pyx_r = ((PyObject *)__pyx_v_aval);
    goto __pyx_L0;

    /* "saxonc.pyx":1630
 *             return None
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:             # <<<<<<<<<<<<<<
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
  }

  /* "saxonc.pyx":1634
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "saxonc.pyx":1635
 *             return aval
 *         elif type_ == 3:
 *             nval = PyXdmNode()             # <<<<<<<<<<<<<<
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *             return nval
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_nval, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":1636
 *         elif type_ == 3:
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue             # <<<<<<<<<<<<<<
 *             return nval
 *         else:
 */
    __pyx_v_nval->derivednptr = ((XdmNode *)__pyx_v_xdmValue);
    __pyx_v_nval->__pyx_base.derivedptr = ((XdmNode *)__pyx_v_xdmValue);
    __pyx_v_nval->__pyx_base.__pyx_base.thisvptr = ((XdmNode *)__pyx_v_xdmValue);

    /* "saxonc.pyx":1637
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *             return nval             # <<<<<<<<<<<<<<
 *         else:
 *             val = PyXdmValue()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_nval));
    __pyx_r = ((PyObject *)__pyx_v_nval);
    goto __pyx_L0;

    /* "saxonc.pyx":1634
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
  }

  /* "saxonc.pyx":1639
 *             return nval
 *         else:
 *             val = PyXdmValue()             # <<<<<<<<<<<<<<
 *             val.thisvptr = xdmValue
 *             return val
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmValue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":1640
 *         else:
 *             val = PyXdmValue()
 *             val.thisvptr = xdmValue             # <<<<<<<<<<<<<<
 *             return val
 * 
 */
    __pyx_v_val->thisvptr = __pyx_v_xdmValue;

    /* "saxonc.pyx":1641
 *             val = PyXdmValue()
 *             val.thisvptr = xdmValue
 *             return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;
  }

  /* "saxonc.pyx":1573
 * 
 * 
 *      def call_template_returning_value(self, str template_name=None, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         call_template_returning_value(self, str template_name, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.call_template_returning_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value_);
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_template_name_str);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XDECREF((PyObject *)__pyx_v_aval);
  __Pyx_XDECREF((PyObject *)__pyx_v_nval);
  __Pyx_XDECREF(__pyx_v_type_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1645
 * 
 * 
 *      def call_template_returning_string(self, str template_name=None, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         call_template_returning_string(self, str template_name, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_47call_template_returning_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_46call_template_returning_string[] = "\n        call_template_returning_string(self, str template_name, **kwds)\n        Invoke a transformation by calling a named template and return result as a string.\n\n        Args:\n\t\t\ttemplate_name(str): The name of the template to invoke. If None is supplied then call the initial-template\n            **kwds: Possible optional arguments: source_file (str) or xdm_Value (PyXdmValue). Other allowed argument: stylesheet_file (str)\n\n\n\n        Returns:\n            PyXdmValue: Result of the transformation as an PyXdmValue object\n\n\n        Example:\n            1) result = xsltproc.call_template_returning_string(\"main\", stylesheet_file=\"test1.xsl\")\n\n\n            2) xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               result = xsltproc.call_template_returning_string(\"main\", stylesheet_file=\"test1.xsl\")\n\n        cdef const char * c_templateName = NULL\n\n            3) xsltproc.compile_stylesheet(stylesheet_file=\"test2.xsl\")\n\t\t\t   xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               result = xsltproc.call_template_returning_string(\"go\")\n\t\t\t   print(result)\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_47call_template_returning_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_template_name = 0;
  PyObject *__pyx_v_kwds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call_template_returning_string (wrapper)", 0);
  __pyx_v_kwds = PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_template_name,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_template_name);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwds, values, pos_args, "call_template_returning_string") < 0)) __PYX_ERR(1, 1645, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_template_name = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("call_template_returning_string", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1645, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwds); __pyx_v_kwds = 0;
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.call_template_returning_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_template_name), (&PyString_Type), 1, "template_name", 1))) __PYX_ERR(1, 1645, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_46call_template_returning_string(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_template_name, __pyx_v_kwds);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_46call_template_returning_string(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_template_name, PyObject *__pyx_v_kwds) {
  char const *__pyx_v_c_sourcefile;
  char const *__pyx_v_c_stylesheetfile;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_value_ = 0;
  CYTHON_UNUSED PyObject *__pyx_v_py_source_string = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_template_name_str = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  char const *__pyx_v_c_templateName;
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("call_template_returning_string", 0);

  /* "saxonc.pyx":1674
 * 			   print(result)
 *         """
 *         cdef const char * c_sourcefile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmNode value_ = None
 */
  __pyx_v_c_sourcefile = NULL;

  /* "saxonc.pyx":1675
 *         """
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode value_ = None
 *         py_source_string = None
 */
  __pyx_v_c_stylesheetfile = NULL;

  /* "saxonc.pyx":1676
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmNode value_ = None             # <<<<<<<<<<<<<<
 *         py_source_string = None
 *         py_template_name_str = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_value_ = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":1677
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmNode value_ = None
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":1678
 *         cdef PyXdmNode value_ = None
 *         py_source_string = None
 *         py_template_name_str = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_template_name_str = Py_None;

  /* "saxonc.pyx":1679
 *         py_source_string = None
 *         py_template_name_str = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":1680
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1680, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1680, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1680, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1680, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1680, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1680, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1680, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1680, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1680, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1680, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1680, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1680, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":1681
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":1682
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1682, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1683
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1683, __pyx_L1_error)
        __pyx_v_c_sourcefile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1684
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 */
        __pyx_v_self->thisxptr->setInitialMatchSelectionAsFile(__pyx_v_c_sourcefile);

        /* "saxonc.pyx":1682
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      }

      /* "saxonc.pyx":1685
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1685, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1686
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)             # <<<<<<<<<<<<<<
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1686, __pyx_L1_error)
        __pyx_v_c_stylesheetfile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1685
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 */
      }

      /* "saxonc.pyx":1681
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":1687
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_value, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1687, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":1688
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":1689
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 * 
 */
        if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmNode))))) __PYX_ERR(1, 1689, __pyx_L1_error)
        __pyx_t_1 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1690
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)             # <<<<<<<<<<<<<<
 * 
 *         c_templateName = make_c_str(template_name)
 */
        __pyx_v_self->thisxptr->setInitialMatchSelection(__pyx_v_value_->__pyx_base.__pyx_base.thisvptr);

        /* "saxonc.pyx":1688
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      }

      /* "saxonc.pyx":1687
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":1680
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":1692
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 * 
 *         c_templateName = make_c_str(template_name)             # <<<<<<<<<<<<<<
 *         cdef const char* c_string  = self.thisxptr.callTemplateReturningString(c_stylesheetfile, c_templateName)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 */
  __pyx_v_c_templateName = __pyx_f_6saxonc_make_c_str(__pyx_v_template_name);

  /* "saxonc.pyx":1693
 * 
 *         c_templateName = make_c_str(template_name)
 *         cdef const char* c_string  = self.thisxptr.callTemplateReturningString(c_stylesheetfile, c_templateName)             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->thisxptr->callTemplateReturningString(__pyx_v_c_stylesheetfile, __pyx_v_c_templateName);

  /* "saxonc.pyx":1694
 *         c_templateName = make_c_str(template_name)
 *         cdef const char* c_string  = self.thisxptr.callTemplateReturningString(c_stylesheetfile, c_templateName)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":1695
 *         cdef const char* c_string  = self.thisxptr.callTemplateReturningString(c_stylesheetfile, c_templateName)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":1645
 * 
 * 
 *      def call_template_returning_string(self, str template_name=None, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         call_template_returning_string(self, str template_name, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.call_template_returning_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value_);
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_template_name_str);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1698
 * 
 * 
 *      def call_template_returning_file(self, str template_name=None, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         call_template_returning_file(self, str template_name, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_49call_template_returning_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_48call_template_returning_file[] = "\n        call_template_returning_file(self, str template_name, **kwds)\n        Invoke a transformation by calling a named template and save result in a specified file.\n\n        Args:\n\t\t\ttemplate_name(str): The name of the template to invoke. If None is supplied then call the initial-template\n            **kwds: Possible optional arguments: source_file (str) or xdm_node (PyXdmNode). Other allowed argument: stylesheet_file (str)\n\n\n\n        Returns:\n            PyXdmValue: Result of the transformation as an PyXdmValue object\n\n\n        Example:\n            1) xsltproc.call_template_returning_file(\"main\", stylesheet_file=\"test1.xsl\",  output_file=\"result.xml\")\n\n\n            2) xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               xsltproc.call_template_returning_file(\"main\", stylesheet_file=\"test1.xsl\", output_file=\"result.xml\")\n\n\n            3) xsltproc.compile_stylesheet(stylesheet_file=\"test2.xsl\")\n\t\t\t   xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               xsltproc.call_template_returning_file(\"go\", output_file=\"result.xml\")\n\t\t\t   print(result)\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_49call_template_returning_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_template_name = 0;
  PyObject *__pyx_v_kwds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call_template_returning_file (wrapper)", 0);
  __pyx_v_kwds = PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_template_name,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_template_name);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwds, values, pos_args, "call_template_returning_file") < 0)) __PYX_ERR(1, 1698, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_template_name = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("call_template_returning_file", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1698, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwds); __pyx_v_kwds = 0;
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.call_template_returning_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_template_name), (&PyString_Type), 1, "template_name", 1))) __PYX_ERR(1, 1698, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_48call_template_returning_file(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_template_name, __pyx_v_kwds);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_48call_template_returning_file(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_template_name, PyObject *__pyx_v_kwds) {
  char *__pyx_v_c_outputfile;
  char const *__pyx_v_c_templateName;
  char const *__pyx_v_c_sourcefile;
  char const *__pyx_v_c_stylesheetfile;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value_ = 0;
  CYTHON_UNUSED PyObject *__pyx_v_py_source_string = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_template_name_str = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_py_output_string = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  char *__pyx_t_11;
  char *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("call_template_returning_file", 0);

  /* "saxonc.pyx":1726
 * 			   print(result)
 *         """
 *         cdef char * c_outputfile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_templateName = NULL
 *         cdef const char * c_sourcefile = NULL
 */
  __pyx_v_c_outputfile = NULL;

  /* "saxonc.pyx":1727
 *         """
 *         cdef char * c_outputfile = NULL
 *         cdef const char * c_templateName = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 */
  __pyx_v_c_templateName = NULL;

  /* "saxonc.pyx":1728
 *         cdef char * c_outputfile = NULL
 *         cdef const char * c_templateName = NULL
 *         cdef const char * c_sourcefile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 */
  __pyx_v_c_sourcefile = NULL;

  /* "saxonc.pyx":1729
 *         cdef const char * c_templateName = NULL
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 */
  __pyx_v_c_stylesheetfile = NULL;

  /* "saxonc.pyx":1730
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None             # <<<<<<<<<<<<<<
 *         py_source_string = None
 *         py_template_name_str = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_value_ = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1731
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":1732
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 *         py_template_name_str = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         py_output_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_template_name_str = Py_None;

  /* "saxonc.pyx":1733
 *         py_source_string = None
 *         py_template_name_str = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         py_output_string = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":1734
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 *         py_output_string = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_output_string = Py_None;

  /* "saxonc.pyx":1735
 *         py_stylesheet_string = None
 *         py_output_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1735, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1735, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1735, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1735, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1735, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1735, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1735, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1735, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1735, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":1736
 *         py_output_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":1737
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1737, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1738
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "output_file":
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1738, __pyx_L1_error)
        __pyx_v_c_sourcefile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1739
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)             # <<<<<<<<<<<<<<
 *             if key == "output_file":
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 */
        __pyx_v_self->thisxptr->setInitialMatchSelectionAsFile(__pyx_v_c_sourcefile);

        /* "saxonc.pyx":1737
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      }

      /* "saxonc.pyx":1740
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "output_file":             # <<<<<<<<<<<<<<
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_output_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1740, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1741
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "output_file":
 *               py_output_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1741, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1741, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __pyx_t_6;
          __pyx_t_6 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_1 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_py_output_string, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1742
 *             if key == "output_file":
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_v_py_output_string); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(1, 1742, __pyx_L1_error)
          __pyx_t_11 = __pyx_t_12;
        } else {
          __pyx_t_11 = ((char *)"");
        }
        __pyx_v_c_outputfile = __pyx_t_11;

        /* "saxonc.pyx":1740
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "output_file":             # <<<<<<<<<<<<<<
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 */
      }

      /* "saxonc.pyx":1743
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1743, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1744
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)             # <<<<<<<<<<<<<<
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1744, __pyx_L1_error)
        __pyx_v_c_stylesheetfile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1743
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 */
      }

      /* "saxonc.pyx":1736
 *         py_output_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":1745
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_value, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1745, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":1746
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":1747
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 * 
 */
        if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue))))) __PYX_ERR(1, 1747, __pyx_L1_error)
        __pyx_t_1 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1748
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)             # <<<<<<<<<<<<<<
 * 
 *         c_templateName = make_c_str(template_name)
 */
        __pyx_v_self->thisxptr->setInitialMatchSelection(__pyx_v_value_->thisvptr);

        /* "saxonc.pyx":1746
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      }

      /* "saxonc.pyx":1745
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":1735
 *         py_stylesheet_string = None
 *         py_output_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":1750
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 * 
 *         c_templateName = make_c_str(template_name)             # <<<<<<<<<<<<<<
 *         self.thisxptr.callTemplateReturningFile(c_stylesheetfile, c_templateName, c_outputfile)
 * 
 */
  __pyx_v_c_templateName = __pyx_f_6saxonc_make_c_str(__pyx_v_template_name);

  /* "saxonc.pyx":1751
 * 
 *         c_templateName = make_c_str(template_name)
 *         self.thisxptr.callTemplateReturningFile(c_stylesheetfile, c_templateName, c_outputfile)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisxptr->callTemplateReturningFile(__pyx_v_c_stylesheetfile, __pyx_v_c_templateName, __pyx_v_c_outputfile);

  /* "saxonc.pyx":1698
 * 
 * 
 *      def call_template_returning_file(self, str template_name=None, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         call_template_returning_file(self, str template_name, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.call_template_returning_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value_);
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_template_name_str);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_py_output_string);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1755
 * 
 * 
 *      def call_function_returning_value(self, str function_name, list args, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         call_function_returning_value(self, str function_name, list args, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_51call_function_returning_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_50call_function_returning_value[] = "\n        call_function_returning_value(self, str function_name, list args, **kwds)\n        Invoke a transformation by calling a named template and return result as an PyXdmValue.\n\n        Args:\n\t\t\tfunction_name(str): The name of the template to invoke. If None is supplied then call the initial-template\n\t\t\tlist args: Pointer array of XdmValue object - he values of the arguments to be supplied to the function.\n            **kwds: Possible optional arguments: source_file (str) or xdm_value (PyXdmValue). Other allowed argument: stylesheet_file (str)\n\n\n\n        Returns:\n            PyXdmValue: Result of the transformation as an PyXdmValue object\n\n\n        Example:\n            1) node = xsltproc.call_function_returning_value(\"{http://localhost/example}func\", stylesheet_file=\"test1.xsl\")\n\n\n            2) xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               value = xsltproc.call_function_returning_value(\"{http://localhost/test}add\", stylesheet_file=\"test1.xsl\")\n\n\n            3) xsltproc.compile_stylesheet(stylesheet_file=\"test2.xsl\")\n\t\t\t   xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               value = xsltproc.call_function_returning_value(\"{http://exmaple.com}func1\")\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_51call_function_returning_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_function_name = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call_function_returning_value (wrapper)", 0);
  __pyx_v_kwds = PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_function_name,&__pyx_n_s_args,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_function_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("call_function_returning_value", 1, 2, 2, 1); __PYX_ERR(1, 1755, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwds, values, pos_args, "call_function_returning_value") < 0)) __PYX_ERR(1, 1755, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_function_name = ((PyObject*)values[0]);
    __pyx_v_args = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("call_function_returning_value", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1755, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwds); __pyx_v_kwds = 0;
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.call_function_returning_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_function_name), (&PyString_Type), 1, "function_name", 1))) __PYX_ERR(1, 1755, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_args), (&PyList_Type), 1, "args", 1))) __PYX_ERR(1, 1755, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_50call_function_returning_value(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_function_name, __pyx_v_args, __pyx_v_kwds);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_50call_function_returning_value(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_function_name, PyObject *__pyx_v_args, PyObject *__pyx_v_kwds) {
  char const *__pyx_v_c_functionName;
  char const *__pyx_v_c_sourcefile;
  char const *__pyx_v_c_stylesheetfile;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value_ = 0;
  CYTHON_UNUSED PyObject *__pyx_v_py_source_string = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_template_name_str = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  int __pyx_v_len_;
  XdmValue **__pyx_v_argumentV;
  Py_ssize_t __pyx_v_x;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_aval = 0;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_nval = 0;
  XdmValue *__pyx_v_xdmValue;
  PyObject *__pyx_v_type_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  XdmValue *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("call_function_returning_value", 0);

  /* "saxonc.pyx":1784
 * 
 *         """
 *         cdef const char * c_functionName = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 */
  __pyx_v_c_functionName = NULL;

  /* "saxonc.pyx":1785
 *         """
 *         cdef const char * c_functionName = NULL
 *         cdef const char * c_sourcefile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 */
  __pyx_v_c_sourcefile = NULL;

  /* "saxonc.pyx":1786
 *         cdef const char * c_functionName = NULL
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 */
  __pyx_v_c_stylesheetfile = NULL;

  /* "saxonc.pyx":1787
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None             # <<<<<<<<<<<<<<
 *         py_source_string = None
 *         py_template_name_str = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_value_ = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1788
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":1789
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 *         py_template_name_str = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_template_name_str = Py_None;

  /* "saxonc.pyx":1790
 *         py_source_string = None
 *         py_template_name_str = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":1791
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1791, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1791, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1791, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1791, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1791, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1791, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1791, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1791, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1791, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1791, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1791, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1791, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":1792
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":1793
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1793, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1794
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1794, __pyx_L1_error)
        __pyx_v_c_sourcefile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1795
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 */
        __pyx_v_self->thisxptr->setInitialMatchSelectionAsFile(__pyx_v_c_sourcefile);

        /* "saxonc.pyx":1793
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      }

      /* "saxonc.pyx":1796
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1796, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1797
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)             # <<<<<<<<<<<<<<
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1797, __pyx_L1_error)
        __pyx_v_c_stylesheetfile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1796
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 */
      }

      /* "saxonc.pyx":1792
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":1798
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_value, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1798, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":1799
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":1800
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef int len_= 0;
 */
        if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue))))) __PYX_ERR(1, 1800, __pyx_L1_error)
        __pyx_t_1 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1801
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)             # <<<<<<<<<<<<<<
 *         cdef int len_= 0;
 *         len_ = len(args)
 */
        __pyx_v_self->thisxptr->setInitialMatchSelection(__pyx_v_value_->thisvptr);

        /* "saxonc.pyx":1799
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      }

      /* "saxonc.pyx":1798
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":1791
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":1802
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef int len_= 0;             # <<<<<<<<<<<<<<
 *         len_ = len(args)
 *         """ TODO handle memory when finished with XdmValues """
 */
  __pyx_v_len_ = 0;

  /* "saxonc.pyx":1803
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef int len_= 0;
 *         len_ = len(args)             # <<<<<<<<<<<<<<
 *         """ TODO handle memory when finished with XdmValues """
 *         cdef saxoncClasses.XdmValue ** argumentV = self.thisxptr.createXdmValueArray(len_)
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1803, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1803, __pyx_L1_error)
  __pyx_v_len_ = __pyx_t_3;

  /* "saxonc.pyx":1805
 *         len_ = len(args)
 *         """ TODO handle memory when finished with XdmValues """
 *         cdef saxoncClasses.XdmValue ** argumentV = self.thisxptr.createXdmValueArray(len_)             # <<<<<<<<<<<<<<
 * 
 *         for x in range(len(args)):
 */
  __pyx_v_argumentV = __pyx_v_self->thisxptr->createXdmValueArray(__pyx_v_len_);

  /* "saxonc.pyx":1807
 *         cdef saxoncClasses.XdmValue ** argumentV = self.thisxptr.createXdmValueArray(len_)
 * 
 *         for x in range(len(args)):             # <<<<<<<<<<<<<<
 *           if isinstance(args[x], PyXdmValue):
 *             value_ = args[x];
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1807, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1807, __pyx_L1_error)
  __pyx_t_11 = __pyx_t_3;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_x = __pyx_t_12;

    /* "saxonc.pyx":1808
 * 
 *         for x in range(len(args)):
 *           if isinstance(args[x], PyXdmValue):             # <<<<<<<<<<<<<<
 *             value_ = args[x];
 *             argumentV[x] = value_.thisvptr
 */
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 1808, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_args, __pyx_v_x, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_TypeCheck(__pyx_t_2, __pyx_ptype_6saxonc_PyXdmValue); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (likely(__pyx_t_10)) {

      /* "saxonc.pyx":1809
 *         for x in range(len(args)):
 *           if isinstance(args[x], PyXdmValue):
 *             value_ = args[x];             # <<<<<<<<<<<<<<
 *             argumentV[x] = value_.thisvptr
 *           else:
 */
      if (unlikely(__pyx_v_args == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 1809, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_args, __pyx_v_x, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1809, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6saxonc_PyXdmValue))))) __PYX_ERR(1, 1809, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "saxonc.pyx":1810
 *           if isinstance(args[x], PyXdmValue):
 *             value_ = args[x];
 *             argumentV[x] = value_.thisvptr             # <<<<<<<<<<<<<<
 *           else:
 *             raise Exception("Argument value at position " , x , " is not an PyXdmValue. The following object found: ", type(args[x]))
 */
      __pyx_t_13 = __pyx_v_value_->thisvptr;
      (__pyx_v_argumentV[__pyx_v_x]) = __pyx_t_13;

      /* "saxonc.pyx":1808
 * 
 *         for x in range(len(args)):
 *           if isinstance(args[x], PyXdmValue):             # <<<<<<<<<<<<<<
 *             value_ = args[x];
 *             argumentV[x] = value_.thisvptr
 */
      goto __pyx_L13;
    }

    /* "saxonc.pyx":1812
 *             argumentV[x] = value_.thisvptr
 *           else:
 *             raise Exception("Argument value at position " , x , " is not an PyXdmValue. The following object found: ", type(args[x]))             # <<<<<<<<<<<<<<
 * 
 *         c_functionName = make_c_str(function_name)
 */
    /*else*/ {
      __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__pyx_v_args == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 1812, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_args, __pyx_v_x, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_kp_s_Argument_value_at_position);
      __Pyx_GIVEREF(__pyx_kp_s_Argument_value_at_position);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_s_Argument_value_at_position);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_is_not_an_PyXdmValue_The_follow);
      __Pyx_GIVEREF(__pyx_kp_s_is_not_an_PyXdmValue_The_follow);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_s_is_not_an_PyXdmValue_The_follow);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_t_1)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_t_1)));
      PyTuple_SET_ITEM(__pyx_t_6, 3, ((PyObject *)Py_TYPE(__pyx_t_1)));
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 1812, __pyx_L1_error)
    }
    __pyx_L13:;
  }

  /* "saxonc.pyx":1814
 *             raise Exception("Argument value at position " , x , " is not an PyXdmValue. The following object found: ", type(args[x]))
 * 
 *         c_functionName = make_c_str(function_name)             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 */
  __pyx_v_c_functionName = __pyx_f_6saxonc_make_c_str(__pyx_v_function_name);

  /* "saxonc.pyx":1815
 * 
 *         c_functionName = make_c_str(function_name)
 *         cdef PyXdmValue val = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1816
 *         c_functionName = make_c_str(function_name)
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_aval = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)Py_None);

  /* "saxonc.pyx":1817
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         xdmValue = self.thisxptr.callFunctionReturningValue(c_stylesheetfile, c_functionName, argumentV, len(args))
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_nval = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":1818
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL             # <<<<<<<<<<<<<<
 *         xdmValue = self.thisxptr.callFunctionReturningValue(c_stylesheetfile, c_functionName, argumentV, len(args))
 * 
 */
  __pyx_v_xdmValue = NULL;

  /* "saxonc.pyx":1819
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         xdmValue = self.thisxptr.callFunctionReturningValue(c_stylesheetfile, c_functionName, argumentV, len(args))             # <<<<<<<<<<<<<<
 * 
 *         if xdmValue is NULL:
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1819, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1819, __pyx_L1_error)
  __pyx_v_xdmValue = __pyx_v_self->thisxptr->callFunctionReturningValue(__pyx_v_c_stylesheetfile, __pyx_v_c_functionName, __pyx_v_argumentV, __pyx_t_3);

  /* "saxonc.pyx":1821
 *         xdmValue = self.thisxptr.callFunctionReturningValue(c_stylesheetfile, c_functionName, argumentV, len(args))
 * 
 *         if xdmValue is NULL:             # <<<<<<<<<<<<<<
 *           return None
 *         cdef type_ = xdmValue.getType()
 */
  __pyx_t_10 = ((__pyx_v_xdmValue == NULL) != 0);
  if (__pyx_t_10) {

    /* "saxonc.pyx":1822
 * 
 *         if xdmValue is NULL:
 *           return None             # <<<<<<<<<<<<<<
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":1821
 *         xdmValue = self.thisxptr.callFunctionReturningValue(c_stylesheetfile, c_functionName, argumentV, len(args))
 * 
 *         if xdmValue is NULL:             # <<<<<<<<<<<<<<
 *           return None
 *         cdef type_ = xdmValue.getType()
 */
  }

  /* "saxonc.pyx":1823
 *         if xdmValue is NULL:
 *           return None
 *         cdef type_ = xdmValue.getType()             # <<<<<<<<<<<<<<
 *         if type_== 4:
 *           aval = PyXdmAtomicValue()
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_xdmValue->getType()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_type_ = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":1824
 *           return None
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:             # <<<<<<<<<<<<<<
 *           aval = PyXdmAtomicValue()
 *           aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1824, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_10) {

    /* "saxonc.pyx":1825
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:
 *           aval = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *           aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *           return aval
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_aval, ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "saxonc.pyx":1826
 *         if type_== 4:
 *           aval = PyXdmAtomicValue()
 *           aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue             # <<<<<<<<<<<<<<
 *           return aval
 *         elif type_ == 3:
 */
    __pyx_v_aval->derivedaptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
    __pyx_v_aval->__pyx_base.derivedptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
    __pyx_v_aval->__pyx_base.__pyx_base.thisvptr = ((XdmAtomicValue *)__pyx_v_xdmValue);

    /* "saxonc.pyx":1827
 *           aval = PyXdmAtomicValue()
 *           aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *           return aval             # <<<<<<<<<<<<<<
 *         elif type_ == 3:
 *           nval = PyXdmNode()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_aval));
    __pyx_r = ((PyObject *)__pyx_v_aval);
    goto __pyx_L0;

    /* "saxonc.pyx":1824
 *           return None
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:             # <<<<<<<<<<<<<<
 *           aval = PyXdmAtomicValue()
 *           aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
  }

  /* "saxonc.pyx":1828
 *           aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *           return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *           nval = PyXdmNode()
 *           nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1828, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_10) {

    /* "saxonc.pyx":1829
 *           return aval
 *         elif type_ == 3:
 *           nval = PyXdmNode()             # <<<<<<<<<<<<<<
 *           nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *           return nval
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_nval, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "saxonc.pyx":1830
 *         elif type_ == 3:
 *           nval = PyXdmNode()
 *           nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue             # <<<<<<<<<<<<<<
 *           return nval
 *         else:
 */
    __pyx_v_nval->derivednptr = ((XdmNode *)__pyx_v_xdmValue);
    __pyx_v_nval->__pyx_base.derivedptr = ((XdmNode *)__pyx_v_xdmValue);
    __pyx_v_nval->__pyx_base.__pyx_base.thisvptr = ((XdmNode *)__pyx_v_xdmValue);

    /* "saxonc.pyx":1831
 *           nval = PyXdmNode()
 *           nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *           return nval             # <<<<<<<<<<<<<<
 *         else:
 *           val = PyXdmValue()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_nval));
    __pyx_r = ((PyObject *)__pyx_v_nval);
    goto __pyx_L0;

    /* "saxonc.pyx":1828
 *           aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *           return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *           nval = PyXdmNode()
 *           nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
  }

  /* "saxonc.pyx":1833
 *           return nval
 *         else:
 *           val = PyXdmValue()             # <<<<<<<<<<<<<<
 *           val.thisvptr = xdmValue
 *           return val
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "saxonc.pyx":1834
 *         else:
 *           val = PyXdmValue()
 *           val.thisvptr = xdmValue             # <<<<<<<<<<<<<<
 *           return val
 * 
 */
    __pyx_v_val->thisvptr = __pyx_v_xdmValue;

    /* "saxonc.pyx":1835
 *           val = PyXdmValue()
 *           val.thisvptr = xdmValue
 *           return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;
  }

  /* "saxonc.pyx":1755
 * 
 * 
 *      def call_function_returning_value(self, str function_name, list args, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         call_function_returning_value(self, str function_name, list args, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.call_function_returning_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value_);
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_template_name_str);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XDECREF((PyObject *)__pyx_v_aval);
  __Pyx_XDECREF((PyObject *)__pyx_v_nval);
  __Pyx_XDECREF(__pyx_v_type_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1839
 * 
 * 
 *      def call_function_returning_string(self, str function_name, list args, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         call_function_returning_string(self, str function_name, list args, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_53call_function_returning_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_52call_function_returning_string[] = "\n        call_function_returning_string(self, str function_name, list args, **kwds)\n        Invoke a transformation by calling a named template and return result as a serialized string.\n\n        Args:\n\t\t\tfunction_name(str): The name of the template to invoke. If None is supplied then call the initial-template\n\t\t\tlist args: Pointer array of XdmValue object - he values of the arguments to be supplied to the function.\n            **kwds: Possible optional arguments: source_file (str) or xdm_value (PyXdmValue). Other allowed argument: stylesheet_file (str)\n\n\n\n        Returns:\n            str: Result of the transformation as an str value\n\n\n        Example:\n            1) result = xsltproc.call_function_returning_string(\"{http://localhost/example}func\", stylesheet_file=\"test1.xsl\")\n\n\n            2) xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               result = xsltproc.call_function_returning_string(\"{http://localhost/test}add\", stylesheet_file=\"test1.xsl\")\n\n\n            3) xsltproc.compile_stylesheet(stylesheet_file=\"test2.xsl\")\n\t\t\t   xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               result = xsltproc.call_function_returning_string(\"{http://exmaple.com}func1\")\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_53call_function_returning_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_function_name = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call_function_returning_string (wrapper)", 0);
  __pyx_v_kwds = PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_function_name,&__pyx_n_s_args,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_function_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("call_function_returning_string", 1, 2, 2, 1); __PYX_ERR(1, 1839, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwds, values, pos_args, "call_function_returning_string") < 0)) __PYX_ERR(1, 1839, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_function_name = ((PyObject*)values[0]);
    __pyx_v_args = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("call_function_returning_string", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1839, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwds); __pyx_v_kwds = 0;
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.call_function_returning_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_function_name), (&PyString_Type), 1, "function_name", 1))) __PYX_ERR(1, 1839, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_args), (&PyList_Type), 1, "args", 1))) __PYX_ERR(1, 1839, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_52call_function_returning_string(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_function_name, __pyx_v_args, __pyx_v_kwds);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_52call_function_returning_string(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_function_name, PyObject *__pyx_v_args, PyObject *__pyx_v_kwds) {
  char const *__pyx_v_c_functionName;
  char const *__pyx_v_c_sourcefile;
  char const *__pyx_v_c_stylesheetfile;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value_ = 0;
  CYTHON_UNUSED PyObject *__pyx_v_py_source_string = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_template_name_str = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  int __pyx_v__len;
  XdmValue **__pyx_v_argumentV;
  Py_ssize_t __pyx_v_x;
  CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_aval = 0;
  CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_nval = 0;
  CYTHON_UNUSED XdmValue *__pyx_v_xdmValue;
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  XdmValue *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("call_function_returning_string", 0);

  /* "saxonc.pyx":1868
 * 
 *         """
 *         cdef const char * c_functionName = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 */
  __pyx_v_c_functionName = NULL;

  /* "saxonc.pyx":1869
 *         """
 *         cdef const char * c_functionName = NULL
 *         cdef const char * c_sourcefile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 */
  __pyx_v_c_sourcefile = NULL;

  /* "saxonc.pyx":1870
 *         cdef const char * c_functionName = NULL
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 */
  __pyx_v_c_stylesheetfile = NULL;

  /* "saxonc.pyx":1871
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None             # <<<<<<<<<<<<<<
 *         py_source_string = None
 *         py_template_name_str = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_value_ = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1872
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":1873
 *         cdef PyXdmValue value_ = None
 *         py_source_string = None
 *         py_template_name_str = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_template_name_str = Py_None;

  /* "saxonc.pyx":1874
 *         py_source_string = None
 *         py_template_name_str = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":1875
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1875, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1875, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1875, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1875, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1875, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1875, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1875, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1875, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1875, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1875, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1875, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1875, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":1876
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":1877
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1877, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1878
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1878, __pyx_L1_error)
        __pyx_v_c_sourcefile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1879
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 */
        __pyx_v_self->thisxptr->setInitialMatchSelectionAsFile(__pyx_v_c_sourcefile);

        /* "saxonc.pyx":1877
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      }

      /* "saxonc.pyx":1880
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *               if isfile(value) == False:
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1880, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1881
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)             # <<<<<<<<<<<<<<
 *               if isfile(value) == False:
 *                 raise Exception("Stylesheet file does not exist")
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1881, __pyx_L1_error)
        __pyx_v_c_stylesheetfile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1882
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *               if isfile(value) == False:             # <<<<<<<<<<<<<<
 *                 raise Exception("Stylesheet file does not exist")
 *           elif key == "xdm_value":
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_isfile); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1882, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_value);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1882, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1882, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1882, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(__pyx_t_10)) {

          /* "saxonc.pyx":1883
 *               c_stylesheetfile = make_c_str(value)
 *               if isfile(value) == False:
 *                 raise Exception("Stylesheet file does not exist")             # <<<<<<<<<<<<<<
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 */
          __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1883, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_Raise(__pyx_t_6, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __PYX_ERR(1, 1883, __pyx_L1_error)

          /* "saxonc.pyx":1882
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *               if isfile(value) == False:             # <<<<<<<<<<<<<<
 *                 raise Exception("Stylesheet file does not exist")
 *           elif key == "xdm_value":
 */
        }

        /* "saxonc.pyx":1880
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *               if isfile(value) == False:
 */
      }

      /* "saxonc.pyx":1876
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":1884
 *               if isfile(value) == False:
 *                 raise Exception("Stylesheet file does not exist")
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_value, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1884, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":1885
 *                 raise Exception("Stylesheet file does not exist")
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":1886
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef int _len = len(args)
 */
        if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue))))) __PYX_ERR(1, 1886, __pyx_L1_error)
        __pyx_t_6 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_DECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_6));
        __pyx_t_6 = 0;

        /* "saxonc.pyx":1887
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)             # <<<<<<<<<<<<<<
 *         cdef int _len = len(args)
 *         """ TODO handle memory when finished with XdmValues """
 */
        __pyx_v_self->thisxptr->setInitialMatchSelection(__pyx_v_value_->thisvptr);

        /* "saxonc.pyx":1885
 *                 raise Exception("Stylesheet file does not exist")
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      }

      /* "saxonc.pyx":1884
 *               if isfile(value) == False:
 *                 raise Exception("Stylesheet file does not exist")
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":1875
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":1888
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef int _len = len(args)             # <<<<<<<<<<<<<<
 *         """ TODO handle memory when finished with XdmValues """
 *         cdef saxoncClasses.XdmValue ** argumentV = self.thisxptr.createXdmValueArray(_len)
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1888, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1888, __pyx_L1_error)
  __pyx_v__len = __pyx_t_3;

  /* "saxonc.pyx":1890
 *         cdef int _len = len(args)
 *         """ TODO handle memory when finished with XdmValues """
 *         cdef saxoncClasses.XdmValue ** argumentV = self.thisxptr.createXdmValueArray(_len)             # <<<<<<<<<<<<<<
 * 
 *         for x in range(len(args)):
 */
  __pyx_v_argumentV = __pyx_v_self->thisxptr->createXdmValueArray(__pyx_v__len);

  /* "saxonc.pyx":1892
 *         cdef saxoncClasses.XdmValue ** argumentV = self.thisxptr.createXdmValueArray(_len)
 * 
 *         for x in range(len(args)):             # <<<<<<<<<<<<<<
 *           if isinstance(args[x], PyXdmValue):
 *             value_ = args[x]
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1892, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1892, __pyx_L1_error)
  __pyx_t_11 = __pyx_t_3;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_x = __pyx_t_12;

    /* "saxonc.pyx":1893
 * 
 *         for x in range(len(args)):
 *           if isinstance(args[x], PyXdmValue):             # <<<<<<<<<<<<<<
 *             value_ = args[x]
 *             argumentV[x] = value_.thisvptr
 */
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 1893, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_args, __pyx_v_x, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_TypeCheck(__pyx_t_2, __pyx_ptype_6saxonc_PyXdmValue); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (likely(__pyx_t_10)) {

      /* "saxonc.pyx":1894
 *         for x in range(len(args)):
 *           if isinstance(args[x], PyXdmValue):
 *             value_ = args[x]             # <<<<<<<<<<<<<<
 *             argumentV[x] = value_.thisvptr
 *           else:
 */
      if (unlikely(__pyx_v_args == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 1894, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_args, __pyx_v_x, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6saxonc_PyXdmValue))))) __PYX_ERR(1, 1894, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "saxonc.pyx":1895
 *           if isinstance(args[x], PyXdmValue):
 *             value_ = args[x]
 *             argumentV[x] = value_.thisvptr             # <<<<<<<<<<<<<<
 *           else:
 *             raise Exception("Argument value at position ",x," is not an PyXdmValue")
 */
      __pyx_t_13 = __pyx_v_value_->thisvptr;
      (__pyx_v_argumentV[__pyx_v_x]) = __pyx_t_13;

      /* "saxonc.pyx":1893
 * 
 *         for x in range(len(args)):
 *           if isinstance(args[x], PyXdmValue):             # <<<<<<<<<<<<<<
 *             value_ = args[x]
 *             argumentV[x] = value_.thisvptr
 */
      goto __pyx_L14;
    }

    /* "saxonc.pyx":1897
 *             argumentV[x] = value_.thisvptr
 *           else:
 *             raise Exception("Argument value at position ",x," is not an PyXdmValue")             # <<<<<<<<<<<<<<
 * 
 *         c_functionName = make_c_str(function_name)
 */
    /*else*/ {
      __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_kp_s_Argument_value_at_position);
      __Pyx_GIVEREF(__pyx_kp_s_Argument_value_at_position);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_s_Argument_value_at_position);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_is_not_an_PyXdmValue);
      __Pyx_GIVEREF(__pyx_kp_s_is_not_an_PyXdmValue);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_s_is_not_an_PyXdmValue);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 1897, __pyx_L1_error)
    }
    __pyx_L14:;
  }

  /* "saxonc.pyx":1899
 *             raise Exception("Argument value at position ",x," is not an PyXdmValue")
 * 
 *         c_functionName = make_c_str(function_name)             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 */
  __pyx_v_c_functionName = __pyx_f_6saxonc_make_c_str(__pyx_v_function_name);

  /* "saxonc.pyx":1900
 * 
 *         c_functionName = make_c_str(function_name)
 *         cdef PyXdmValue val = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1901
 *         c_functionName = make_c_str(function_name)
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_aval = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)Py_None);

  /* "saxonc.pyx":1902
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         cdef const char* c_string = self.thisxptr.callFunctionReturningString(c_stylesheetfile, c_functionName, argumentV, len(args))
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_nval = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":1903
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL             # <<<<<<<<<<<<<<
 *         cdef const char* c_string = self.thisxptr.callFunctionReturningString(c_stylesheetfile, c_functionName, argumentV, len(args))
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 */
  __pyx_v_xdmValue = NULL;

  /* "saxonc.pyx":1904
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         cdef const char* c_string = self.thisxptr.callFunctionReturningString(c_stylesheetfile, c_functionName, argumentV, len(args))             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1904, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1904, __pyx_L1_error)
  __pyx_v_c_string = __pyx_v_self->thisxptr->callFunctionReturningString(__pyx_v_c_stylesheetfile, __pyx_v_c_functionName, __pyx_v_argumentV, __pyx_t_3);

  /* "saxonc.pyx":1905
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         cdef const char* c_string = self.thisxptr.callFunctionReturningString(c_stylesheetfile, c_functionName, argumentV, len(args))
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_6 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":1906
 *         cdef const char* c_string = self.thisxptr.callFunctionReturningString(c_stylesheetfile, c_functionName, argumentV, len(args))
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":1839
 * 
 * 
 *      def call_function_returning_string(self, str function_name, list args, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         call_function_returning_string(self, str function_name, list args, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.call_function_returning_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value_);
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_template_name_str);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XDECREF((PyObject *)__pyx_v_aval);
  __Pyx_XDECREF((PyObject *)__pyx_v_nval);
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1909
 * 
 * 
 *      def call_function_returning_file(self, str function_name, list args, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         call_function_returning_file(self, str function_name, list args, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_55call_function_returning_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_54call_function_returning_file[] = "\n        call_function_returning_file(self, str function_name, list args, **kwds)\n        Invoke a transformation by calling a named template and return result as an PyXdmValue.\n\n        Args:\n\t\t\tfunction_name(str): The name of the template to invoke. If None is supplied \n                        then call the initial-template\n\t\t\tlist args: Pointer array of XdmValue object - he values of the arguments to be supplied to the function.\n            **kwds: Possible optional arguments: source_file (str) or xdm_value (PyXdmValue). Other allowed argument: stylesheet_file (str)\n\n\n\n        Returns:\n            PyXdmValue: Result of the transformation as an PyXdmValue object\n\n\n        Example:\n            1)  xsltproc.set_output_file(\"result.xml\")\n\t\t\t\txsltproc.call_function_returning_file(\"{http://localhost/example}func\", stylesheet_file=\"test1.xsl\")\n\n\n            2) xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               xsltproc.call_function_returning_file(\"{http://localhost/test}add\", stylesheet_file=\"test1.xsl\", output_file=\"result.xml\")\n\n\n            3) xsltproc.compile_stylesheet(stylesheet_file=\"test2.xsl\")\n\t\t\t   xsltproc.set_initial_match_selection(file_name=\"cat.xml\")\r\n               xsltproc.call_function_returning_file(\"{http://exmaple.com}func1\", output_file=\"result.xml\")\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_55call_function_returning_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_function_name = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("call_function_returning_file (wrapper)", 0);
  __pyx_v_kwds = PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_function_name,&__pyx_n_s_args,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_function_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("call_function_returning_file", 1, 2, 2, 1); __PYX_ERR(1, 1909, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwds, values, pos_args, "call_function_returning_file") < 0)) __PYX_ERR(1, 1909, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_function_name = ((PyObject*)values[0]);
    __pyx_v_args = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("call_function_returning_file", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1909, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwds); __pyx_v_kwds = 0;
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.call_function_returning_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_function_name), (&PyString_Type), 1, "function_name", 1))) __PYX_ERR(1, 1909, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_args), (&PyList_Type), 1, "args", 1))) __PYX_ERR(1, 1909, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_54call_function_returning_file(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_function_name, __pyx_v_args, __pyx_v_kwds);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_54call_function_returning_file(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_function_name, PyObject *__pyx_v_args, PyObject *__pyx_v_kwds) {
  char const *__pyx_v_c_functionName;
  char const *__pyx_v_c_sourcefile;
  char const *__pyx_v_c_outputfile;
  char const *__pyx_v_c_stylesheetfile;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value_ = 0;
  CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_valueArgs_ = 0;
  CYTHON_UNUSED PyObject *__pyx_v_py_source_string = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_template_name_str = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_py_stylesheet_string = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_py_output_string = NULL;
  int __pyx_v__len;
  XdmValue **__pyx_v_argumentV;
  Py_ssize_t __pyx_v_x;
  CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_aval = 0;
  CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_nval = 0;
  CYTHON_UNUSED XdmValue *__pyx_v_xdmValue;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  char const *__pyx_t_11;
  char const *__pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  XdmValue *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("call_function_returning_file", 0);

  /* "saxonc.pyx":1940
 * 
 *         """
 *         cdef const char * c_functionName = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_outputfile = NULL
 */
  __pyx_v_c_functionName = NULL;

  /* "saxonc.pyx":1941
 *         """
 *         cdef const char * c_functionName = NULL
 *         cdef const char * c_sourcefile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_outputfile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 */
  __pyx_v_c_sourcefile = NULL;

  /* "saxonc.pyx":1942
 *         cdef const char * c_functionName = NULL
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_outputfile = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 */
  __pyx_v_c_outputfile = NULL;

  /* "saxonc.pyx":1943
 *         cdef const char * c_sourcefile = NULL
 *         cdef const char * c_outputfile = NULL
 *         cdef const char * c_stylesheetfile = NULL             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue value_ = None
 *         cdef PyXdmValue valueArgs_ = None
 */
  __pyx_v_c_stylesheetfile = NULL;

  /* "saxonc.pyx":1944
 *         cdef const char * c_outputfile = NULL
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue valueArgs_ = None
 *         py_source_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_value_ = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1945
 *         cdef const char * c_stylesheetfile = NULL
 *         cdef PyXdmValue value_ = None
 *         cdef PyXdmValue valueArgs_ = None             # <<<<<<<<<<<<<<
 *         py_source_string = None
 *         py_template_name_str = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_valueArgs_ = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1946
 *         cdef PyXdmValue value_ = None
 *         cdef PyXdmValue valueArgs_ = None
 *         py_source_string = None             # <<<<<<<<<<<<<<
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_source_string = Py_None;

  /* "saxonc.pyx":1947
 *         cdef PyXdmValue valueArgs_ = None
 *         py_source_string = None
 *         py_template_name_str = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_template_name_str = Py_None;

  /* "saxonc.pyx":1948
 *         py_source_string = None
 *         py_template_name_str = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":1949
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1949, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1949, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1949, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1949, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1949, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1949, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1949, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1949, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1949, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1949, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1949, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1949, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "saxonc.pyx":1950
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
    __pyx_t_9 = PyString_Check(__pyx_v_value); 
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "saxonc.pyx":1951
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_source_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1951, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1952
 *           if isinstance(value, str):
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "output_file":
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1952, __pyx_L1_error)
        __pyx_v_c_sourcefile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1953
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)             # <<<<<<<<<<<<<<
 *             if key == "output_file":
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 */
        __pyx_v_self->thisxptr->setInitialMatchSelectionAsFile(__pyx_v_c_sourcefile);

        /* "saxonc.pyx":1951
 *         for key, value in kwds.items():
 *           if isinstance(value, str):
 *             if key == "source_file":             # <<<<<<<<<<<<<<
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 */
      }

      /* "saxonc.pyx":1954
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "output_file":             # <<<<<<<<<<<<<<
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_output_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1954, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1955
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "output_file":
 *               py_output_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1955, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1955, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __pyx_t_6;
          __pyx_t_6 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_1 = Py_None;
        }
        __Pyx_XDECREF_SET(__pyx_v_py_output_string, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "saxonc.pyx":1956
 *             if key == "output_file":
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""             # <<<<<<<<<<<<<<
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 */
        __pyx_t_10 = (__pyx_v_value != Py_None);
        if ((__pyx_t_10 != 0)) {
          __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_v_py_output_string); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(1, 1956, __pyx_L1_error)
          __pyx_t_11 = __pyx_t_12;
        } else {
          __pyx_t_11 = ((char const *)"");
        }
        __pyx_v_c_outputfile = __pyx_t_11;

        /* "saxonc.pyx":1954
 *               c_sourcefile = make_c_str(value)
 *               self.thisxptr.setInitialMatchSelectionAsFile(c_sourcefile)
 *             if key == "output_file":             # <<<<<<<<<<<<<<
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 */
      }

      /* "saxonc.pyx":1957
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *               if isfile(value) == False:
 */
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stylesheet_file, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1957, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "saxonc.pyx":1958
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)             # <<<<<<<<<<<<<<
 *               if isfile(value) == False:
 *                 raise Exception("Stylesheet file does not exist")
 */
        if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 1958, __pyx_L1_error)
        __pyx_v_c_stylesheetfile = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

        /* "saxonc.pyx":1959
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *               if isfile(value) == False:             # <<<<<<<<<<<<<<
 *                 raise Exception("Stylesheet file does not exist")
 *           elif key == "xdm_value":
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_isfile); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1959, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_value);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1959, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1959, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1959, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(__pyx_t_10)) {

          /* "saxonc.pyx":1960
 *               c_stylesheetfile = make_c_str(value)
 *               if isfile(value) == False:
 *                 raise Exception("Stylesheet file does not exist")             # <<<<<<<<<<<<<<
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 */
          __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1960, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_Raise(__pyx_t_6, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __PYX_ERR(1, 1960, __pyx_L1_error)

          /* "saxonc.pyx":1959
 *             if key == "stylesheet_file":
 *               c_stylesheetfile = make_c_str(value)
 *               if isfile(value) == False:             # <<<<<<<<<<<<<<
 *                 raise Exception("Stylesheet file does not exist")
 *           elif key == "xdm_value":
 */
        }

        /* "saxonc.pyx":1957
 *               py_output_string = value.encode('UTF-8') if value is not None else None
 *               c_outputfile = py_output_string if value is not None else ""
 *             if key == "stylesheet_file":             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = make_c_str(value)
 *               if isfile(value) == False:
 */
      }

      /* "saxonc.pyx":1950
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():
 *           if isinstance(value, str):             # <<<<<<<<<<<<<<
 *             if key == "source_file":
 *               c_sourcefile = make_c_str(value)
 */
      goto __pyx_L7;
    }

    /* "saxonc.pyx":1961
 *               if isfile(value) == False:
 *                 raise Exception("Stylesheet file does not exist")
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_xdm_value, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1961, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "saxonc.pyx":1962
 *                 raise Exception("Stylesheet file does not exist")
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue); 
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "saxonc.pyx":1963
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;             # <<<<<<<<<<<<<<
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef int _len = len(args)
 */
        if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6saxonc_PyXdmValue))))) __PYX_ERR(1, 1963, __pyx_L1_error)
        __pyx_t_6 = __pyx_v_value;
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_DECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_6));
        __pyx_t_6 = 0;

        /* "saxonc.pyx":1964
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)             # <<<<<<<<<<<<<<
 *         cdef int _len = len(args)
 *         """ TODO handle memory when finished with XdmValues """
 */
        __pyx_v_self->thisxptr->setInitialMatchSelection(__pyx_v_value_->thisvptr);

        /* "saxonc.pyx":1962
 *                 raise Exception("Stylesheet file does not exist")
 *           elif key == "xdm_value":
 *             if isinstance(value, PyXdmValue):             # <<<<<<<<<<<<<<
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 */
      }

      /* "saxonc.pyx":1961
 *               if isfile(value) == False:
 *                 raise Exception("Stylesheet file does not exist")
 *           elif key == "xdm_value":             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyXdmValue):
 *               value_ = value;
 */
    }
    __pyx_L7:;

    /* "saxonc.pyx":1949
 *         py_template_name_str = None
 *         py_stylesheet_string = None
 *         for key, value in kwds.items():             # <<<<<<<<<<<<<<
 *           if isinstance(value, str):
 *             if key == "source_file":
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":1965
 *               value_ = value;
 *               self.thisxptr.setInitialMatchSelection(value_.thisvptr)
 *         cdef int _len = len(args)             # <<<<<<<<<<<<<<
 *         """ TODO handle memory when finished with XdmValues """
 *         cdef saxoncClasses.XdmValue ** argumentV = self.thisxptr.createXdmValueArray(_len)
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1965, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1965, __pyx_L1_error)
  __pyx_v__len = __pyx_t_3;

  /* "saxonc.pyx":1967
 *         cdef int _len = len(args)
 *         """ TODO handle memory when finished with XdmValues """
 *         cdef saxoncClasses.XdmValue ** argumentV = self.thisxptr.createXdmValueArray(_len)             # <<<<<<<<<<<<<<
 * 
 *         for x in range(len(args)):
 */
  __pyx_v_argumentV = __pyx_v_self->thisxptr->createXdmValueArray(__pyx_v__len);

  /* "saxonc.pyx":1969
 *         cdef saxoncClasses.XdmValue ** argumentV = self.thisxptr.createXdmValueArray(_len)
 * 
 *         for x in range(len(args)):             # <<<<<<<<<<<<<<
 *           if isinstance(args[x], PyXdmValue):
 *             value_ = args[x]
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1969, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1969, __pyx_L1_error)
  __pyx_t_13 = __pyx_t_3;
  for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
    __pyx_v_x = __pyx_t_14;

    /* "saxonc.pyx":1970
 * 
 *         for x in range(len(args)):
 *           if isinstance(args[x], PyXdmValue):             # <<<<<<<<<<<<<<
 *             value_ = args[x]
 *             argumentV[x] = value_.thisvptr
 */
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 1970, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_args, __pyx_v_x, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_TypeCheck(__pyx_t_2, __pyx_ptype_6saxonc_PyXdmValue); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (likely(__pyx_t_10)) {

      /* "saxonc.pyx":1971
 *         for x in range(len(args)):
 *           if isinstance(args[x], PyXdmValue):
 *             value_ = args[x]             # <<<<<<<<<<<<<<
 *             argumentV[x] = value_.thisvptr
 *           else:
 */
      if (unlikely(__pyx_v_args == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 1971, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_args, __pyx_v_x, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1971, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6saxonc_PyXdmValue))))) __PYX_ERR(1, 1971, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_value_, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "saxonc.pyx":1972
 *           if isinstance(args[x], PyXdmValue):
 *             value_ = args[x]
 *             argumentV[x] = value_.thisvptr             # <<<<<<<<<<<<<<
 *           else:
 *             raise Exception("Argument value at position ",x," is not an PyXdmValue")
 */
      __pyx_t_15 = __pyx_v_value_->thisvptr;
      (__pyx_v_argumentV[__pyx_v_x]) = __pyx_t_15;

      /* "saxonc.pyx":1970
 * 
 *         for x in range(len(args)):
 *           if isinstance(args[x], PyXdmValue):             # <<<<<<<<<<<<<<
 *             value_ = args[x]
 *             argumentV[x] = value_.thisvptr
 */
      goto __pyx_L15;
    }

    /* "saxonc.pyx":1974
 *             argumentV[x] = value_.thisvptr
 *           else:
 *             raise Exception("Argument value at position ",x," is not an PyXdmValue")             # <<<<<<<<<<<<<<
 * 
 *         c_functionName = make_c_str(function_name)
 */
    /*else*/ {
      __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_kp_s_Argument_value_at_position);
      __Pyx_GIVEREF(__pyx_kp_s_Argument_value_at_position);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_s_Argument_value_at_position);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_is_not_an_PyXdmValue);
      __Pyx_GIVEREF(__pyx_kp_s_is_not_an_PyXdmValue);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_s_is_not_an_PyXdmValue);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 1974, __pyx_L1_error)
    }
    __pyx_L15:;
  }

  /* "saxonc.pyx":1976
 *             raise Exception("Argument value at position ",x," is not an PyXdmValue")
 * 
 *         c_functionName = make_c_str(function_name)             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 */
  __pyx_v_c_functionName = __pyx_f_6saxonc_make_c_str(__pyx_v_function_name);

  /* "saxonc.pyx":1977
 * 
 *         c_functionName = make_c_str(function_name)
 *         cdef PyXdmValue val = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":1978
 *         c_functionName = make_c_str(function_name)
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_aval = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)Py_None);

  /* "saxonc.pyx":1979
 *         cdef PyXdmValue val = None
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         self.thisxptr.callFunctionReturningFile(c_stylesheetfile, c_functionName, argumentV, len(args), c_outputfile)
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_nval = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":1980
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL             # <<<<<<<<<<<<<<
 *         self.thisxptr.callFunctionReturningFile(c_stylesheetfile, c_functionName, argumentV, len(args), c_outputfile)
 * 
 */
  __pyx_v_xdmValue = NULL;

  /* "saxonc.pyx":1981
 *         cdef PyXdmNode nval = None
 *         cdef saxoncClasses.XdmValue * xdmValue = NULL
 *         self.thisxptr.callFunctionReturningFile(c_stylesheetfile, c_functionName, argumentV, len(args), c_outputfile)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1981, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1981, __pyx_L1_error)
  __pyx_v_self->thisxptr->callFunctionReturningFile(__pyx_v_c_stylesheetfile, __pyx_v_c_functionName, __pyx_v_argumentV, __pyx_t_3, __pyx_v_c_outputfile);

  /* "saxonc.pyx":1909
 * 
 * 
 *      def call_function_returning_file(self, str function_name, list args, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         call_function_returning_file(self, str function_name, list args, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.call_function_returning_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value_);
  __Pyx_XDECREF((PyObject *)__pyx_v_valueArgs_);
  __Pyx_XDECREF(__pyx_v_py_source_string);
  __Pyx_XDECREF(__pyx_v_py_template_name_str);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_py_output_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XDECREF((PyObject *)__pyx_v_aval);
  __Pyx_XDECREF((PyObject *)__pyx_v_nval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1984
 * 
 * 
 *      def add_package(self, *file_names):             # <<<<<<<<<<<<<<
 *         """
 *         add_package(self, file_name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_57add_package(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_56add_package[] = "\n        add_package(self, file_name)\n        Add an XSLT 3.0 package to the library.\n\n        Args:\n            file_name (str): The file name of the XSLT package\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_57add_package(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_file_names = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_package (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_package", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_file_names = __pyx_args;
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_56add_package(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_file_names);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_file_names);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_56add_package(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_file_names) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_package", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":1997
 *         """TODO: add addPackages on array of file names self.thisxptr.addPackages(c_string)"""
 * 
 *      def clearPackages(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_packages(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_59clearPackages(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_58clearPackages[] = "\n        clear_packages(self)\n        Clear saved XSLT 3.0 package in the library.\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_59clearPackages(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clearPackages (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_58clearPackages(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_58clearPackages(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clearPackages", 0);

  /* "saxonc.pyx":2003
 * 
 *         """
 *         self.thisxptr.clearPackages()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisxptr->clearPackages();

  /* "saxonc.pyx":1997
 *         """TODO: add addPackages on array of file names self.thisxptr.addPackages(c_string)"""
 * 
 *      def clearPackages(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_packages(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2007
 * 
 * 
 *      def compile_stylesheet(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         compile_stylesheet(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_61compile_stylesheet(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_60compile_stylesheet[] = "\n        compile_stylesheet(self, **kwds)\n        Compile a stylesheet  received as text, uri or as a node object. The compiled stylesheet \n        is cached and available for execution later. It is also possible to save the compiled \n        stylesheet (SEF file) given the option 'save' and 'output_file'.\n\n        Get the stylesheet associated via the xml-stylesheet processing instruction (see\n        http://www.w3.org/TR/xml-stylesheet/) with the document\n        document specified in the source parameter, and that match\n        the given criteria.  If there are several suitable xml-stylesheet\n        processing instructions, then the returned Source will identify\n        a synthesized stylesheet module that imports all the referenced\n        stylesheet module.\n\n        Args:\n            **kwds: Possible keyword arguments stylesheet_text (str), stylesheet_file (str), \n            associated_file (str) or stylsheet_node (PyXdmNode). Also possible to add the options \n            save (boolean) and output_file, which creates an exported stylesheet to file (SEF).\n\n        Example:\n            1. xsltproc.compile_stylesheet(stylesheet_text=\"<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='2.0'>\n                                             <xsl:param name='values' select='(2,3,4)' /><xsl:output method='xml' indent='yes' />\n                                             <xsl:template match='*'><output><xsl:value-of select='//person[1]'/>\n                                             <xsl:for-each select='$values' >\n                                               <out><xsl:value-of select='. * 3'/></out>\n                                             </xsl:for-each></output></xsl:template></xsl:stylesheet>\")\n\n            2. xsltproc.compile_stylesheet(stylesheet_file=\"test1.xsl\", save=True, output_file=\"test1.sef\")\n            3. xsltproc.compile(associated_file=\"foo.xml\")  \n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_61compile_stylesheet(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compile_stylesheet (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("compile_stylesheet", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "compile_stylesheet", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_60compile_stylesheet(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_60compile_stylesheet(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_py_error_message = NULL;
  char *__pyx_v_c_outputfile;
  char *__pyx_v_c_stylesheet;
  PyObject *__pyx_v_py_output_string = NULL;
  PyObject *__pyx_v_py_stylesheet_string = NULL;
  CYTHON_UNUSED int __pyx_v_py_save;
  CYTHON_UNUSED int __pyx_v_option;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_py_xdmNode = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  char *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compile_stylesheet", 0);

  /* "saxonc.pyx":2038
 *             3. xsltproc.compile(associated_file="foo.xml")
 *         """
 *         py_error_message = "CompileStylesheet should only be one of the keyword option: (associated_file|stylesheet_text|stylesheet_file|stylesheet_node), also in allowed in addition the optional keyword 'save' boolean with the keyword 'outputfile' keyword"             # <<<<<<<<<<<<<<
 *         if len(kwds) >3:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(__pyx_kp_s_CompileStylesheet_should_only_be_2);
  __pyx_v_py_error_message = __pyx_kp_s_CompileStylesheet_should_only_be_2;

  /* "saxonc.pyx":2039
 *         """
 *         py_error_message = "CompileStylesheet should only be one of the keyword option: (associated_file|stylesheet_text|stylesheet_file|stylesheet_node), also in allowed in addition the optional keyword 'save' boolean with the keyword 'outputfile' keyword"
 *         if len(kwds) >3:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef char * c_outputfile
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2039, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 > 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":2040
 *         py_error_message = "CompileStylesheet should only be one of the keyword option: (associated_file|stylesheet_text|stylesheet_file|stylesheet_node), also in allowed in addition the optional keyword 'save' boolean with the keyword 'outputfile' keyword"
 *         if len(kwds) >3:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         cdef char * c_outputfile
 *         cdef char * c_stylesheet
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2040, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2040, __pyx_L1_error)

    /* "saxonc.pyx":2039
 *         """
 *         py_error_message = "CompileStylesheet should only be one of the keyword option: (associated_file|stylesheet_text|stylesheet_file|stylesheet_node), also in allowed in addition the optional keyword 'save' boolean with the keyword 'outputfile' keyword"
 *         if len(kwds) >3:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef char * c_outputfile
 */
  }

  /* "saxonc.pyx":2043
 *         cdef char * c_outputfile
 *         cdef char * c_stylesheet
 *         py_output_string = None             # <<<<<<<<<<<<<<
 *         py_stylesheet_string = None
 *         py_save = False
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_output_string = Py_None;

  /* "saxonc.pyx":2044
 *         cdef char * c_stylesheet
 *         py_output_string = None
 *         py_stylesheet_string = None             # <<<<<<<<<<<<<<
 *         py_save = False
 *         cdef int option = 0
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_stylesheet_string = Py_None;

  /* "saxonc.pyx":2045
 *         py_output_string = None
 *         py_stylesheet_string = None
 *         py_save = False             # <<<<<<<<<<<<<<
 *         cdef int option = 0
 *         cdef PyXdmNode py_xdmNode = None
 */
  __pyx_v_py_save = 0;

  /* "saxonc.pyx":2046
 *         py_stylesheet_string = None
 *         py_save = False
 *         cdef int option = 0             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode py_xdmNode = None
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:
 */
  __pyx_v_option = 0;

  /* "saxonc.pyx":2047
 *         py_save = False
 *         cdef int option = 0
 *         cdef PyXdmNode py_xdmNode = None             # <<<<<<<<<<<<<<
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_xdmNode = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":2048
 *         cdef int option = 0
 *         cdef PyXdmNode py_xdmNode = None
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:
 */
  __pyx_t_3 = __Pyx_PyDict_Keys(__pyx_v_kwds); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PySet_Add(__pyx_t_4, __pyx_n_s_stylesheet_text) < 0) __PYX_ERR(1, 2048, __pyx_L1_error)
  if (PySet_Add(__pyx_t_4, __pyx_n_s_stylesheet_file) < 0) __PYX_ERR(1, 2048, __pyx_L1_error)
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":2049
 *         cdef PyXdmNode py_xdmNode = None
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:
 *           raise Exception(py_error_message)
 */
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 2049, __pyx_L1_error)

    /* "saxonc.pyx":2048
 *         cdef int option = 0
 *         cdef PyXdmNode py_xdmNode = None
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:
 */
  }

  /* "saxonc.pyx":2050
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_node", "stylesheet_file"}:
 */
  __pyx_t_5 = __Pyx_PyDict_Keys(__pyx_v_kwds); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PySet_Add(__pyx_t_4, __pyx_n_s_stylesheet_text) < 0) __PYX_ERR(1, 2050, __pyx_L1_error)
  if (PySet_Add(__pyx_t_4, __pyx_n_s_stylesheet_node) < 0) __PYX_ERR(1, 2050, __pyx_L1_error)
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2050, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2050, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":2051
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         if kwds.keys() >= {"stylesheet_node", "stylesheet_file"}:
 *           raise Exception(py_error_message)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2051, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2051, __pyx_L1_error)

    /* "saxonc.pyx":2050
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_file"}:
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_node", "stylesheet_file"}:
 */
  }

  /* "saxonc.pyx":2052
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_node", "stylesheet_file"}:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_Keys(__pyx_v_kwds); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PySet_Add(__pyx_t_4, __pyx_n_s_stylesheet_node) < 0) __PYX_ERR(1, 2052, __pyx_L1_error)
  if (PySet_Add(__pyx_t_4, __pyx_n_s_stylesheet_file) < 0) __PYX_ERR(1, 2052, __pyx_L1_error)
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2052, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2052, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":2053
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_node", "stylesheet_file"}:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 * 
 *         if ("save" in kwds) and kwds["save"]==True:
 */
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2053, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 2053, __pyx_L1_error)

    /* "saxonc.pyx":2052
 *         if kwds.keys() >= {"stylesheet_text", "stylesheet_node"}:
 *           raise Exception(py_error_message)
 *         if kwds.keys() >= {"stylesheet_node", "stylesheet_file"}:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 * 
 */
  }

  /* "saxonc.pyx":2055
 *           raise Exception(py_error_message)
 * 
 *         if ("save" in kwds) and kwds["save"]==True:             # <<<<<<<<<<<<<<
 *           del kwds["save"]
 *           if "output_file" not in kwds:
 */
  __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_save, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 2055, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_save); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2055, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 2055, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __pyx_t_7;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_2) {

    /* "saxonc.pyx":2056
 * 
 *         if ("save" in kwds) and kwds["save"]==True:
 *           del kwds["save"]             # <<<<<<<<<<<<<<
 *           if "output_file" not in kwds:
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")
 */
    if (unlikely(PyDict_DelItem(__pyx_v_kwds, __pyx_n_s_save) < 0)) __PYX_ERR(1, 2056, __pyx_L1_error)

    /* "saxonc.pyx":2057
 *         if ("save" in kwds) and kwds["save"]==True:
 *           del kwds["save"]
 *           if "output_file" not in kwds:             # <<<<<<<<<<<<<<
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 */
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_output_file, __pyx_v_kwds, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2057, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (unlikely(__pyx_t_7)) {

      /* "saxonc.pyx":2058
 *           del kwds["save"]
 *           if "output_file" not in kwds:
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")             # <<<<<<<<<<<<<<
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 *           c_outputfile = py_output_string
 */
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2058, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 2058, __pyx_L1_error)

      /* "saxonc.pyx":2057
 *         if ("save" in kwds) and kwds["save"]==True:
 *           del kwds["save"]
 *           if "output_file" not in kwds:             # <<<<<<<<<<<<<<
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 */
    }

    /* "saxonc.pyx":2059
 *           if "output_file" not in kwds:
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")
 *           py_output_string = kwds["output_file"].encode('UTF-8')             # <<<<<<<<<<<<<<
 *           c_outputfile = py_output_string
 *           if "stylesheet_text" in kwds:
 */
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_output_file); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_py_output_string, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "saxonc.pyx":2060
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 *           c_outputfile = py_output_string             # <<<<<<<<<<<<<<
 *           if "stylesheet_text" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 */
    __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_py_output_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 2060, __pyx_L1_error)
    __pyx_v_c_outputfile = __pyx_t_8;

    /* "saxonc.pyx":2061
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 *           c_outputfile = py_output_string
 *           if "stylesheet_text" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
    __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stylesheet_text, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 2061, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_7 != 0);
    if (__pyx_t_2) {

      /* "saxonc.pyx":2062
 *           c_outputfile = py_output_string
 *           if "stylesheet_text" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')             # <<<<<<<<<<<<<<
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromStringAndSave(c_stylesheet, c_outputfile)
 */
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_stylesheet_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2062, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2062, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2062, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "saxonc.pyx":2063
 *           if "stylesheet_text" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string             # <<<<<<<<<<<<<<
 *             self.thisxptr.compileFromStringAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_file" in kwds:
 */
      __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 2063, __pyx_L1_error)
      __pyx_v_c_stylesheet = __pyx_t_8;

      /* "saxonc.pyx":2064
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromStringAndSave(c_stylesheet, c_outputfile)             # <<<<<<<<<<<<<<
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 */
      __pyx_v_self->thisxptr->compileFromStringAndSave(__pyx_v_c_stylesheet, __pyx_v_c_outputfile);

      /* "saxonc.pyx":2061
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 *           c_outputfile = py_output_string
 *           if "stylesheet_text" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
      goto __pyx_L11;
    }

    /* "saxonc.pyx":2065
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromStringAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_file" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 */
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stylesheet_file, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2065, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (__pyx_t_7) {

      /* "saxonc.pyx":2066
 *             self.thisxptr.compileFromStringAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')             # <<<<<<<<<<<<<<
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *               raise Exception("Stylesheet file does not exist")
 */
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_stylesheet_file); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "saxonc.pyx":2067
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:             # <<<<<<<<<<<<<<
 *               raise Exception("Stylesheet file does not exist")
 *             c_stylesheet = py_stylesheet_string
 */
      __pyx_t_2 = (__pyx_v_py_stylesheet_string == Py_None);
      __pyx_t_6 = (__pyx_t_2 != 0);
      if (!__pyx_t_6) {
      } else {
        __pyx_t_7 = __pyx_t_6;
        goto __pyx_L13_bool_binop_done;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_isfile); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2067, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_v_py_stylesheet_string) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_py_stylesheet_string);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2067, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2067, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 2067, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __pyx_t_6;
      __pyx_L13_bool_binop_done:;
      if (unlikely(__pyx_t_7)) {

        /* "saxonc.pyx":2068
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *               raise Exception("Stylesheet file does not exist")             # <<<<<<<<<<<<<<
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromFileAndSave(c_stylesheet, c_outputfile)
 */
        __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2068, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 2068, __pyx_L1_error)

        /* "saxonc.pyx":2067
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:             # <<<<<<<<<<<<<<
 *               raise Exception("Stylesheet file does not exist")
 *             c_stylesheet = py_stylesheet_string
 */
      }

      /* "saxonc.pyx":2069
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *               raise Exception("Stylesheet file does not exist")
 *             c_stylesheet = py_stylesheet_string             # <<<<<<<<<<<<<<
 *             self.thisxptr.compileFromFileAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_node" in kwds:
 */
      __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 2069, __pyx_L1_error)
      __pyx_v_c_stylesheet = __pyx_t_8;

      /* "saxonc.pyx":2070
 *               raise Exception("Stylesheet file does not exist")
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromFileAndSave(c_stylesheet, c_outputfile)             # <<<<<<<<<<<<<<
 *           elif "stylesheet_node" in kwds:
 *             py_xdmNode = kwds["stylesheet_node"]
 */
      __pyx_v_self->thisxptr->compileFromFileAndSave(__pyx_v_c_stylesheet, __pyx_v_c_outputfile);

      /* "saxonc.pyx":2065
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromStringAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_file" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 */
      goto __pyx_L11;
    }

    /* "saxonc.pyx":2071
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromFileAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_node" in kwds:             # <<<<<<<<<<<<<<
 *             py_xdmNode = kwds["stylesheet_node"]
 *             #if not isinstance(py_value, PyXdmNode):
 */
    __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stylesheet_node, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 2071, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (likely(__pyx_t_6)) {

      /* "saxonc.pyx":2072
 *             self.thisxptr.compileFromFileAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_node" in kwds:
 *             py_xdmNode = kwds["stylesheet_node"]             # <<<<<<<<<<<<<<
 *             #if not isinstance(py_value, PyXdmNode):
 *               #raise Exception("StylesheetNode keyword arugment is not of type XdmNode")
 */
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_stylesheet_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2072, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6saxonc_PyXdmNode))))) __PYX_ERR(1, 2072, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_py_xdmNode, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "saxonc.pyx":2076
 *               #raise Exception("StylesheetNode keyword arugment is not of type XdmNode")
 *             #value = PyXdmNode(py_value)
 *             self.thisxptr.compileFromXdmNodeAndSave(py_xdmNode.derivednptr, c_outputfile)             # <<<<<<<<<<<<<<
 *           else:
 *             raise Exception(py_error_message)
 */
      __pyx_v_self->thisxptr->compileFromXdmNodeAndSave(__pyx_v_py_xdmNode->derivednptr, __pyx_v_c_outputfile);

      /* "saxonc.pyx":2071
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromFileAndSave(c_stylesheet, c_outputfile)
 *           elif "stylesheet_node" in kwds:             # <<<<<<<<<<<<<<
 *             py_xdmNode = kwds["stylesheet_node"]
 *             #if not isinstance(py_value, PyXdmNode):
 */
      goto __pyx_L11;
    }

    /* "saxonc.pyx":2078
 *             self.thisxptr.compileFromXdmNodeAndSave(py_xdmNode.derivednptr, c_outputfile)
 *           else:
 *             raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         else:
 *           if "stylesheet_text" in kwds:
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2078, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 2078, __pyx_L1_error)
    }
    __pyx_L11:;

    /* "saxonc.pyx":2055
 *           raise Exception(py_error_message)
 * 
 *         if ("save" in kwds) and kwds["save"]==True:             # <<<<<<<<<<<<<<
 *           del kwds["save"]
 *           if "output_file" not in kwds:
 */
    goto __pyx_L7;
  }

  /* "saxonc.pyx":2080
 *             raise Exception(py_error_message)
 *         else:
 *           if "stylesheet_text" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
  /*else*/ {
    __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stylesheet_text, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 2080, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {

      /* "saxonc.pyx":2081
 *         else:
 *           if "stylesheet_text" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')             # <<<<<<<<<<<<<<
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromString(c_stylesheet)
 */
      __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_stylesheet_text); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2081, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2081, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2081, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "saxonc.pyx":2082
 *           if "stylesheet_text" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string             # <<<<<<<<<<<<<<
 *             self.thisxptr.compileFromString(c_stylesheet)
 *           elif "stylesheet_file" in kwds:
 */
      __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 2082, __pyx_L1_error)
      __pyx_v_c_stylesheet = __pyx_t_8;

      /* "saxonc.pyx":2083
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromString(c_stylesheet)             # <<<<<<<<<<<<<<
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 */
      __pyx_v_self->thisxptr->compileFromString(__pyx_v_c_stylesheet);

      /* "saxonc.pyx":2080
 *             raise Exception(py_error_message)
 *         else:
 *           if "stylesheet_text" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_text"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
      goto __pyx_L15;
    }

    /* "saxonc.pyx":2084
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromString(c_stylesheet)
 *           elif "stylesheet_file" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
    __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stylesheet_file, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 2084, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {

      /* "saxonc.pyx":2085
 *             self.thisxptr.compileFromString(c_stylesheet)
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')             # <<<<<<<<<<<<<<
 *             c_stylesheet = py_stylesheet_string
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 */
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_stylesheet_file); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2085, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2085, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2085, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "saxonc.pyx":2086
 *           elif "stylesheet_file" in kwds:
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string             # <<<<<<<<<<<<<<
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *               raise Exception("Stylesheet file does not exist")
 */
      __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 2086, __pyx_L1_error)
      __pyx_v_c_stylesheet = __pyx_t_8;

      /* "saxonc.pyx":2087
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:             # <<<<<<<<<<<<<<
 *               raise Exception("Stylesheet file does not exist")
 *             self.thisxptr.compileFromFile(c_stylesheet)
 */
      __pyx_t_7 = (__pyx_v_py_stylesheet_string == Py_None);
      __pyx_t_2 = (__pyx_t_7 != 0);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_6 = __pyx_t_2;
        goto __pyx_L17_bool_binop_done;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_isfile); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2087, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_py_stylesheet_string) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_py_stylesheet_string);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2087, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2087, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2087, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __pyx_t_2;
      __pyx_L17_bool_binop_done:;
      if (unlikely(__pyx_t_6)) {

        /* "saxonc.pyx":2088
 *             c_stylesheet = py_stylesheet_string
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *               raise Exception("Stylesheet file does not exist")             # <<<<<<<<<<<<<<
 *             self.thisxptr.compileFromFile(c_stylesheet)
 *           elif "associated_file" in kwds:
 */
        __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2088, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 2088, __pyx_L1_error)

        /* "saxonc.pyx":2087
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:             # <<<<<<<<<<<<<<
 *               raise Exception("Stylesheet file does not exist")
 *             self.thisxptr.compileFromFile(c_stylesheet)
 */
      }

      /* "saxonc.pyx":2089
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *               raise Exception("Stylesheet file does not exist")
 *             self.thisxptr.compileFromFile(c_stylesheet)             # <<<<<<<<<<<<<<
 *           elif "associated_file" in kwds:
 *             py_stylesheet_string = kwds["associated_file"].encode('UTF-8')
 */
      __pyx_v_self->thisxptr->compileFromFile(__pyx_v_c_stylesheet);

      /* "saxonc.pyx":2084
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromString(c_stylesheet)
 *           elif "stylesheet_file" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["stylesheet_file"].encode('UTF-8')
 *             c_stylesheet = py_stylesheet_string
 */
      goto __pyx_L15;
    }

    /* "saxonc.pyx":2090
 *               raise Exception("Stylesheet file does not exist")
 *             self.thisxptr.compileFromFile(c_stylesheet)
 *           elif "associated_file" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["associated_file"].encode('UTF-8')
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 */
    __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_associated_file, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 2090, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_6 != 0);
    if (__pyx_t_2) {

      /* "saxonc.pyx":2091
 *             self.thisxptr.compileFromFile(c_stylesheet)
 *           elif "associated_file" in kwds:
 *             py_stylesheet_string = kwds["associated_file"].encode('UTF-8')             # <<<<<<<<<<<<<<
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *               raise Exception("Stylesheet file does not exist")
 */
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_associated_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2091, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2091, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2091, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_py_stylesheet_string, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "saxonc.pyx":2092
 *           elif "associated_file" in kwds:
 *             py_stylesheet_string = kwds["associated_file"].encode('UTF-8')
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:             # <<<<<<<<<<<<<<
 *               raise Exception("Stylesheet file does not exist")
 *             c_stylesheet = py_stylesheet_string
 */
      __pyx_t_6 = (__pyx_v_py_stylesheet_string == Py_None);
      __pyx_t_7 = (__pyx_t_6 != 0);
      if (!__pyx_t_7) {
      } else {
        __pyx_t_2 = __pyx_t_7;
        goto __pyx_L20_bool_binop_done;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_isfile); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2092, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_v_py_stylesheet_string) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_py_stylesheet_string);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2092, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2092, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 2092, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_2 = __pyx_t_7;
      __pyx_L20_bool_binop_done:;
      if (unlikely(__pyx_t_2)) {

        /* "saxonc.pyx":2093
 *             py_stylesheet_string = kwds["associated_file"].encode('UTF-8')
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *               raise Exception("Stylesheet file does not exist")             # <<<<<<<<<<<<<<
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromAssociatedFile(c_stylesheet)
 */
        __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(1, 2093, __pyx_L1_error)

        /* "saxonc.pyx":2092
 *           elif "associated_file" in kwds:
 *             py_stylesheet_string = kwds["associated_file"].encode('UTF-8')
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:             # <<<<<<<<<<<<<<
 *               raise Exception("Stylesheet file does not exist")
 *             c_stylesheet = py_stylesheet_string
 */
      }

      /* "saxonc.pyx":2094
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *               raise Exception("Stylesheet file does not exist")
 *             c_stylesheet = py_stylesheet_string             # <<<<<<<<<<<<<<
 *             self.thisxptr.compileFromAssociatedFile(c_stylesheet)
 *           elif "stylesheet_node" in kwds:
 */
      __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_py_stylesheet_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 2094, __pyx_L1_error)
      __pyx_v_c_stylesheet = __pyx_t_8;

      /* "saxonc.pyx":2095
 *               raise Exception("Stylesheet file does not exist")
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromAssociatedFile(c_stylesheet)             # <<<<<<<<<<<<<<
 *           elif "stylesheet_node" in kwds:
 *             py_xdmNode = kwds["stylesheet_node"]
 */
      __pyx_v_self->thisxptr->compileFromAssociatedFile(__pyx_v_c_stylesheet);

      /* "saxonc.pyx":2090
 *               raise Exception("Stylesheet file does not exist")
 *             self.thisxptr.compileFromFile(c_stylesheet)
 *           elif "associated_file" in kwds:             # <<<<<<<<<<<<<<
 *             py_stylesheet_string = kwds["associated_file"].encode('UTF-8')
 *             if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 */
      goto __pyx_L15;
    }

    /* "saxonc.pyx":2096
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromAssociatedFile(c_stylesheet)
 *           elif "stylesheet_node" in kwds:             # <<<<<<<<<<<<<<
 *             py_xdmNode = kwds["stylesheet_node"]
 *             #if not isinstance(py_value, PyXdmNode):
 */
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stylesheet_node, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2096, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (likely(__pyx_t_7)) {

      /* "saxonc.pyx":2097
 *             self.thisxptr.compileFromAssociatedFile(c_stylesheet)
 *           elif "stylesheet_node" in kwds:
 *             py_xdmNode = kwds["stylesheet_node"]             # <<<<<<<<<<<<<<
 *             #if not isinstance(py_value, PyXdmNode):
 *               #raise Exception("StylesheetNode keyword arugment is not of type XdmNode")
 */
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_stylesheet_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2097, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_6saxonc_PyXdmNode))))) __PYX_ERR(1, 2097, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_py_xdmNode, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "saxonc.pyx":2101
 *               #raise Exception("StylesheetNode keyword arugment is not of type XdmNode")
 *             #value = PyXdmNode(py_value)
 *             self.thisxptr.compileFromXdmNode(py_xdmNode.derivednptr)             # <<<<<<<<<<<<<<
 *           else:
 *             raise Exception(py_error_message)
 */
      __pyx_v_self->thisxptr->compileFromXdmNode(__pyx_v_py_xdmNode->derivednptr);

      /* "saxonc.pyx":2096
 *             c_stylesheet = py_stylesheet_string
 *             self.thisxptr.compileFromAssociatedFile(c_stylesheet)
 *           elif "stylesheet_node" in kwds:             # <<<<<<<<<<<<<<
 *             py_xdmNode = kwds["stylesheet_node"]
 *             #if not isinstance(py_value, PyXdmNode):
 */
      goto __pyx_L15;
    }

    /* "saxonc.pyx":2103
 *             self.thisxptr.compileFromXdmNode(py_xdmNode.derivednptr)
 *           else:
 *             raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 2103, __pyx_L1_error)
    }
    __pyx_L15:;
  }
  __pyx_L7:;

  /* "saxonc.pyx":2007
 * 
 * 
 *      def compile_stylesheet(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         compile_stylesheet(self, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.compile_stylesheet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_error_message);
  __Pyx_XDECREF(__pyx_v_py_output_string);
  __Pyx_XDECREF(__pyx_v_py_stylesheet_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_py_xdmNode);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2107
 * 
 * 
 *      def release_stylesheet(self):             # <<<<<<<<<<<<<<
 *         """
 *         release_stylesheet(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_63release_stylesheet(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_62release_stylesheet[] = "\n        release_stylesheet(self)\n        Release cached stylesheet\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_63release_stylesheet(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("release_stylesheet (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_62release_stylesheet(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_62release_stylesheet(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("release_stylesheet", 0);

  /* "saxonc.pyx":2113
 * 
 *         """
 *         self.thisxptr.releaseStylesheet()             # <<<<<<<<<<<<<<
 * 
 *      def exception_occurred(self):
 */
  __pyx_v_self->thisxptr->releaseStylesheet();

  /* "saxonc.pyx":2107
 * 
 * 
 *      def release_stylesheet(self):             # <<<<<<<<<<<<<<
 *         """
 *         release_stylesheet(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2115
 *         self.thisxptr.releaseStylesheet()
 * 
 *      def exception_occurred(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_occurred(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_65exception_occurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_64exception_occurred[] = "\n        exception_occurred(self)\n        Checks for pending exceptions without creating a local reference to the exception object\n        Returns:\n            boolean: True when there is a pending exception; otherwise return False\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_65exception_occurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_occurred (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_64exception_occurred(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_64exception_occurred(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exception_occurred", 0);

  /* "saxonc.pyx":2123
 * 
 *         """
 *         return self.thisxptr.exceptionCount() >0             # <<<<<<<<<<<<<<
 * 
 *      def check_exception(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisxptr->exceptionCount() > 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2115
 *         self.thisxptr.releaseStylesheet()
 * 
 *      def exception_occurred(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_occurred(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.exception_occurred", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2125
 *         return self.thisxptr.exceptionCount() >0
 * 
 *      def check_exception(self):             # <<<<<<<<<<<<<<
 *         """
 *         check_exception(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_67check_exception(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_66check_exception[] = "\n        check_exception(self)\n        Check for exception thrown and get message of the exception.\n\n        Returns:\n            str: Returns the exception message if thrown otherwise return None\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_67check_exception(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_exception (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_66check_exception(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_66check_exception(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_exception", 0);

  /* "saxonc.pyx":2134
 * 
 *         """
 *         cdef const char* c_string = self.thisxptr.checkException()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->thisxptr->checkException();

  /* "saxonc.pyx":2135
 *         """
 *         cdef const char* c_string = self.thisxptr.checkException()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2136
 *         cdef const char* c_string = self.thisxptr.checkException()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 *      def exception_clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":2125
 *         return self.thisxptr.exceptionCount() >0
 * 
 *      def check_exception(self):             # <<<<<<<<<<<<<<
 *         """
 *         check_exception(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.check_exception", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2138
 *         return ustring
 * 
 *      def exception_clear(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_clear(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_69exception_clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_68exception_clear[] = "\n        exception_clear(self)\n        Clear any exception thrown\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_69exception_clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_clear (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_68exception_clear(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_68exception_clear(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_clear", 0);

  /* "saxonc.pyx":2144
 * 
 *         """
 *         self.thisxptr.exceptionClear()             # <<<<<<<<<<<<<<
 * 
 *      def exception_count(self):
 */
  __pyx_v_self->thisxptr->exceptionClear();

  /* "saxonc.pyx":2138
 *         return ustring
 * 
 *      def exception_clear(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_clear(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2146
 *         self.thisxptr.exceptionClear()
 * 
 *      def exception_count(self):             # <<<<<<<<<<<<<<
 *         """
 *         excepton_count(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_71exception_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_70exception_count[] = "\n        excepton_count(self)\n        Get number of errors reported during execution.\n\n        Returns:\n            int: Count of the exceptions thrown during execution\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_71exception_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_count (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_70exception_count(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_70exception_count(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exception_count", 0);

  /* "saxonc.pyx":2154
 *             int: Count of the exceptions thrown during execution
 *         """
 *         return self.thisxptr.exceptionCount()             # <<<<<<<<<<<<<<
 * 
 *      def get_error_message(self, index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisxptr->exceptionCount()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2146
 *         self.thisxptr.exceptionClear()
 * 
 *      def exception_count(self):             # <<<<<<<<<<<<<<
 *         """
 *         excepton_count(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.exception_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2156
 *         return self.thisxptr.exceptionCount()
 * 
 *      def get_error_message(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_message(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_73get_error_message(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_72get_error_message[] = "\n        get_error_message(self, index)\n        A transformation may have a number of errors reported against it. Get the ith error message if there are any errors\n\n        Args:\n            index (int): The i'th exception\n\n        Returns:\n            str: The message of the i'th exception. Return None if the i'th exception does not exist.\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_73get_error_message(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_error_message (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_72get_error_message(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_72get_error_message(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_index) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_error_message", 0);

  /* "saxonc.pyx":2167
 *             str: The message of the i'th exception. Return None if the i'th exception does not exist.
 *         """
 *         cdef const char* c_string = self.thisxptr.getErrorMessage(index)             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 2167, __pyx_L1_error)
  __pyx_v_c_string = __pyx_v_self->thisxptr->getErrorMessage(__pyx_t_1);

  /* "saxonc.pyx":2168
 *         """
 *         cdef const char* c_string = self.thisxptr.getErrorMessage(index)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":2169
 *         cdef const char* c_string = self.thisxptr.getErrorMessage(index)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 *      def get_error_code(self, index):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":2156
 *         return self.thisxptr.exceptionCount()
 * 
 *      def get_error_message(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_message(self, index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.get_error_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2171
 *         return ustring
 * 
 *      def get_error_code(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_code(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_75get_error_code(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_6saxonc_17PyXslt30Processor_74get_error_code[] = "\n        get_error_code(self, index)\n        A transformation may have a number of errors reported against it. Get the i'th error code if there are any errors\n\n        Args:\n            index (int): The i'th exception\n\n        Returns:\n            str: The error code associated with the i'th exception. Return None if the i'th exception does not exist.\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_75get_error_code(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_error_code (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_74get_error_code(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_74get_error_code(struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, PyObject *__pyx_v_index) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_error_code", 0);

  /* "saxonc.pyx":2183
 * 
 *         """
 *         cdef const char* c_string = self.thisxptr.getErrorCode(index)             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 2183, __pyx_L1_error)
  __pyx_v_c_string = __pyx_v_self->thisxptr->getErrorCode(__pyx_t_1);

  /* "saxonc.pyx":2184
 *         """
 *         cdef const char* c_string = self.thisxptr.getErrorCode(index)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "saxonc.pyx":2185
 *         cdef const char* c_string = self.thisxptr.getErrorCode(index)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":2171
 *         return ustring
 * 
 *      def get_error_code(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_code(self, index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.get_error_code", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_77__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_77__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_76__reduce_cython__(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_76__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_79__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6saxonc_17PyXslt30Processor_79__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXslt30Processor_78__setstate_cython__(((struct __pyx_obj_6saxonc_PyXslt30Processor *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXslt30Processor_78__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXslt30Processor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXslt30Processor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2195
 *      cdef saxoncClasses.XQueryProcessor *thisxqptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """
 *         __cinit__(self)
 */

/* Python wrapper */
static int __pyx_pw_6saxonc_17PyXQueryProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6saxonc_17PyXQueryProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor___cinit__(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6saxonc_17PyXQueryProcessor___cinit__(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "saxonc.pyx":2201
 * 
 *         """
 *         self.thisxqptr = NULL             # <<<<<<<<<<<<<<
 * 
 *      def __dealloc__(self):
 */
  __pyx_v_self->thisxqptr = NULL;

  /* "saxonc.pyx":2195
 *      cdef saxoncClasses.XQueryProcessor *thisxqptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """
 *         __cinit__(self)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2203
 *         self.thisxqptr = NULL
 * 
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         dealloc(self)
 */

/* Python wrapper */
static void __pyx_pw_6saxonc_17PyXQueryProcessor_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6saxonc_17PyXQueryProcessor_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6saxonc_17PyXQueryProcessor_2__dealloc__(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6saxonc_17PyXQueryProcessor_2__dealloc__(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "saxonc.pyx":2209
 * 
 *         """
 *         if self.thisxqptr != NULL:             # <<<<<<<<<<<<<<
 *            del self.thisxqptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->thisxqptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":2210
 *         """
 *         if self.thisxqptr != NULL:
 *            del self.thisxqptr             # <<<<<<<<<<<<<<
 * 
 *      def set_context(self, ** kwds):
 */
    delete __pyx_v_self->thisxqptr;

    /* "saxonc.pyx":2209
 * 
 *         """
 *         if self.thisxqptr != NULL:             # <<<<<<<<<<<<<<
 *            del self.thisxqptr
 * 
 */
  }

  /* "saxonc.pyx":2203
 *         self.thisxqptr = NULL
 * 
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         dealloc(self)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "saxonc.pyx":2212
 *            del self.thisxqptr
 * 
 *      def set_context(self, ** kwds):             # <<<<<<<<<<<<<<
 *         """
 *         set_context(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_5set_context(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_4set_context[] = "\n        set_context(self, **kwds)\n        Set the initial context for the query\n   \n        Args:\n            **kwds : Possible keyword argument file_name (str) or xdm_item (PyXdmItem)\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_5set_context(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_context (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_context", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_context", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_4set_context(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_4set_context(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_py_error_message = NULL;
  PyObject *__pyx_v_py_value = 0;
  PyObject *__pyx_v_py_value_string = 0;
  char *__pyx_v_c_source;
  struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_xdm_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_context", 0);

  /* "saxonc.pyx":2221
 * 
 *         """
 *         py_error_message = "Error: set_context should only contain one of the following keyword arguments: (file_name|xdm_item)"             # <<<<<<<<<<<<<<
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(__pyx_kp_s_Error_set_context_should_only_co);
  __pyx_v_py_error_message = __pyx_kp_s_Error_set_context_should_only_co;

  /* "saxonc.pyx":2222
 *         """
 *         py_error_message = "Error: set_context should only contain one of the following keyword arguments: (file_name|xdm_item)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2222, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":2223
 *         py_error_message = "Error: set_context should only contain one of the following keyword arguments: (file_name|xdm_item)"
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         cdef py_value = None
 *         cdef py_value_string = None
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2223, __pyx_L1_error)

    /* "saxonc.pyx":2222
 *         """
 *         py_error_message = "Error: set_context should only contain one of the following keyword arguments: (file_name|xdm_item)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  }

  /* "saxonc.pyx":2224
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 *         cdef py_value = None             # <<<<<<<<<<<<<<
 *         cdef py_value_string = None
 *         cdef char * c_source
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value = Py_None;

  /* "saxonc.pyx":2225
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 *         cdef py_value_string = None             # <<<<<<<<<<<<<<
 *         cdef char * c_source
 *         cdef PyXdmItem xdm_item = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value_string = Py_None;

  /* "saxonc.pyx":2227
 *         cdef py_value_string = None
 *         cdef char * c_source
 *         cdef PyXdmItem xdm_item = None             # <<<<<<<<<<<<<<
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_xdm_item = ((struct __pyx_obj_6saxonc_PyXdmItem *)Py_None);

  /* "saxonc.pyx":2228
 *         cdef char * c_source
 *         cdef PyXdmItem xdm_item = None
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_file_name, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2228, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "saxonc.pyx":2229
 *         cdef PyXdmItem xdm_item = None
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]             # <<<<<<<<<<<<<<
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_py_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2230
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None             # <<<<<<<<<<<<<<
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxqptr.setContextItemFromFile(c_source)
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __Pyx_DECREF_SET(__pyx_v_py_value_string, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2231
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""             # <<<<<<<<<<<<<<
 *             self.thisxqptr.setContextItemFromFile(c_source)
 *         elif "xdm_item" in kwds:
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 2231, __pyx_L1_error)
      __pyx_t_8 = __pyx_t_9;
    } else {
      __pyx_t_8 = ((char *)"");
    }
    __pyx_v_c_source = __pyx_t_8;

    /* "saxonc.pyx":2232
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxqptr.setContextItemFromFile(c_source)             # <<<<<<<<<<<<<<
 *         elif "xdm_item" in kwds:
 *             xdm_item = kwds["xdm_item"]
 */
    __pyx_v_self->thisxqptr->setContextItemFromFile(__pyx_v_c_source);

    /* "saxonc.pyx":2228
 *         cdef char * c_source
 *         cdef PyXdmItem xdm_item = None
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":2233
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxqptr.setContextItemFromFile(c_source)
 *         elif "xdm_item" in kwds:             # <<<<<<<<<<<<<<
 *             xdm_item = kwds["xdm_item"]
 *             xdm_item.derivedptr.incrementRefCount()
 */
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_xdm_item, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 2233, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_2)) {

    /* "saxonc.pyx":2234
 *             self.thisxqptr.setContextItemFromFile(c_source)
 *         elif "xdm_item" in kwds:
 *             xdm_item = kwds["xdm_item"]             # <<<<<<<<<<<<<<
 *             xdm_item.derivedptr.incrementRefCount()
 *             self.thisxqptr.setContextItem(xdm_item.derivedptr)
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xdm_item); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6saxonc_PyXdmItem))))) __PYX_ERR(1, 2234, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_xdm_item, ((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2235
 *         elif "xdm_item" in kwds:
 *             xdm_item = kwds["xdm_item"]
 *             xdm_item.derivedptr.incrementRefCount()             # <<<<<<<<<<<<<<
 *             self.thisxqptr.setContextItem(xdm_item.derivedptr)
 *         else:
 */
    __pyx_v_xdm_item->derivedptr->incrementRefCount();

    /* "saxonc.pyx":2236
 *             xdm_item = kwds["xdm_item"]
 *             xdm_item.derivedptr.incrementRefCount()
 *             self.thisxqptr.setContextItem(xdm_item.derivedptr)             # <<<<<<<<<<<<<<
 *         else:
 *           raise Exception(py_error_message)
 */
    try {
      __pyx_v_self->thisxqptr->setContextItem(__pyx_v_xdm_item->derivedptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 2236, __pyx_L1_error)
    }

    /* "saxonc.pyx":2233
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxqptr.setContextItemFromFile(c_source)
 *         elif "xdm_item" in kwds:             # <<<<<<<<<<<<<<
 *             xdm_item = kwds["xdm_item"]
 *             xdm_item.derivedptr.incrementRefCount()
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":2238
 *             self.thisxqptr.setContextItem(xdm_item.derivedptr)
 *         else:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 * 
 *      def set_output_file(self, output_file):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2238, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "saxonc.pyx":2212
 *            del self.thisxqptr
 * 
 *      def set_context(self, ** kwds):             # <<<<<<<<<<<<<<
 *         """
 *         set_context(self, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.set_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_error_message);
  __Pyx_XDECREF(__pyx_v_py_value);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_xdm_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2240
 *           raise Exception(py_error_message)
 * 
 *      def set_output_file(self, output_file):             # <<<<<<<<<<<<<<
 *         """
 *         set_output_file(self, output_file)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_7set_output_file(PyObject *__pyx_v_self, PyObject *__pyx_v_output_file); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_6set_output_file[] = "\n        set_output_file(self, output_file)\n        Set the output file where the result is sent\n\n        Args:\n            output_file (str): Name of the output file\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_7set_output_file(PyObject *__pyx_v_self, PyObject *__pyx_v_output_file) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_output_file (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_6set_output_file(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_output_file));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_6set_output_file(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_output_file) {
  PyObject *__pyx_v_py_value_string = NULL;
  PyObject *__pyx_v_c_outfile = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_output_file", 0);

  /* "saxonc.pyx":2248
 *             output_file (str): Name of the output file
 *         """
 *         py_value_string = output_file.encode('UTF-8') if output_file is not None else None             # <<<<<<<<<<<<<<
 *         c_outfile = py_value_string if output_file is not None else ""
 *         self.thisxqptr.setOutputFile(c_outfile)
 */
  __pyx_t_2 = (__pyx_v_output_file != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_output_file, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2249
 *         """
 *         py_value_string = output_file.encode('UTF-8') if output_file is not None else None
 *         c_outfile = py_value_string if output_file is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxqptr.setOutputFile(c_outfile)
 * 
 */
  __pyx_t_2 = (__pyx_v_output_file != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_value_string);
    __pyx_t_1 = __pyx_v_py_value_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_outfile = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2250
 *         py_value_string = output_file.encode('UTF-8') if output_file is not None else None
 *         c_outfile = py_value_string if output_file is not None else ""
 *         self.thisxqptr.setOutputFile(c_outfile)             # <<<<<<<<<<<<<<
 * 
 *      def set_parameter(self, name, PyXdmValue value):
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_c_outfile); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 2250, __pyx_L1_error)
  __pyx_v_self->thisxqptr->setOutputFile(__pyx_t_6);

  /* "saxonc.pyx":2240
 *           raise Exception(py_error_message)
 * 
 *      def set_output_file(self, output_file):             # <<<<<<<<<<<<<<
 *         """
 *         set_output_file(self, output_file)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.set_output_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF(__pyx_v_c_outfile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2252
 *         self.thisxqptr.setOutputFile(c_outfile)
 * 
 *      def set_parameter(self, name, PyXdmValue value):             # <<<<<<<<<<<<<<
 *         """
 *         set_parameter(self, name, PyXdmValue value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_9set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_8set_parameter[] = "\n        set_parameter(self, name, PyXdmValue value)\n        Set the value of a query parameter\n\n        Args:\n            name (str): the name of the stylesheet parameter, as a string. For namespaced parameter use the JAXP solution i.e. \"{uri}name\n            value (PyXdmValue): the value of the query parameter, or None to clear a previously set value\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_9set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, 1); __PYX_ERR(1, 2252, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_parameter") < 0)) __PYX_ERR(1, 2252, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = ((struct __pyx_obj_6saxonc_PyXdmValue *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_6saxonc_PyXdmValue, 1, "value", 0))) __PYX_ERR(1, 2252, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_8set_parameter(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_8set_parameter(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value) {
  char const *__pyx_v_c_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_parameter", 0);

  /* "saxonc.pyx":2262
 * 
 *         """
 *         cdef const char * c_str = make_c_str(name)             # <<<<<<<<<<<<<<
 *         if c_str is not NULL:
 *             value.thisvptr.incrementRefCount()
 */
  if (!(likely(PyString_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_name)->tp_name), 0))) __PYX_ERR(1, 2262, __pyx_L1_error)
  __pyx_v_c_str = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_name));

  /* "saxonc.pyx":2263
 *         """
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:             # <<<<<<<<<<<<<<
 *             value.thisvptr.incrementRefCount()
 *             self.thisxqptr.setParameter(c_str, value.thisvptr)
 */
  __pyx_t_1 = ((__pyx_v_c_str != NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":2264
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:
 *             value.thisvptr.incrementRefCount()             # <<<<<<<<<<<<<<
 *             self.thisxqptr.setParameter(c_str, value.thisvptr)
 * 
 */
    __pyx_v_value->thisvptr->incrementRefCount();

    /* "saxonc.pyx":2265
 *         if c_str is not NULL:
 *             value.thisvptr.incrementRefCount()
 *             self.thisxqptr.setParameter(c_str, value.thisvptr)             # <<<<<<<<<<<<<<
 * 
 *      def remove_parameter(self, name):
 */
    __pyx_v_self->thisxqptr->setParameter(__pyx_v_c_str, __pyx_v_value->thisvptr);

    /* "saxonc.pyx":2263
 *         """
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:             # <<<<<<<<<<<<<<
 *             value.thisvptr.incrementRefCount()
 *             self.thisxqptr.setParameter(c_str, value.thisvptr)
 */
  }

  /* "saxonc.pyx":2252
 *         self.thisxqptr.setOutputFile(c_outfile)
 * 
 *      def set_parameter(self, name, PyXdmValue value):             # <<<<<<<<<<<<<<
 *         """
 *         set_parameter(self, name, PyXdmValue value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2267
 *             self.thisxqptr.setParameter(c_str, value.thisvptr)
 * 
 *      def remove_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         remove_parameter(self, name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_11remove_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_10remove_parameter[] = "\n        remove_parameter(self, name)\n        Remove the parameter given by name from the PyXQueryProcessor. The parameter will not have any affect on the query if it has not yet been executed\n\n        Args:\n            name (str): The name of the query parameter\n\n        Returns:\n            bool: True if the removal of the parameter has been successful, False otherwise.\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_11remove_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_parameter (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_10remove_parameter(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_10remove_parameter(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_py_value_string = NULL;
  PyObject *__pyx_v_c_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_parameter", 0);

  /* "saxonc.pyx":2279
 * 
 *         """
 *         py_value_string = name.encode('UTF-8') if name is not None else None             # <<<<<<<<<<<<<<
 *         c_name = py_value_string if name is not None else ""
 *         self.thisxqptr.removeParameter(c_name)
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2280
 *         """
 *         py_value_string = name.encode('UTF-8') if name is not None else None
 *         c_name = py_value_string if name is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxqptr.removeParameter(c_name)
 * 
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_value_string);
    __pyx_t_1 = __pyx_v_py_value_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2281
 *         py_value_string = name.encode('UTF-8') if name is not None else None
 *         c_name = py_value_string if name is not None else ""
 *         self.thisxqptr.removeParameter(c_name)             # <<<<<<<<<<<<<<
 * 
 *      def set_property(self, name, str value):
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_c_name); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 2281, __pyx_L1_error)
  (void)(__pyx_v_self->thisxqptr->removeParameter(__pyx_t_6));

  /* "saxonc.pyx":2267
 *             self.thisxqptr.setParameter(c_str, value.thisvptr)
 * 
 *      def remove_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         remove_parameter(self, name)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.remove_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF(__pyx_v_c_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2283
 *         self.thisxqptr.removeParameter(c_name)
 * 
 *      def set_property(self, name, str value):             # <<<<<<<<<<<<<<
 *         """
 *         set_property(self, name, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_13set_property(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_12set_property[] = "\n        set_property(self, name, value)\n        Set a property specific to the processor in use.\n \n        Args:\n            name (str): The name of the property\n            value (str): The value of the property\n\n        Example:\n            PyXQueryProcessor: set serialization properties (names start with '!' i.e. name \"!method\" -> \"xml\")\r\n            'o':outfile name,\r\n            'dtd': Possible values 'on' or 'off' to set DTD validation,\r \n            'resources': directory to find Saxon data files,\r \n            's': source as file name,\r\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_13set_property(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_property (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_property", 1, 2, 2, 1); __PYX_ERR(1, 2283, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_property") < 0)) __PYX_ERR(1, 2283, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_property", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2283, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.set_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(1, 2283, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_12set_property(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_12set_property(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_py_name_string = NULL;
  PyObject *__pyx_v_c_name = NULL;
  PyObject *__pyx_v_py_value_string = NULL;
  PyObject *__pyx_v_c_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  char const *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_property", 0);

  /* "saxonc.pyx":2300
 *         """
 * 
 *         py_name_string = name.encode('UTF-8') if name is not None else None             # <<<<<<<<<<<<<<
 *         c_name = py_name_string if name is not None else ""
 * 
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_name_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2301
 * 
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         c_name = py_name_string if name is not None else ""             # <<<<<<<<<<<<<<
 * 
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_name_string);
    __pyx_t_1 = __pyx_v_py_name_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2303
 *         c_name = py_name_string if name is not None else ""
 * 
 *         py_value_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *         c_value = py_value_string if value is not None else ""
 *         self.thisxqptr.setProperty(c_name, c_value)
 */
  __pyx_t_2 = (__pyx_v_value != ((PyObject*)Py_None));
  if ((__pyx_t_2 != 0)) {
    __pyx_t_3 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyString_Type_encode, __pyx_v_value, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2304
 * 
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         c_value = py_value_string if value is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxqptr.setProperty(c_name, c_value)
 * 
 */
  __pyx_t_2 = (__pyx_v_value != ((PyObject*)Py_None));
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_value_string);
    __pyx_t_1 = __pyx_v_py_value_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_value = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2305
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         c_value = py_value_string if value is not None else ""
 *         self.thisxqptr.setProperty(c_name, c_value)             # <<<<<<<<<<<<<<
 * 
 *      def clear_parameters(self):
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_c_name); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 2305, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_c_value); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 2305, __pyx_L1_error)
  __pyx_v_self->thisxqptr->setProperty(__pyx_t_6, __pyx_t_7);

  /* "saxonc.pyx":2283
 *         self.thisxqptr.removeParameter(c_name)
 * 
 *      def set_property(self, name, str value):             # <<<<<<<<<<<<<<
 *         """
 *         set_property(self, name, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.set_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_name_string);
  __Pyx_XDECREF(__pyx_v_c_name);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF(__pyx_v_c_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2307
 *         self.thisxqptr.setProperty(c_name, c_value)
 * 
 *      def clear_parameters(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_15clear_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_14clear_parameters[] = "\n        clear_parameter(self)\n        Clear all parameters set on the processor\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_15clear_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_parameters (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_14clear_parameters(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_14clear_parameters(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_parameters", 0);

  /* "saxonc.pyx":2312
 *         Clear all parameters set on the processor
 *         """
 *         self.thisxqptr.clearParameters()             # <<<<<<<<<<<<<<
 * 
 *      def clear_properties(self):
 */
  __pyx_v_self->thisxqptr->clearParameters();

  /* "saxonc.pyx":2307
 *         self.thisxqptr.setProperty(c_name, c_value)
 * 
 *      def clear_parameters(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2314
 *         self.thisxqptr.clearParameters()
 * 
 *      def clear_properties(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_17clear_properties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_16clear_properties[] = "\n        clear_parameter(self)\n        Clear all properties set on the processor\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_17clear_properties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_properties (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_16clear_properties(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_16clear_properties(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_properties", 0);

  /* "saxonc.pyx":2319
 *         Clear all properties set on the processor
 *         """
 *         self.thisxqptr.clearProperties()             # <<<<<<<<<<<<<<
 * 
 *      def set_updating(self, updating):
 */
  __pyx_v_self->thisxqptr->clearProperties();

  /* "saxonc.pyx":2314
 *         self.thisxqptr.clearParameters()
 * 
 *      def clear_properties(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2321
 *         self.thisxqptr.clearProperties()
 * 
 *      def set_updating(self, updating):             # <<<<<<<<<<<<<<
 *         """
 *         set_updating(self, updating)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_19set_updating(PyObject *__pyx_v_self, PyObject *__pyx_v_updating); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_18set_updating[] = "\n        set_updating(self, updating)\n        Say whether the query is allowed to be updating. XQuery update syntax will be rejected during query compilation unless this\n        flag is set. XQuery Update is supported only under Saxon-EE/C.\n\n\n        Args:\n            updating (bool): true if the query is allowed to use the XQuery Update facility (requires Saxon-EE/C). If set to false,\n                             the query must not be an updating query. If set to true, it may be either an updating or a non-updating query.\n\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_19set_updating(PyObject *__pyx_v_self, PyObject *__pyx_v_updating) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_updating (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_18set_updating(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_updating));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_18set_updating(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_updating) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_updating", 0);

  /* "saxonc.pyx":2334
 * 
 *         """
 *         self.thisxqptr.setUpdating(updating)             # <<<<<<<<<<<<<<
 * 
 *      def run_query_to_value(self, ** kwds):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_updating); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 2334, __pyx_L1_error)
  __pyx_v_self->thisxqptr->setUpdating(__pyx_t_1);

  /* "saxonc.pyx":2321
 *         self.thisxqptr.clearProperties()
 * 
 *      def set_updating(self, updating):             # <<<<<<<<<<<<<<
 *         """
 *         set_updating(self, updating)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.set_updating", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2336
 *         self.thisxqptr.setUpdating(updating)
 * 
 *      def run_query_to_value(self, ** kwds):             # <<<<<<<<<<<<<<
 *         """
 *         run_query_to_value(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_21run_query_to_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_20run_query_to_value[] = "\n        run_query_to_value(self, **kwds)\n        Execute query and output result as an PyXdmValue object \n\n        Args:\n            **kwds: Keyword arguments with the possible options input_file_name (str) or input_xdm_item (PyXdmItem). Possible to supply\n                    query with the arguments 'query_file' or 'query_text', which are of type str.\n\n        Returns:\n            PyXdmValue: Output result as an PyXdmValue\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_21run_query_to_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_query_to_value (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("run_query_to_value", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "run_query_to_value", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_20run_query_to_value(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_20run_query_to_value(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_nval = 0;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_aval = 0;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  XdmValue *__pyx_v_xdmValue;
  PyObject *__pyx_v_type_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  XdmValue *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_query_to_value", 0);

  /* "saxonc.pyx":2348
 *             PyXdmValue: Output result as an PyXdmValue
 *         """
 *         cdef PyXdmNode nval = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmValue val = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_nval = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":2349
 *         """
 *         cdef PyXdmNode nval = None
 *         cdef PyXdmAtomicValue aval = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue val = None
 *         if not len(kwds) == 0:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_aval = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)Py_None);

  /* "saxonc.pyx":2350
 *         cdef PyXdmNode nval = None
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmValue val = None             # <<<<<<<<<<<<<<
 *         if not len(kwds) == 0:
 * 
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":2351
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmValue val = None
 *         if not len(kwds) == 0:             # <<<<<<<<<<<<<<
 * 
 *             if "input_file_name" in kwds:
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2351, __pyx_L1_error)
  __pyx_t_2 = ((!((__pyx_t_1 == 0) != 0)) != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":2353
 *         if not len(kwds) == 0:
 * 
 *             if "input_file_name" in kwds:             # <<<<<<<<<<<<<<
 *                 self.set_context(kwds["input_file_name"])
 *             elif "input_xdm_item" in kwds:
 */
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_input_file_name, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2353, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "saxonc.pyx":2354
 * 
 *             if "input_file_name" in kwds:
 *                 self.set_context(kwds["input_file_name"])             # <<<<<<<<<<<<<<
 *             elif "input_xdm_item" in kwds:
 *                 self.set_context(xdm_item=(kwds["xdm_item"]))
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_context); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_input_file_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "saxonc.pyx":2353
 *         if not len(kwds) == 0:
 * 
 *             if "input_file_name" in kwds:             # <<<<<<<<<<<<<<
 *                 self.set_context(kwds["input_file_name"])
 *             elif "input_xdm_item" in kwds:
 */
      goto __pyx_L4;
    }

    /* "saxonc.pyx":2355
 *             if "input_file_name" in kwds:
 *                 self.set_context(kwds["input_file_name"])
 *             elif "input_xdm_item" in kwds:             # <<<<<<<<<<<<<<
 *                 self.set_context(xdm_item=(kwds["xdm_item"]))
 * 
 */
    __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_input_xdm_item, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 2355, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "saxonc.pyx":2356
 *                 self.set_context(kwds["input_file_name"])
 *             elif "input_xdm_item" in kwds:
 *                 self.set_context(xdm_item=(kwds["xdm_item"]))             # <<<<<<<<<<<<<<
 * 
 *             if "query_file" in kwds:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_context); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xdm_item); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_xdm_item, __pyx_t_6) < 0) __PYX_ERR(1, 2356, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "saxonc.pyx":2355
 *             if "input_file_name" in kwds:
 *                 self.set_context(kwds["input_file_name"])
 *             elif "input_xdm_item" in kwds:             # <<<<<<<<<<<<<<
 *                 self.set_context(xdm_item=(kwds["xdm_item"]))
 * 
 */
    }
    __pyx_L4:;

    /* "saxonc.pyx":2358
 *                 self.set_context(xdm_item=(kwds["xdm_item"]))
 * 
 *             if "query_file" in kwds:             # <<<<<<<<<<<<<<
 *                 self.set_query_file(kwds["output_file_name"])
 *             elif "query_text" in kwds:
 */
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_query_file, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2358, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "saxonc.pyx":2359
 * 
 *             if "query_file" in kwds:
 *                 self.set_query_file(kwds["output_file_name"])             # <<<<<<<<<<<<<<
 *             elif "query_text" in kwds:
 *                 self.set_query_content(kwds["query_text"])
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_query_file); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_output_file_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "saxonc.pyx":2358
 *                 self.set_context(xdm_item=(kwds["xdm_item"]))
 * 
 *             if "query_file" in kwds:             # <<<<<<<<<<<<<<
 *                 self.set_query_file(kwds["output_file_name"])
 *             elif "query_text" in kwds:
 */
      goto __pyx_L5;
    }

    /* "saxonc.pyx":2360
 *             if "query_file" in kwds:
 *                 self.set_query_file(kwds["output_file_name"])
 *             elif "query_text" in kwds:             # <<<<<<<<<<<<<<
 *                 self.set_query_content(kwds["query_text"])
 * 
 */
    __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_query_text, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 2360, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "saxonc.pyx":2361
 *                 self.set_query_file(kwds["output_file_name"])
 *             elif "query_text" in kwds:
 *                 self.set_query_content(kwds["query_text"])             # <<<<<<<<<<<<<<
 * 
 *         cdef saxoncClasses.XdmValue * xdmValue = self.thisxqptr.runQueryToValue()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_query_content); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_query_text); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "saxonc.pyx":2360
 *             if "query_file" in kwds:
 *                 self.set_query_file(kwds["output_file_name"])
 *             elif "query_text" in kwds:             # <<<<<<<<<<<<<<
 *                 self.set_query_content(kwds["query_text"])
 * 
 */
    }
    __pyx_L5:;

    /* "saxonc.pyx":2351
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmValue val = None
 *         if not len(kwds) == 0:             # <<<<<<<<<<<<<<
 * 
 *             if "input_file_name" in kwds:
 */
  }

  /* "saxonc.pyx":2363
 *                 self.set_query_content(kwds["query_text"])
 * 
 *         cdef saxoncClasses.XdmValue * xdmValue = self.thisxqptr.runQueryToValue()             # <<<<<<<<<<<<<<
 *         if xdmValue is NULL:
 *             return None
 */
  try {
    __pyx_t_8 = __pyx_v_self->thisxqptr->runQueryToValue();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 2363, __pyx_L1_error)
  }
  __pyx_v_xdmValue = __pyx_t_8;

  /* "saxonc.pyx":2364
 * 
 *         cdef saxoncClasses.XdmValue * xdmValue = self.thisxqptr.runQueryToValue()
 *         if xdmValue is NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef type_ = xdmValue.getType()
 */
  __pyx_t_2 = ((__pyx_v_xdmValue == NULL) != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":2365
 *         cdef saxoncClasses.XdmValue * xdmValue = self.thisxqptr.runQueryToValue()
 *         if xdmValue is NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":2364
 * 
 *         cdef saxoncClasses.XdmValue * xdmValue = self.thisxqptr.runQueryToValue()
 *         if xdmValue is NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef type_ = xdmValue.getType()
 */
  }

  /* "saxonc.pyx":2366
 *         if xdmValue is NULL:
 *             return None
 *         cdef type_ = xdmValue.getType()             # <<<<<<<<<<<<<<
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_xdmValue->getType()); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_type_ = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "saxonc.pyx":2367
 *             return None
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:             # <<<<<<<<<<<<<<
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
  __pyx_t_6 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_2) {

    /* "saxonc.pyx":2368
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 */
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_aval, ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "saxonc.pyx":2369
 *         if type_== 4:
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue             # <<<<<<<<<<<<<<
 *             return aval
 *         elif type_ == 3:
 */
    __pyx_v_aval->derivedaptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
    __pyx_v_aval->__pyx_base.derivedptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
    __pyx_v_aval->__pyx_base.__pyx_base.thisvptr = ((XdmAtomicValue *)__pyx_v_xdmValue);

    /* "saxonc.pyx":2370
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval             # <<<<<<<<<<<<<<
 *         elif type_ == 3:
 *             nval = PyXdmNode()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_aval));
    __pyx_r = ((PyObject *)__pyx_v_aval);
    goto __pyx_L0;

    /* "saxonc.pyx":2367
 *             return None
 *         cdef type_ = xdmValue.getType()
 *         if type_== 4:             # <<<<<<<<<<<<<<
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
  }

  /* "saxonc.pyx":2371
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
  __pyx_t_6 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2371, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_2) {

    /* "saxonc.pyx":2372
 *             return aval
 *         elif type_ == 3:
 *             nval = PyXdmNode()             # <<<<<<<<<<<<<<
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *             return nval
 */
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_nval, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "saxonc.pyx":2373
 *         elif type_ == 3:
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue             # <<<<<<<<<<<<<<
 *             return nval
 *         else:
 */
    __pyx_v_nval->derivednptr = ((XdmNode *)__pyx_v_xdmValue);
    __pyx_v_nval->__pyx_base.derivedptr = ((XdmNode *)__pyx_v_xdmValue);
    __pyx_v_nval->__pyx_base.__pyx_base.thisvptr = ((XdmNode *)__pyx_v_xdmValue);

    /* "saxonc.pyx":2374
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *             return nval             # <<<<<<<<<<<<<<
 *         else:
 *             val = PyXdmValue()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_nval));
    __pyx_r = ((PyObject *)__pyx_v_nval);
    goto __pyx_L0;

    /* "saxonc.pyx":2371
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *             return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *             nval = PyXdmNode()
 *             nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
  }

  /* "saxonc.pyx":2376
 *             return nval
 *         else:
 *             val = PyXdmValue()             # <<<<<<<<<<<<<<
 *             val.thisvptr = xdmValue
 *             return val
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmValue)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "saxonc.pyx":2377
 *         else:
 *             val = PyXdmValue()
 *             val.thisvptr = xdmValue             # <<<<<<<<<<<<<<
 *             return val
 * 
 */
    __pyx_v_val->thisvptr = __pyx_v_xdmValue;

    /* "saxonc.pyx":2378
 *             val = PyXdmValue()
 *             val.thisvptr = xdmValue
 *             return val             # <<<<<<<<<<<<<<
 * 
 *      def run_query_to_string(self, ** kwds):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;
  }

  /* "saxonc.pyx":2336
 *         self.thisxqptr.setUpdating(updating)
 * 
 *      def run_query_to_value(self, ** kwds):             # <<<<<<<<<<<<<<
 *         """
 *         run_query_to_value(self, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.run_query_to_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_nval);
  __Pyx_XDECREF((PyObject *)__pyx_v_aval);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XDECREF(__pyx_v_type_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2380
 *             return val
 * 
 *      def run_query_to_string(self, ** kwds):             # <<<<<<<<<<<<<<
 *         """
 *         run_query_to_string(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_23run_query_to_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_22run_query_to_string[] = "\n        run_query_to_string(self, **kwds)\n        Execute query and output result as a string \n\n        Args:\n            **kwds: Keyword arguments with the possible options input_file_name (str) or input_xdm_item (PyXdmItem). Possible to supply\n                    query with the arguments 'query_file' or 'query_text', which are of type str.\n\n        Returns:\n            str: Output result as a string\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_23run_query_to_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_query_to_string (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("run_query_to_string", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "run_query_to_string", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_22run_query_to_string(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_22run_query_to_string(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_query_to_string", 0);

  /* "saxonc.pyx":2393
 *         """
 *         cdef const char * c_string
 *         if len(kwds) == 0:             # <<<<<<<<<<<<<<
 *           ustring = make_py_str(self.thisxqptr.runQueryToString())
 *           return ustring
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2393, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 0) != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":2394
 *         cdef const char * c_string
 *         if len(kwds) == 0:
 *           ustring = make_py_str(self.thisxqptr.runQueryToString())             # <<<<<<<<<<<<<<
 *           return ustring
 * 
 */
    try {
      __pyx_t_3 = __pyx_v_self->thisxqptr->runQueryToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 2394, __pyx_L1_error)
    }
    __pyx_t_4 = __pyx_f_6saxonc_make_py_str(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_ustring = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "saxonc.pyx":2395
 *         if len(kwds) == 0:
 *           ustring = make_py_str(self.thisxqptr.runQueryToString())
 *           return ustring             # <<<<<<<<<<<<<<
 * 
 *         if "input_file_name" in kwds:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_ustring);
    __pyx_r = __pyx_v_ustring;
    goto __pyx_L0;

    /* "saxonc.pyx":2393
 *         """
 *         cdef const char * c_string
 *         if len(kwds) == 0:             # <<<<<<<<<<<<<<
 *           ustring = make_py_str(self.thisxqptr.runQueryToString())
 *           return ustring
 */
  }

  /* "saxonc.pyx":2397
 *           return ustring
 * 
 *         if "input_file_name" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_context(kwds["input_file_name"])
 *         elif "input_xdm_item" in kwds:
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_input_file_name, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2397, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_2 != 0);
  if (__pyx_t_5) {

    /* "saxonc.pyx":2398
 * 
 *         if "input_file_name" in kwds:
 *           self.set_context(kwds["input_file_name"])             # <<<<<<<<<<<<<<
 *         elif "input_xdm_item" in kwds:
 *           self.set_context(xdm_item=(kwds["xdm_item"]))
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_context); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_input_file_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "saxonc.pyx":2397
 *           return ustring
 * 
 *         if "input_file_name" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_context(kwds["input_file_name"])
 *         elif "input_xdm_item" in kwds:
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":2399
 *         if "input_file_name" in kwds:
 *           self.set_context(kwds["input_file_name"])
 *         elif "input_xdm_item" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_context(xdm_item=(kwds["xdm_item"]))
 *         if "query_file" in kwds:
 */
  __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_input_xdm_item, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 2399, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_5 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":2400
 *           self.set_context(kwds["input_file_name"])
 *         elif "input_xdm_item" in kwds:
 *           self.set_context(xdm_item=(kwds["xdm_item"]))             # <<<<<<<<<<<<<<
 *         if "query_file" in kwds:
 *           self.set_query_file(kwds["output_file_name"])
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_context); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xdm_item); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_xdm_item, __pyx_t_7) < 0) __PYX_ERR(1, 2400, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "saxonc.pyx":2399
 *         if "input_file_name" in kwds:
 *           self.set_context(kwds["input_file_name"])
 *         elif "input_xdm_item" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_context(xdm_item=(kwds["xdm_item"]))
 *         if "query_file" in kwds:
 */
  }
  __pyx_L4:;

  /* "saxonc.pyx":2401
 *         elif "input_xdm_item" in kwds:
 *           self.set_context(xdm_item=(kwds["xdm_item"]))
 *         if "query_file" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_query_file(kwds["output_file_name"])
 *         elif "query_text" in kwds:
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_query_file, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2401, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_2 != 0);
  if (__pyx_t_5) {

    /* "saxonc.pyx":2402
 *           self.set_context(xdm_item=(kwds["xdm_item"]))
 *         if "query_file" in kwds:
 *           self.set_query_file(kwds["output_file_name"])             # <<<<<<<<<<<<<<
 *         elif "query_text" in kwds:
 *           self.set_query_content(kwds["query_text"])
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_query_file); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_output_file_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "saxonc.pyx":2401
 *         elif "input_xdm_item" in kwds:
 *           self.set_context(xdm_item=(kwds["xdm_item"]))
 *         if "query_file" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_query_file(kwds["output_file_name"])
 *         elif "query_text" in kwds:
 */
    goto __pyx_L5;
  }

  /* "saxonc.pyx":2403
 *         if "query_file" in kwds:
 *           self.set_query_file(kwds["output_file_name"])
 *         elif "query_text" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_query_content(kwds["query_text"])
 * 
 */
  __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_query_text, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 2403, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_5 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":2404
 *           self.set_query_file(kwds["output_file_name"])
 *         elif "query_text" in kwds:
 *           self.set_query_content(kwds["query_text"])             # <<<<<<<<<<<<<<
 * 
 *         ustring = make_py_str(self.thisxqptr.runQueryToString())
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_query_content); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_query_text); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "saxonc.pyx":2403
 *         if "query_file" in kwds:
 *           self.set_query_file(kwds["output_file_name"])
 *         elif "query_text" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_query_content(kwds["query_text"])
 * 
 */
  }
  __pyx_L5:;

  /* "saxonc.pyx":2406
 *           self.set_query_content(kwds["query_text"])
 * 
 *         ustring = make_py_str(self.thisxqptr.runQueryToString())             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  try {
    __pyx_t_3 = __pyx_v_self->thisxqptr->runQueryToString();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 2406, __pyx_L1_error)
  }
  __pyx_t_7 = __pyx_f_6saxonc_make_py_str(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v_ustring = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "saxonc.pyx":2407
 * 
 *         ustring = make_py_str(self.thisxqptr.runQueryToString())
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":2380
 *             return val
 * 
 *      def run_query_to_string(self, ** kwds):             # <<<<<<<<<<<<<<
 *         """
 *         run_query_to_string(self, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.run_query_to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2410
 * 
 * 
 *      def run_query_to_file(self, ** kwds):             # <<<<<<<<<<<<<<
 *         """
 *         run_query_to_file(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_25run_query_to_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_24run_query_to_file[] = "\n        run_query_to_file(self, **kwds)\n        Execute query with the result saved to file\n\n        Args:\n            **kwds: Keyword arguments with the possible options input_file_name (str) or input_xdm_item (PyXdmItem). The Query can be\n                    supplied with the arguments 'query_file' or 'query_text', which are of type str. The name of the output file is\n                    specified as the argument output_file_name.\n\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_25run_query_to_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_query_to_file (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("run_query_to_file", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "run_query_to_file", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_24run_query_to_file(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_24run_query_to_file(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_query_to_file", 0);

  /* "saxonc.pyx":2422
 * 
 *         """
 *         if len(kwds) == 0:             # <<<<<<<<<<<<<<
 *           self.thisxqptr.runQueryToFile()
 *         if "input_file_name" in kwds:
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2422, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 0) != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":2423
 *         """
 *         if len(kwds) == 0:
 *           self.thisxqptr.runQueryToFile()             # <<<<<<<<<<<<<<
 *         if "input_file_name" in kwds:
 *           self.set_context(file_name=(kwds["input_file_name"]))
 */
    try {
      __pyx_v_self->thisxqptr->runQueryToFile();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 2423, __pyx_L1_error)
    }

    /* "saxonc.pyx":2422
 * 
 *         """
 *         if len(kwds) == 0:             # <<<<<<<<<<<<<<
 *           self.thisxqptr.runQueryToFile()
 *         if "input_file_name" in kwds:
 */
  }

  /* "saxonc.pyx":2424
 *         if len(kwds) == 0:
 *           self.thisxqptr.runQueryToFile()
 *         if "input_file_name" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_context(file_name=(kwds["input_file_name"]))
 *         elif "input_xdm_item" in kwds:
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_input_file_name, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2424, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "saxonc.pyx":2425
 *           self.thisxqptr.runQueryToFile()
 *         if "input_file_name" in kwds:
 *           self.set_context(file_name=(kwds["input_file_name"]))             # <<<<<<<<<<<<<<
 *         elif "input_xdm_item" in kwds:
 *           self.set_context(xdm_item=(kwds["xdm_item"]))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_context); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_input_file_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_file_name, __pyx_t_6) < 0) __PYX_ERR(1, 2425, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "saxonc.pyx":2424
 *         if len(kwds) == 0:
 *           self.thisxqptr.runQueryToFile()
 *         if "input_file_name" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_context(file_name=(kwds["input_file_name"]))
 *         elif "input_xdm_item" in kwds:
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":2426
 *         if "input_file_name" in kwds:
 *           self.set_context(file_name=(kwds["input_file_name"]))
 *         elif "input_xdm_item" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_context(xdm_item=(kwds["xdm_item"]))
 *         if "output_file_name" in kwds:
 */
  __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_input_xdm_item, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 2426, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":2427
 *           self.set_context(file_name=(kwds["input_file_name"]))
 *         elif "input_xdm_item" in kwds:
 *           self.set_context(xdm_item=(kwds["xdm_item"]))             # <<<<<<<<<<<<<<
 *         if "output_file_name" in kwds:
 *           self.set_output_file(kwds["output_file_name"])
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_context); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xdm_item); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_xdm_item, __pyx_t_4) < 0) __PYX_ERR(1, 2427, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "saxonc.pyx":2426
 *         if "input_file_name" in kwds:
 *           self.set_context(file_name=(kwds["input_file_name"]))
 *         elif "input_xdm_item" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_context(xdm_item=(kwds["xdm_item"]))
 *         if "output_file_name" in kwds:
 */
  }
  __pyx_L4:;

  /* "saxonc.pyx":2428
 *         elif "input_xdm_item" in kwds:
 *           self.set_context(xdm_item=(kwds["xdm_item"]))
 *         if "output_file_name" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_output_file(kwds["output_file_name"])
 *         else:
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_output_file_name, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2428, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_3)) {

    /* "saxonc.pyx":2429
 *           self.set_context(xdm_item=(kwds["xdm_item"]))
 *         if "output_file_name" in kwds:
 *           self.set_output_file(kwds["output_file_name"])             # <<<<<<<<<<<<<<
 *         else:
 *           raise Exception("Error: output_file_name required in method run_query_to_file")
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_output_file); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_output_file_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "saxonc.pyx":2428
 *         elif "input_xdm_item" in kwds:
 *           self.set_context(xdm_item=(kwds["xdm_item"]))
 *         if "output_file_name" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_output_file(kwds["output_file_name"])
 *         else:
 */
    goto __pyx_L5;
  }

  /* "saxonc.pyx":2431
 *           self.set_output_file(kwds["output_file_name"])
 *         else:
 *           raise Exception("Error: output_file_name required in method run_query_to_file")             # <<<<<<<<<<<<<<
 * 
 *         if "query_file" in kwds:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 2431, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "saxonc.pyx":2433
 *           raise Exception("Error: output_file_name required in method run_query_to_file")
 * 
 *         if "query_file" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_query_file(kwds["output_file_name"])
 *         elif "query_text" in kwds:
 */
  __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_query_file, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 2433, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":2434
 * 
 *         if "query_file" in kwds:
 *           self.set_query_file(kwds["output_file_name"])             # <<<<<<<<<<<<<<
 *         elif "query_text" in kwds:
 *           self.set_query_content(kwds["query_text"])
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_query_file); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_output_file_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "saxonc.pyx":2433
 *           raise Exception("Error: output_file_name required in method run_query_to_file")
 * 
 *         if "query_file" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_query_file(kwds["output_file_name"])
 *         elif "query_text" in kwds:
 */
    goto __pyx_L6;
  }

  /* "saxonc.pyx":2435
 *         if "query_file" in kwds:
 *           self.set_query_file(kwds["output_file_name"])
 *         elif "query_text" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_query_content(kwds["query_text"])
 *         self.thisxqptr.runQueryToFile()
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_query_text, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2435, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "saxonc.pyx":2436
 *           self.set_query_file(kwds["output_file_name"])
 *         elif "query_text" in kwds:
 *           self.set_query_content(kwds["query_text"])             # <<<<<<<<<<<<<<
 *         self.thisxqptr.runQueryToFile()
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_query_content); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_query_text); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "saxonc.pyx":2435
 *         if "query_file" in kwds:
 *           self.set_query_file(kwds["output_file_name"])
 *         elif "query_text" in kwds:             # <<<<<<<<<<<<<<
 *           self.set_query_content(kwds["query_text"])
 *         self.thisxqptr.runQueryToFile()
 */
  }
  __pyx_L6:;

  /* "saxonc.pyx":2437
 *         elif "query_text" in kwds:
 *           self.set_query_content(kwds["query_text"])
 *         self.thisxqptr.runQueryToFile()             # <<<<<<<<<<<<<<
 * 
 *      def declare_namespace(self, prefix, uri):
 */
  try {
    __pyx_v_self->thisxqptr->runQueryToFile();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 2437, __pyx_L1_error)
  }

  /* "saxonc.pyx":2410
 * 
 * 
 *      def run_query_to_file(self, ** kwds):             # <<<<<<<<<<<<<<
 *         """
 *         run_query_to_file(self, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.run_query_to_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2439
 *         self.thisxqptr.runQueryToFile()
 * 
 *      def declare_namespace(self, prefix, uri):             # <<<<<<<<<<<<<<
 *         """
 *         declare_namespace(self, prefix, uri)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_27declare_namespace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_26declare_namespace[] = "\n        declare_namespace(self, prefix, uri)\n        Declare a namespace binding part of the static context for queries compiled using this.\n        This binding may be overridden by a binding that appears in the query prolog.\n        The namespace binding will form part of the static context of the query, but it will\n        not be copied into result trees unless the prefix is actually used in an element or attribute name.\n\n        Args:\n            prefix (str): The namespace prefix. If the value is a zero-length string, this method sets the default namespace for elements and types.\n            uri (uri) : The namespace URI. It is possible to specify a zero-length string to \"undeclare\" a namespace; in this case the prefix will not be available for use,\n            except in the case where the prefix is also a zero length string, in which case the absence of a prefix implies that the name is in no namespace.\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_27declare_namespace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_prefix = 0;
  PyObject *__pyx_v_uri = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("declare_namespace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_prefix,&__pyx_n_s_uri,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("declare_namespace", 1, 2, 2, 1); __PYX_ERR(1, 2439, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "declare_namespace") < 0)) __PYX_ERR(1, 2439, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_prefix = values[0];
    __pyx_v_uri = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("declare_namespace", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2439, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.declare_namespace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_26declare_namespace(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), __pyx_v_prefix, __pyx_v_uri);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_26declare_namespace(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_prefix, PyObject *__pyx_v_uri) {
  char const *__pyx_v_c_prefix;
  char const *__pyx_v_c_uri;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("declare_namespace", 0);

  /* "saxonc.pyx":2453
 * 
 *         """
 *         c_prefix = make_c_str(prefix)             # <<<<<<<<<<<<<<
 *         c_uri = make_c_str(uri)
 *         self.thisxqptr.declareNamespace(c_prefix, c_uri)
 */
  if (!(likely(PyString_CheckExact(__pyx_v_prefix))||((__pyx_v_prefix) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_prefix)->tp_name), 0))) __PYX_ERR(1, 2453, __pyx_L1_error)
  __pyx_v_c_prefix = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_prefix));

  /* "saxonc.pyx":2454
 *         """
 *         c_prefix = make_c_str(prefix)
 *         c_uri = make_c_str(uri)             # <<<<<<<<<<<<<<
 *         self.thisxqptr.declareNamespace(c_prefix, c_uri)
 * 
 */
  if (!(likely(PyString_CheckExact(__pyx_v_uri))||((__pyx_v_uri) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_uri)->tp_name), 0))) __PYX_ERR(1, 2454, __pyx_L1_error)
  __pyx_v_c_uri = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_uri));

  /* "saxonc.pyx":2455
 *         c_prefix = make_c_str(prefix)
 *         c_uri = make_c_str(uri)
 *         self.thisxqptr.declareNamespace(c_prefix, c_uri)             # <<<<<<<<<<<<<<
 * 
 *      def set_query_file(self, file_name):
 */
  try {
    __pyx_v_self->thisxqptr->declareNamespace(__pyx_v_c_prefix, __pyx_v_c_uri);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 2455, __pyx_L1_error)
  }

  /* "saxonc.pyx":2439
 *         self.thisxqptr.runQueryToFile()
 * 
 *      def declare_namespace(self, prefix, uri):             # <<<<<<<<<<<<<<
 *         """
 *         declare_namespace(self, prefix, uri)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.declare_namespace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2457
 *         self.thisxqptr.declareNamespace(c_prefix, c_uri)
 * 
 *      def set_query_file(self, file_name):             # <<<<<<<<<<<<<<
 *         """
 *         set_query_file(self, file_name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_29set_query_file(PyObject *__pyx_v_self, PyObject *__pyx_v_file_name); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_28set_query_file[] = "\n        set_query_file(self, file_name)\n        Set the query to be executed as a file\n\n        Args:\n            file_name (str): The file name for the query\n\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_29set_query_file(PyObject *__pyx_v_self, PyObject *__pyx_v_file_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_query_file (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_28set_query_file(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_file_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_28set_query_file(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_file_name) {
  char const *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_query_file", 0);

  /* "saxonc.pyx":2467
 * 
 *         """
 *         c_filename = make_c_str(file_name)             # <<<<<<<<<<<<<<
 *         self.thisxqptr.setQueryFile(c_filename)
 * 
 */
  if (!(likely(PyString_CheckExact(__pyx_v_file_name))||((__pyx_v_file_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_file_name)->tp_name), 0))) __PYX_ERR(1, 2467, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_file_name));

  /* "saxonc.pyx":2468
 *         """
 *         c_filename = make_c_str(file_name)
 *         self.thisxqptr.setQueryFile(c_filename)             # <<<<<<<<<<<<<<
 * 
 *      def set_query_content(self, content):
 */
  __pyx_v_self->thisxqptr->setQueryFile(__pyx_v_c_filename);

  /* "saxonc.pyx":2457
 *         self.thisxqptr.declareNamespace(c_prefix, c_uri)
 * 
 *      def set_query_file(self, file_name):             # <<<<<<<<<<<<<<
 *         """
 *         set_query_file(self, file_name)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.set_query_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2470
 *         self.thisxqptr.setQueryFile(c_filename)
 * 
 *      def set_query_content(self, content):             # <<<<<<<<<<<<<<
 *         """
 *         set_query_content(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_31set_query_content(PyObject *__pyx_v_self, PyObject *__pyx_v_content); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_30set_query_content[] = "\n        set_query_content(self)\n        Set the query to be executed as a string\n\n        Args:\n            content (str): The query content suplied as a string\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_31set_query_content(PyObject *__pyx_v_self, PyObject *__pyx_v_content) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_query_content (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_30set_query_content(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_content));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_30set_query_content(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_content) {
  char const *__pyx_v_c_content;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_query_content", 0);

  /* "saxonc.pyx":2479
 * 
 *         """
 *         if content is not None:             # <<<<<<<<<<<<<<
 *             c_content = make_c_str(content)
 *             self.thisxqptr.setQueryContent(c_content)
 */
  __pyx_t_1 = (__pyx_v_content != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":2480
 *         """
 *         if content is not None:
 *             c_content = make_c_str(content)             # <<<<<<<<<<<<<<
 *             self.thisxqptr.setQueryContent(c_content)
 * 
 */
    if (!(likely(PyString_CheckExact(__pyx_v_content))||((__pyx_v_content) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_content)->tp_name), 0))) __PYX_ERR(1, 2480, __pyx_L1_error)
    __pyx_v_c_content = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_content));

    /* "saxonc.pyx":2481
 *         if content is not None:
 *             c_content = make_c_str(content)
 *             self.thisxqptr.setQueryContent(c_content)             # <<<<<<<<<<<<<<
 * 
 *      def set_query_base_uri(self, base_uri):
 */
    __pyx_v_self->thisxqptr->setQueryContent(__pyx_v_c_content);

    /* "saxonc.pyx":2479
 * 
 *         """
 *         if content is not None:             # <<<<<<<<<<<<<<
 *             c_content = make_c_str(content)
 *             self.thisxqptr.setQueryContent(c_content)
 */
  }

  /* "saxonc.pyx":2470
 *         self.thisxqptr.setQueryFile(c_filename)
 * 
 *      def set_query_content(self, content):             # <<<<<<<<<<<<<<
 *         """
 *         set_query_content(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.set_query_content", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2483
 *             self.thisxqptr.setQueryContent(c_content)
 * 
 *      def set_query_base_uri(self, base_uri):             # <<<<<<<<<<<<<<
 *         """
 *         set_query_base_uri(self, base_uri)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_33set_query_base_uri(PyObject *__pyx_v_self, PyObject *__pyx_v_base_uri); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_32set_query_base_uri[] = "\n        set_query_base_uri(self, base_uri)\n        Set the static base query for the query     \n\n        Args:\n            base_uri (str): The static base URI; or None to indicate that no base URI is available\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_33set_query_base_uri(PyObject *__pyx_v_self, PyObject *__pyx_v_base_uri) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_query_base_uri (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_32set_query_base_uri(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_base_uri));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_32set_query_base_uri(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_base_uri) {
  PyObject *__pyx_v_py_content_string = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_c_content = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_query_base_uri", 0);

  /* "saxonc.pyx":2491
 *             base_uri (str): The static base URI; or None to indicate that no base URI is available
 *         """
 *         py_content_string = base_uri.encode('UTF-8') if base_uri is not None else None             # <<<<<<<<<<<<<<
 *         c_content = py_content_string if base_uri is not None else ""
 *         self.thisxqptr.setQueryBaseURI(base_uri)
 */
  __pyx_t_2 = (__pyx_v_base_uri != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_base_uri, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_content_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2492
 *         """
 *         py_content_string = base_uri.encode('UTF-8') if base_uri is not None else None
 *         c_content = py_content_string if base_uri is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxqptr.setQueryBaseURI(base_uri)
 * 
 */
  __pyx_t_2 = (__pyx_v_base_uri != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_content_string);
    __pyx_t_1 = __pyx_v_py_content_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_content = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2493
 *         py_content_string = base_uri.encode('UTF-8') if base_uri is not None else None
 *         c_content = py_content_string if base_uri is not None else ""
 *         self.thisxqptr.setQueryBaseURI(base_uri)             # <<<<<<<<<<<<<<
 * 
 *      def set_cwd(self, cwd):
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_base_uri); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 2493, __pyx_L1_error)
  __pyx_v_self->thisxqptr->setQueryBaseURI(__pyx_t_6);

  /* "saxonc.pyx":2483
 *             self.thisxqptr.setQueryContent(c_content)
 * 
 *      def set_query_base_uri(self, base_uri):             # <<<<<<<<<<<<<<
 *         """
 *         set_query_base_uri(self, base_uri)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.set_query_base_uri", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_content_string);
  __Pyx_XDECREF(__pyx_v_c_content);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2495
 *         self.thisxqptr.setQueryBaseURI(base_uri)
 * 
 *      def set_cwd(self, cwd):             # <<<<<<<<<<<<<<
 *         """
 *         set_cwd(self, cwd)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_35set_cwd(PyObject *__pyx_v_self, PyObject *__pyx_v_cwd); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_34set_cwd[] = "\n        set_cwd(self, cwd)\n        Set the current working directory.\n\n        Args:\n            cwd (str): current working directory\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_35set_cwd(PyObject *__pyx_v_self, PyObject *__pyx_v_cwd) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cwd (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_34set_cwd(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_cwd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_34set_cwd(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_cwd) {
  PyObject *__pyx_v_py_cwd_string = NULL;
  PyObject *__pyx_v_c_cwd = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cwd", 0);

  /* "saxonc.pyx":2503
 *             cwd (str): current working directory
 *         """
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None             # <<<<<<<<<<<<<<
 *         c_cwd = py_cwd_string if cwd is not None else ""
 *         self.thisxqptr.setcwd(c_cwd)
 */
  __pyx_t_2 = (__pyx_v_cwd != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cwd, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_cwd_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2504
 *         """
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None
 *         c_cwd = py_cwd_string if cwd is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxqptr.setcwd(c_cwd)
 * 
 */
  __pyx_t_2 = (__pyx_v_cwd != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_cwd_string);
    __pyx_t_1 = __pyx_v_py_cwd_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_cwd = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2505
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None
 *         c_cwd = py_cwd_string if cwd is not None else ""
 *         self.thisxqptr.setcwd(c_cwd)             # <<<<<<<<<<<<<<
 * 
 *      def check_exception(self):
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_c_cwd); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 2505, __pyx_L1_error)
  __pyx_v_self->thisxqptr->setcwd(__pyx_t_6);

  /* "saxonc.pyx":2495
 *         self.thisxqptr.setQueryBaseURI(base_uri)
 * 
 *      def set_cwd(self, cwd):             # <<<<<<<<<<<<<<
 *         """
 *         set_cwd(self, cwd)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.set_cwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_cwd_string);
  __Pyx_XDECREF(__pyx_v_c_cwd);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2507
 *         self.thisxqptr.setcwd(c_cwd)
 * 
 *      def check_exception(self):             # <<<<<<<<<<<<<<
 *         """
 *         check_exception(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_37check_exception(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_36check_exception[] = "\n        check_exception(self)\n        Check for exception thrown and get message of the exception.\n  \n        Returns:\n            str: Returns the exception message if thrown otherwise return None\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_37check_exception(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_exception (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_36check_exception(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_36check_exception(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_exception", 0);

  /* "saxonc.pyx":2516
 * 
 *         """
 *         return self.thisxqptr.checkException()             # <<<<<<<<<<<<<<
 * 
 *      def exception_occurred(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->thisxqptr->checkException()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2507
 *         self.thisxqptr.setcwd(c_cwd)
 * 
 *      def check_exception(self):             # <<<<<<<<<<<<<<
 *         """
 *         check_exception(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.check_exception", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2518
 *         return self.thisxqptr.checkException()
 * 
 *      def exception_occurred(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_occurred(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_39exception_occurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_38exception_occurred[] = "\n        exception_occurred(self)\n        Checks for pending exceptions without creating a local reference to the exception object\n\n        Returns:\n            boolean: True when there is a pending exception; otherwise return False\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_39exception_occurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_occurred (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_38exception_occurred(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_38exception_occurred(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exception_occurred", 0);

  /* "saxonc.pyx":2527
 * 
 *         """
 *         return self.thisxqptr.exceptionCount() >0             # <<<<<<<<<<<<<<
 * 
 *      def exception_clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisxqptr->exceptionCount() > 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2518
 *         return self.thisxqptr.checkException()
 * 
 *      def exception_occurred(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_occurred(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.exception_occurred", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2529
 *         return self.thisxqptr.exceptionCount() >0
 * 
 *      def exception_clear(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_clear(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_41exception_clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_40exception_clear[] = "\n        exception_clear(self)\n        Clear any exception thrown\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_41exception_clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_clear (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_40exception_clear(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_40exception_clear(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_clear", 0);

  /* "saxonc.pyx":2535
 * 
 *         """
 *         self.thisxqptr.exceptionClear()             # <<<<<<<<<<<<<<
 * 
 *      def exception_count(self):
 */
  __pyx_v_self->thisxqptr->exceptionClear();

  /* "saxonc.pyx":2529
 *         return self.thisxqptr.exceptionCount() >0
 * 
 *      def exception_clear(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_clear(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2537
 *         self.thisxqptr.exceptionClear()
 * 
 *      def exception_count(self):             # <<<<<<<<<<<<<<
 *         """
 *         excepton_count(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_43exception_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_42exception_count[] = "\n        excepton_count(self)\n        Get number of errors reported during execution.\n\n        Returns:\n            int: Count of the exceptions thrown during execution\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_43exception_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_count (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_42exception_count(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_42exception_count(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exception_count", 0);

  /* "saxonc.pyx":2545
 *             int: Count of the exceptions thrown during execution
 *         """
 *         return self.thisxqptr.exceptionCount()             # <<<<<<<<<<<<<<
 * 
 *      def get_error_message(self, index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisxqptr->exceptionCount()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2537
 *         self.thisxqptr.exceptionClear()
 * 
 *      def exception_count(self):             # <<<<<<<<<<<<<<
 *         """
 *         excepton_count(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.exception_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2547
 *         return self.thisxqptr.exceptionCount()
 * 
 *      def get_error_message(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_message(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_45get_error_message(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_44get_error_message[] = "\n        get_error_message(self, index)\n        A transformation may have a number of errors reported against it. Get the ith error message if there are any errors\n\n        Args:\n            index (int): The i'th exception\n        \n        Returns:\n            str: The message of the i'th exception. Return None if the i'th exception does not exist.\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_45get_error_message(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_error_message (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_44get_error_message(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_44get_error_message(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_error_message", 0);

  /* "saxonc.pyx":2558
 *             str: The message of the i'th exception. Return None if the i'th exception does not exist.
 *         """
 *         return make_py_str(self.thisxqptr.getErrorMessage(index))             # <<<<<<<<<<<<<<
 * 
 *      def get_error_code(self, index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 2558, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_6saxonc_make_py_str(__pyx_v_self->thisxqptr->getErrorMessage(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2547
 *         return self.thisxqptr.exceptionCount()
 * 
 *      def get_error_message(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_message(self, index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.get_error_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2560
 *         return make_py_str(self.thisxqptr.getErrorMessage(index))
 * 
 *      def get_error_code(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_code(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_47get_error_code(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_6saxonc_17PyXQueryProcessor_46get_error_code[] = "\n        get_error_code(self, index)\n        A transformation may have a number of errors reported against it. Get the i'th error code if there are any errors\n\n        Args:\n            index (int): The i'th exception\n        \n        Returns:\n            str: The error code associated with the i'th exception. Return None if the i'th exception does not exist.\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_47get_error_code(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_error_code (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_46get_error_code(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_46get_error_code(struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_error_code", 0);

  /* "saxonc.pyx":2572
 * 
 *         """
 *         return make_py_str(self.thisxqptr.getErrorCode(index))             # <<<<<<<<<<<<<<
 * 
 * cdef class PyXPathProcessor:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 2572, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_6saxonc_make_py_str(__pyx_v_self->thisxqptr->getErrorCode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2560
 *         return make_py_str(self.thisxqptr.getErrorMessage(index))
 * 
 *      def get_error_code(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_code(self, index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.get_error_code", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_49__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_49__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_48__reduce_cython__(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_48__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_51__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6saxonc_17PyXQueryProcessor_51__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PyXQueryProcessor_50__setstate_cython__(((struct __pyx_obj_6saxonc_PyXQueryProcessor *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PyXQueryProcessor_50__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXQueryProcessor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXQueryProcessor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2578
 *      cdef saxoncClasses.XPathProcessor *thisxpptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """
 *         cinit(self)
 */

/* Python wrapper */
static int __pyx_pw_6saxonc_16PyXPathProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6saxonc_16PyXPathProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor___cinit__(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6saxonc_16PyXPathProcessor___cinit__(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "saxonc.pyx":2584
 * 
 *         """
 *         self.thisxpptr = NULL             # <<<<<<<<<<<<<<
 *      def __dealloc__(self):
 *         """
 */
  __pyx_v_self->thisxpptr = NULL;

  /* "saxonc.pyx":2578
 *      cdef saxoncClasses.XPathProcessor *thisxpptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """
 *         cinit(self)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2585
 *         """
 *         self.thisxpptr = NULL
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         dealloc(self)
 */

/* Python wrapper */
static void __pyx_pw_6saxonc_16PyXPathProcessor_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6saxonc_16PyXPathProcessor_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6saxonc_16PyXPathProcessor_2__dealloc__(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6saxonc_16PyXPathProcessor_2__dealloc__(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "saxonc.pyx":2591
 * 
 *         """
 *         if self.thisxpptr != NULL:             # <<<<<<<<<<<<<<
 *            del self.thisxpptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->thisxpptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":2592
 *         """
 *         if self.thisxpptr != NULL:
 *            del self.thisxpptr             # <<<<<<<<<<<<<<
 * 
 *      def set_base_uri(self, uri):
 */
    delete __pyx_v_self->thisxpptr;

    /* "saxonc.pyx":2591
 * 
 *         """
 *         if self.thisxpptr != NULL:             # <<<<<<<<<<<<<<
 *            del self.thisxpptr
 * 
 */
  }

  /* "saxonc.pyx":2585
 *         """
 *         self.thisxpptr = NULL
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         dealloc(self)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "saxonc.pyx":2594
 *            del self.thisxpptr
 * 
 *      def set_base_uri(self, uri):             # <<<<<<<<<<<<<<
 *         """
 *         set_base_uri(self, uri)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_5set_base_uri(PyObject *__pyx_v_self, PyObject *__pyx_v_uri); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_4set_base_uri[] = "\n        set_base_uri(self, uri)\n        Set the static base URI for XPath expressions compiled using this PyXPathCompiler. The base URI is part of the static context,\n        and is used to resolve any relative URIs appearing within an XPath expression, for example a relative URI passed as an argument\n        to the doc() function. If no static base URI is supplied, then the current working directory is used.\n\n\n        Args:\n            uri (str): This string will be used as the static base URI\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_5set_base_uri(PyObject *__pyx_v_self, PyObject *__pyx_v_uri) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_base_uri (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_4set_base_uri(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_uri));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_4set_base_uri(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_uri) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_base_uri", 0);

  /* "saxonc.pyx":2607
 *         """
 * 
 *         self.thisxpptr.setBaseURI(make_c_str(uri))             # <<<<<<<<<<<<<<
 * 
 *      def evaluate(self, xpath_str):
 */
  if (!(likely(PyString_CheckExact(__pyx_v_uri))||((__pyx_v_uri) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_uri)->tp_name), 0))) __PYX_ERR(1, 2607, __pyx_L1_error)
  __pyx_v_self->thisxpptr->setBaseURI(__pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_uri)));

  /* "saxonc.pyx":2594
 *            del self.thisxpptr
 * 
 *      def set_base_uri(self, uri):             # <<<<<<<<<<<<<<
 *         """
 *         set_base_uri(self, uri)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.set_base_uri", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2609
 *         self.thisxpptr.setBaseURI(make_c_str(uri))
 * 
 *      def evaluate(self, xpath_str):             # <<<<<<<<<<<<<<
 *         """
 *         evaluate(self, xpath_str)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_7evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_xpath_str); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_6evaluate[] = "\n        evaluate(self, xpath_str)\n\n        Args:\n            xpath_str (str): The XPath query suplied as a string\n\n        Returns:\n            PyXdmValue: \n\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_7evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_xpath_str) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_6evaluate(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_xpath_str));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_6evaluate(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_xpath_str) {
  PyObject *__pyx_v_py_string = NULL;
  PyObject *__pyx_v_c_xpath = NULL;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_nval = 0;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_aval = 0;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  PyObject *__pyx_v_type_ = 0;
  XdmValue *__pyx_v_xdmValue;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "saxonc.pyx":2620
 * 
 *         """
 *         py_string = xpath_str.encode('UTF-8') if xpath_str is not None else None             # <<<<<<<<<<<<<<
 *         c_xpath = py_string if xpath_str is not None else ""
 *         cdef PyXdmNode nval = None
 */
  __pyx_t_2 = (__pyx_v_xpath_str != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_xpath_str, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2621
 *         """
 *         py_string = xpath_str.encode('UTF-8') if xpath_str is not None else None
 *         c_xpath = py_string if xpath_str is not None else ""             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode nval = None
 *         cdef PyXdmAtomicValue aval = None
 */
  __pyx_t_2 = (__pyx_v_xpath_str != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_string);
    __pyx_t_1 = __pyx_v_py_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_xpath = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2622
 *         py_string = xpath_str.encode('UTF-8') if xpath_str is not None else None
 *         c_xpath = py_string if xpath_str is not None else ""
 *         cdef PyXdmNode nval = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmValue val = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_nval = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":2623
 *         c_xpath = py_string if xpath_str is not None else ""
 *         cdef PyXdmNode nval = None
 *         cdef PyXdmAtomicValue aval = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmValue val = None
 *         cdef type_ = 0
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_aval = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)Py_None);

  /* "saxonc.pyx":2624
 *         cdef PyXdmNode nval = None
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmValue val = None             # <<<<<<<<<<<<<<
 *         cdef type_ = 0
 *         cdef saxoncClasses.XdmValue * xdmValue = self.thisxpptr.evaluate(c_xpath)
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":2625
 *         cdef PyXdmAtomicValue aval = None
 *         cdef PyXdmValue val = None
 *         cdef type_ = 0             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmValue * xdmValue = self.thisxpptr.evaluate(c_xpath)
 *         if xdmValue == NULL:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_type_ = __pyx_int_0;

  /* "saxonc.pyx":2626
 *         cdef PyXdmValue val = None
 *         cdef type_ = 0
 *         cdef saxoncClasses.XdmValue * xdmValue = self.thisxpptr.evaluate(c_xpath)             # <<<<<<<<<<<<<<
 *         if xdmValue == NULL:
 *             return None
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_c_xpath); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 2626, __pyx_L1_error)
  __pyx_v_xdmValue = __pyx_v_self->thisxpptr->evaluate(__pyx_t_6);

  /* "saxonc.pyx":2627
 *         cdef type_ = 0
 *         cdef saxoncClasses.XdmValue * xdmValue = self.thisxpptr.evaluate(c_xpath)
 *         if xdmValue == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_xdmValue == NULL) != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":2628
 *         cdef saxoncClasses.XdmValue * xdmValue = self.thisxpptr.evaluate(c_xpath)
 *         if xdmValue == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             type_ = xdmValue.getType()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":2627
 *         cdef type_ = 0
 *         cdef saxoncClasses.XdmValue * xdmValue = self.thisxpptr.evaluate(c_xpath)
 *         if xdmValue == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  }

  /* "saxonc.pyx":2630
 *             return None
 *         else:
 *             type_ = xdmValue.getType()             # <<<<<<<<<<<<<<
 *             if type_ == 4:
 *                 aval = PyXdmAtomicValue()
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_xdmValue->getType()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_type_, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "saxonc.pyx":2631
 *         else:
 *             type_ = xdmValue.getType()
 *             if type_ == 4:             # <<<<<<<<<<<<<<
 *                 aval = PyXdmAtomicValue()
 *                 aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
    __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2631, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "saxonc.pyx":2632
 *             type_ = xdmValue.getType()
 *             if type_ == 4:
 *                 aval = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *                 aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *                 return aval
 */
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_aval, ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "saxonc.pyx":2633
 *             if type_ == 4:
 *                 aval = PyXdmAtomicValue()
 *                 aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue             # <<<<<<<<<<<<<<
 *                 return aval
 *             elif type_ == 3:
 */
      __pyx_v_aval->derivedaptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
      __pyx_v_aval->__pyx_base.derivedptr = ((XdmAtomicValue *)__pyx_v_xdmValue);
      __pyx_v_aval->__pyx_base.__pyx_base.thisvptr = ((XdmAtomicValue *)__pyx_v_xdmValue);

      /* "saxonc.pyx":2634
 *                 aval = PyXdmAtomicValue()
 *                 aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *                 return aval             # <<<<<<<<<<<<<<
 *             elif type_ == 3:
 *                 nval = PyXdmNode()
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_aval));
      __pyx_r = ((PyObject *)__pyx_v_aval);
      goto __pyx_L0;

      /* "saxonc.pyx":2631
 *         else:
 *             type_ = xdmValue.getType()
 *             if type_ == 4:             # <<<<<<<<<<<<<<
 *                 aval = PyXdmAtomicValue()
 *                 aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 */
    }

    /* "saxonc.pyx":2635
 *                 aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *                 return aval
 *             elif type_ == 3:             # <<<<<<<<<<<<<<
 *                 nval = PyXdmNode()
 *                 nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
    __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2635, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "saxonc.pyx":2636
 *                 return aval
 *             elif type_ == 3:
 *                 nval = PyXdmNode()             # <<<<<<<<<<<<<<
 *                 nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *                 return nval
 */
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2636, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_nval, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "saxonc.pyx":2637
 *             elif type_ == 3:
 *                 nval = PyXdmNode()
 *                 nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue             # <<<<<<<<<<<<<<
 *                 return nval
 *             else:
 */
      __pyx_v_nval->derivednptr = ((XdmNode *)__pyx_v_xdmValue);
      __pyx_v_nval->__pyx_base.derivedptr = ((XdmNode *)__pyx_v_xdmValue);
      __pyx_v_nval->__pyx_base.__pyx_base.thisvptr = ((XdmNode *)__pyx_v_xdmValue);

      /* "saxonc.pyx":2638
 *                 nval = PyXdmNode()
 *                 nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 *                 return nval             # <<<<<<<<<<<<<<
 *             else:
 *                 val = PyXdmValue()
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_nval));
      __pyx_r = ((PyObject *)__pyx_v_nval);
      goto __pyx_L0;

      /* "saxonc.pyx":2635
 *                 aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmValue
 *                 return aval
 *             elif type_ == 3:             # <<<<<<<<<<<<<<
 *                 nval = PyXdmNode()
 *                 nval.derivednptr = nval.derivedptr = nval.thisvptr = <saxoncClasses.XdmNode*>xdmValue
 */
    }

    /* "saxonc.pyx":2640
 *                 return nval
 *             else:
 *                 val = PyXdmValue()             # <<<<<<<<<<<<<<
 *                 val.thisvptr = xdmValue
 *                 return val
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "saxonc.pyx":2641
 *             else:
 *                 val = PyXdmValue()
 *                 val.thisvptr = xdmValue             # <<<<<<<<<<<<<<
 *                 return val
 * 
 */
      __pyx_v_val->thisvptr = __pyx_v_xdmValue;

      /* "saxonc.pyx":2642
 *                 val = PyXdmValue()
 *                 val.thisvptr = xdmValue
 *                 return val             # <<<<<<<<<<<<<<
 * 
 *      def evaluate_single(self, xpath_str):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_val));
      __pyx_r = ((PyObject *)__pyx_v_val);
      goto __pyx_L0;
    }
  }

  /* "saxonc.pyx":2609
 *         self.thisxpptr.setBaseURI(make_c_str(uri))
 * 
 *      def evaluate(self, xpath_str):             # <<<<<<<<<<<<<<
 *         """
 *         evaluate(self, xpath_str)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XDECREF(__pyx_v_c_xpath);
  __Pyx_XDECREF((PyObject *)__pyx_v_nval);
  __Pyx_XDECREF((PyObject *)__pyx_v_aval);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XDECREF(__pyx_v_type_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2644
 *                 return val
 * 
 *      def evaluate_single(self, xpath_str):             # <<<<<<<<<<<<<<
 *         """
 *         evaluate_single(self, xpath_str)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_9evaluate_single(PyObject *__pyx_v_self, PyObject *__pyx_v_xpath_str); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_8evaluate_single[] = "\n        evaluate_single(self, xpath_str)\n\n        Args:\n            xpath_str (str): The XPath query suplied as a string\n\n        Returns:\n            PyXdmItem: A single Xdm Item is returned \n\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_9evaluate_single(PyObject *__pyx_v_self, PyObject *__pyx_v_xpath_str) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate_single (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_8evaluate_single(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_xpath_str));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_8evaluate_single(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_xpath_str) {
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_val = 0;
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_aval = 0;
  PyObject *__pyx_v_py_string = NULL;
  PyObject *__pyx_v_c_xpath = NULL;
  XdmItem *__pyx_v_xdmItem;
  PyObject *__pyx_v_type_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("evaluate_single", 0);

  /* "saxonc.pyx":2655
 * 
 *         """
 *         cdef PyXdmNode val = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmAtomicValue aval = None
 *         py_string = xpath_str.encode('UTF-8') if xpath_str is not None else None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":2656
 *         """
 *         cdef PyXdmNode val = None
 *         cdef PyXdmAtomicValue aval = None             # <<<<<<<<<<<<<<
 *         py_string = xpath_str.encode('UTF-8') if xpath_str is not None else None
 *         c_xpath = py_string if xpath_str is not None else ""
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_aval = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)Py_None);

  /* "saxonc.pyx":2657
 *         cdef PyXdmNode val = None
 *         cdef PyXdmAtomicValue aval = None
 *         py_string = xpath_str.encode('UTF-8') if xpath_str is not None else None             # <<<<<<<<<<<<<<
 *         c_xpath = py_string if xpath_str is not None else ""
 * 
 */
  __pyx_t_2 = (__pyx_v_xpath_str != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_xpath_str, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2658
 *         cdef PyXdmAtomicValue aval = None
 *         py_string = xpath_str.encode('UTF-8') if xpath_str is not None else None
 *         c_xpath = py_string if xpath_str is not None else ""             # <<<<<<<<<<<<<<
 * 
 *         cdef saxoncClasses.XdmItem * xdmItem = self.thisxpptr.evaluateSingle(c_xpath)
 */
  __pyx_t_2 = (__pyx_v_xpath_str != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_string);
    __pyx_t_1 = __pyx_v_py_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_xpath = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2660
 *         c_xpath = py_string if xpath_str is not None else ""
 * 
 *         cdef saxoncClasses.XdmItem * xdmItem = self.thisxpptr.evaluateSingle(c_xpath)             # <<<<<<<<<<<<<<
 *         if xdmItem == NULL:
 *             return None
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_c_xpath); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 2660, __pyx_L1_error)
  __pyx_v_xdmItem = __pyx_v_self->thisxpptr->evaluateSingle(__pyx_t_6);

  /* "saxonc.pyx":2661
 * 
 *         cdef saxoncClasses.XdmItem * xdmItem = self.thisxpptr.evaluateSingle(c_xpath)
 *         if xdmItem == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef type_ = xdmItem.getType()
 */
  __pyx_t_2 = ((__pyx_v_xdmItem == NULL) != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":2662
 *         cdef saxoncClasses.XdmItem * xdmItem = self.thisxpptr.evaluateSingle(c_xpath)
 *         if xdmItem == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef type_ = xdmItem.getType()
 *         if type_ == 4:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":2661
 * 
 *         cdef saxoncClasses.XdmItem * xdmItem = self.thisxpptr.evaluateSingle(c_xpath)
 *         if xdmItem == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef type_ = xdmItem.getType()
 */
  }

  /* "saxonc.pyx":2663
 *         if xdmItem == NULL:
 *             return None
 *         cdef type_ = xdmItem.getType()             # <<<<<<<<<<<<<<
 *         if type_ == 4:
 *             aval = PyXdmAtomicValue()
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_xdmItem->getType()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_type_ = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2664
 *             return None
 *         cdef type_ = xdmItem.getType()
 *         if type_ == 4:             # <<<<<<<<<<<<<<
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmItem
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2664, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "saxonc.pyx":2665
 *         cdef type_ = xdmItem.getType()
 *         if type_ == 4:
 *             aval = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmItem
 *             return aval
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_aval, ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "saxonc.pyx":2666
 *         if type_ == 4:
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmItem             # <<<<<<<<<<<<<<
 *             return aval
 *         elif type_ == 3:
 */
    __pyx_v_aval->derivedaptr = ((XdmAtomicValue *)__pyx_v_xdmItem);
    __pyx_v_aval->__pyx_base.derivedptr = ((XdmAtomicValue *)__pyx_v_xdmItem);
    __pyx_v_aval->__pyx_base.__pyx_base.thisvptr = ((XdmAtomicValue *)__pyx_v_xdmItem);

    /* "saxonc.pyx":2667
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmItem
 *             return aval             # <<<<<<<<<<<<<<
 *         elif type_ == 3:
 *             val = PyXdmNode()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_aval));
    __pyx_r = ((PyObject *)__pyx_v_aval);
    goto __pyx_L0;

    /* "saxonc.pyx":2664
 *             return None
 *         cdef type_ = xdmItem.getType()
 *         if type_ == 4:             # <<<<<<<<<<<<<<
 *             aval = PyXdmAtomicValue()
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmItem
 */
  }

  /* "saxonc.pyx":2668
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmItem
 *             return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *             val = PyXdmNode()
 *             val.derivednptr = val.derivedptr = val.thisvptr = <saxoncClasses.XdmNode*>xdmItem
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_type_, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2668, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "saxonc.pyx":2669
 *             return aval
 *         elif type_ == 3:
 *             val = PyXdmNode()             # <<<<<<<<<<<<<<
 *             val.derivednptr = val.derivedptr = val.thisvptr = <saxoncClasses.XdmNode*>xdmItem
 *             return val
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "saxonc.pyx":2670
 *         elif type_ == 3:
 *             val = PyXdmNode()
 *             val.derivednptr = val.derivedptr = val.thisvptr = <saxoncClasses.XdmNode*>xdmItem             # <<<<<<<<<<<<<<
 *             return val
 *         else:
 */
    __pyx_v_val->derivednptr = ((XdmNode *)__pyx_v_xdmItem);
    __pyx_v_val->__pyx_base.derivedptr = ((XdmNode *)__pyx_v_xdmItem);
    __pyx_v_val->__pyx_base.__pyx_base.thisvptr = ((XdmNode *)__pyx_v_xdmItem);

    /* "saxonc.pyx":2671
 *             val = PyXdmNode()
 *             val.derivednptr = val.derivedptr = val.thisvptr = <saxoncClasses.XdmNode*>xdmItem
 *             return val             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;

    /* "saxonc.pyx":2668
 *             aval.derivedaptr = aval.derivedptr = aval.thisvptr = <saxoncClasses.XdmAtomicValue *>xdmItem
 *             return aval
 *         elif type_ == 3:             # <<<<<<<<<<<<<<
 *             val = PyXdmNode()
 *             val.derivednptr = val.derivedptr = val.thisvptr = <saxoncClasses.XdmNode*>xdmItem
 */
  }

  /* "saxonc.pyx":2673
 *             return val
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "saxonc.pyx":2644
 *                 return val
 * 
 *      def evaluate_single(self, xpath_str):             # <<<<<<<<<<<<<<
 *         """
 *         evaluate_single(self, xpath_str)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.evaluate_single", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XDECREF((PyObject *)__pyx_v_aval);
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XDECREF(__pyx_v_c_xpath);
  __Pyx_XDECREF(__pyx_v_type_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2676
 * 
 * 
 *      def set_context(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         set_context(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_11set_context(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_10set_context[] = "\n        set_context(self, **kwds)\n        Set the context for the XPath query\n   \n        Args:\n            **kwds : Possible keyword argument file_name (str) or xdm_item (PyXdmItem)\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_11set_context(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_context (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_context", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_context", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_10set_context(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_10set_context(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_py_error_message = NULL;
  PyObject *__pyx_v_py_value = 0;
  PyObject *__pyx_v_py_value_string = 0;
  char *__pyx_v_c_source;
  struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_xdm_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_context", 0);

  /* "saxonc.pyx":2685
 * 
 *         """
 *         py_error_message = "Error: set_context should only contain one of the following keyword arguments: (file_name|xdm_item)"             # <<<<<<<<<<<<<<
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(__pyx_kp_s_Error_set_context_should_only_co);
  __pyx_v_py_error_message = __pyx_kp_s_Error_set_context_should_only_co;

  /* "saxonc.pyx":2686
 *         """
 *         py_error_message = "Error: set_context should only contain one of the following keyword arguments: (file_name|xdm_item)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2686, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":2687
 *         py_error_message = "Error: set_context should only contain one of the following keyword arguments: (file_name|xdm_item)"
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         cdef py_value = None
 *         cdef py_value_string = None
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2687, __pyx_L1_error)

    /* "saxonc.pyx":2686
 *         """
 *         py_error_message = "Error: set_context should only contain one of the following keyword arguments: (file_name|xdm_item)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  }

  /* "saxonc.pyx":2688
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 *         cdef py_value = None             # <<<<<<<<<<<<<<
 *         cdef py_value_string = None
 *         cdef char * c_source
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value = Py_None;

  /* "saxonc.pyx":2689
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 *         cdef py_value_string = None             # <<<<<<<<<<<<<<
 *         cdef char * c_source
 *         cdef PyXdmItem xdm_item = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value_string = Py_None;

  /* "saxonc.pyx":2691
 *         cdef py_value_string = None
 *         cdef char * c_source
 *         cdef PyXdmItem xdm_item = None             # <<<<<<<<<<<<<<
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_xdm_item = ((struct __pyx_obj_6saxonc_PyXdmItem *)Py_None);

  /* "saxonc.pyx":2692
 *         cdef char * c_source
 *         cdef PyXdmItem xdm_item = None
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_file_name, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2692, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "saxonc.pyx":2693
 *         cdef PyXdmItem xdm_item = None
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]             # <<<<<<<<<<<<<<
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_py_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2694
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None             # <<<<<<<<<<<<<<
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxpptr.setContextFile(c_source)
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __Pyx_DECREF_SET(__pyx_v_py_value_string, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2695
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""             # <<<<<<<<<<<<<<
 *             self.thisxpptr.setContextFile(c_source)
 *         elif "xdm_item" in kwds:
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 2695, __pyx_L1_error)
      __pyx_t_8 = __pyx_t_9;
    } else {
      __pyx_t_8 = ((char *)"");
    }
    __pyx_v_c_source = __pyx_t_8;

    /* "saxonc.pyx":2696
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxpptr.setContextFile(c_source)             # <<<<<<<<<<<<<<
 *         elif "xdm_item" in kwds:
 *             xdm_item = kwds["xdm_item"]
 */
    __pyx_v_self->thisxpptr->setContextFile(__pyx_v_c_source);

    /* "saxonc.pyx":2692
 *         cdef char * c_source
 *         cdef PyXdmItem xdm_item = None
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":2697
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxpptr.setContextFile(c_source)
 *         elif "xdm_item" in kwds:             # <<<<<<<<<<<<<<
 *             xdm_item = kwds["xdm_item"]
 *             xdm_item.derivedptr.incrementRefCount()
 */
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_xdm_item, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 2697, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_2)) {

    /* "saxonc.pyx":2698
 *             self.thisxpptr.setContextFile(c_source)
 *         elif "xdm_item" in kwds:
 *             xdm_item = kwds["xdm_item"]             # <<<<<<<<<<<<<<
 *             xdm_item.derivedptr.incrementRefCount()
 *             self.thisxpptr.setContextItem(xdm_item.derivedptr)
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xdm_item); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6saxonc_PyXdmItem))))) __PYX_ERR(1, 2698, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_xdm_item, ((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2699
 *         elif "xdm_item" in kwds:
 *             xdm_item = kwds["xdm_item"]
 *             xdm_item.derivedptr.incrementRefCount()             # <<<<<<<<<<<<<<
 *             self.thisxpptr.setContextItem(xdm_item.derivedptr)
 *         else:
 */
    __pyx_v_xdm_item->derivedptr->incrementRefCount();

    /* "saxonc.pyx":2700
 *             xdm_item = kwds["xdm_item"]
 *             xdm_item.derivedptr.incrementRefCount()
 *             self.thisxpptr.setContextItem(xdm_item.derivedptr)             # <<<<<<<<<<<<<<
 *         else:
 *           raise Exception(py_error_message)
 */
    __pyx_v_self->thisxpptr->setContextItem(__pyx_v_xdm_item->derivedptr);

    /* "saxonc.pyx":2697
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thisxpptr.setContextFile(c_source)
 *         elif "xdm_item" in kwds:             # <<<<<<<<<<<<<<
 *             xdm_item = kwds["xdm_item"]
 *             xdm_item.derivedptr.incrementRefCount()
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":2702
 *             self.thisxpptr.setContextItem(xdm_item.derivedptr)
 *         else:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 * 
 *      def set_cwd(self, cwd):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2702, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "saxonc.pyx":2676
 * 
 * 
 *      def set_context(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         set_context(self, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.set_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_error_message);
  __Pyx_XDECREF(__pyx_v_py_value);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_xdm_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2704
 *           raise Exception(py_error_message)
 * 
 *      def set_cwd(self, cwd):             # <<<<<<<<<<<<<<
 *         """
 *         set_cwd(self, cwd)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_13set_cwd(PyObject *__pyx_v_self, PyObject *__pyx_v_cwd); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_12set_cwd[] = "\n        set_cwd(self, cwd)\n        Set the current working directory.\n\n        Args:\n            cwd (str): current working directory\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_13set_cwd(PyObject *__pyx_v_self, PyObject *__pyx_v_cwd) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cwd (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_12set_cwd(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_cwd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_12set_cwd(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_cwd) {
  PyObject *__pyx_v_py_cwd_string = NULL;
  char *__pyx_v_c_cwd;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cwd", 0);

  /* "saxonc.pyx":2712
 *             cwd (str): current working directory
 *         """
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_cwd = py_cwd_string if cwd is not None else ""
 *         self.thisxpptr.setcwd(c_cwd)
 */
  __pyx_t_2 = (__pyx_v_cwd != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cwd, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_cwd_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2713
 *         """
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None
 *         cdef char * c_cwd = py_cwd_string if cwd is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxpptr.setcwd(c_cwd)
 * 
 */
  __pyx_t_2 = (__pyx_v_cwd != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_cwd_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 2713, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_cwd = __pyx_t_6;

  /* "saxonc.pyx":2714
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None
 *         cdef char * c_cwd = py_cwd_string if cwd is not None else ""
 *         self.thisxpptr.setcwd(c_cwd)             # <<<<<<<<<<<<<<
 * 
 *      def effective_boolean_value(self, xpath_str):
 */
  __pyx_v_self->thisxpptr->setcwd(__pyx_v_c_cwd);

  /* "saxonc.pyx":2704
 *           raise Exception(py_error_message)
 * 
 *      def set_cwd(self, cwd):             # <<<<<<<<<<<<<<
 *         """
 *         set_cwd(self, cwd)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.set_cwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_cwd_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2716
 *         self.thisxpptr.setcwd(c_cwd)
 * 
 *      def effective_boolean_value(self, xpath_str):             # <<<<<<<<<<<<<<
 *         """
 *         effective_boolean_value(self, xpath_str)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_15effective_boolean_value(PyObject *__pyx_v_self, PyObject *__pyx_v_xpath_str); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_14effective_boolean_value[] = "\n        effective_boolean_value(self, xpath_str)\n        Evaluate the XPath expression, returning the effective boolean value of the result.\n    \n        Args:\n            xpath_str (str): Supplied as a string\n\n        Returns:\n            boolean: The result is a boolean value.\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_15effective_boolean_value(PyObject *__pyx_v_self, PyObject *__pyx_v_xpath_str) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("effective_boolean_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_14effective_boolean_value(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_xpath_str));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_14effective_boolean_value(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_xpath_str) {
  PyObject *__pyx_v_py_value_string = NULL;
  PyObject *__pyx_v_c_xpath = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("effective_boolean_value", 0);

  /* "saxonc.pyx":2728
 *         """
 * 
 *         py_value_string = xpath_str.encode('UTF-8') if xpath_str is not None else None             # <<<<<<<<<<<<<<
 *         c_xpath = py_value_string if xpath_str is not None else ""
 * 
 */
  __pyx_t_2 = (__pyx_v_xpath_str != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_xpath_str, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2729
 * 
 *         py_value_string = xpath_str.encode('UTF-8') if xpath_str is not None else None
 *         c_xpath = py_value_string if xpath_str is not None else ""             # <<<<<<<<<<<<<<
 * 
 *         return self.thisxpptr.effectiveBooleanValue(c_xpath)
 */
  __pyx_t_2 = (__pyx_v_xpath_str != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_value_string);
    __pyx_t_1 = __pyx_v_py_value_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_xpath = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2731
 *         c_xpath = py_value_string if xpath_str is not None else ""
 * 
 *         return self.thisxpptr.effectiveBooleanValue(c_xpath)             # <<<<<<<<<<<<<<
 * 
 *      def set_parameter(self, name, PyXdmValue value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_c_xpath); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 2731, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisxpptr->effectiveBooleanValue(__pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2716
 *         self.thisxpptr.setcwd(c_cwd)
 * 
 *      def effective_boolean_value(self, xpath_str):             # <<<<<<<<<<<<<<
 *         """
 *         effective_boolean_value(self, xpath_str)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.effective_boolean_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF(__pyx_v_c_xpath);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2733
 *         return self.thisxpptr.effectiveBooleanValue(c_xpath)
 * 
 *      def set_parameter(self, name, PyXdmValue value):             # <<<<<<<<<<<<<<
 *         """
 *         set_parameter(self, name, PyXdmValue value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_17set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_16set_parameter[] = "\n        set_parameter(self, name, PyXdmValue value)\n        Set the value of a XPath parameter\n\n        Args:\n            name (str): the name of the XPath parameter, as a string. For namespaced parameter use the JAXP solution i.e. \"{uri}name\n            value (PyXdmValue): the value of the query parameter, or None to clear a previously set value\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_17set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, 1); __PYX_ERR(1, 2733, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_parameter") < 0)) __PYX_ERR(1, 2733, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = ((struct __pyx_obj_6saxonc_PyXdmValue *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2733, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_6saxonc_PyXdmValue, 1, "value", 0))) __PYX_ERR(1, 2733, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_16set_parameter(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_16set_parameter(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value) {
  char const *__pyx_v_c_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_parameter", 0);

  /* "saxonc.pyx":2743
 * 
 *         """
 *         cdef const char * c_str = make_c_str(name)             # <<<<<<<<<<<<<<
 *         if c_str is not NULL:
 *             self.thisxpptr.setParameter(c_str, value.thisvptr)
 */
  if (!(likely(PyString_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_name)->tp_name), 0))) __PYX_ERR(1, 2743, __pyx_L1_error)
  __pyx_v_c_str = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_name));

  /* "saxonc.pyx":2744
 *         """
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:             # <<<<<<<<<<<<<<
 *             self.thisxpptr.setParameter(c_str, value.thisvptr)
 * 
 */
  __pyx_t_1 = ((__pyx_v_c_str != NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":2745
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:
 *             self.thisxpptr.setParameter(c_str, value.thisvptr)             # <<<<<<<<<<<<<<
 * 
 *      def remove_parameter(self, name):
 */
    __pyx_v_self->thisxpptr->setParameter(__pyx_v_c_str, __pyx_v_value->thisvptr);

    /* "saxonc.pyx":2744
 *         """
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:             # <<<<<<<<<<<<<<
 *             self.thisxpptr.setParameter(c_str, value.thisvptr)
 * 
 */
  }

  /* "saxonc.pyx":2733
 *         return self.thisxpptr.effectiveBooleanValue(c_xpath)
 * 
 *      def set_parameter(self, name, PyXdmValue value):             # <<<<<<<<<<<<<<
 *         """
 *         set_parameter(self, name, PyXdmValue value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2747
 *             self.thisxpptr.setParameter(c_str, value.thisvptr)
 * 
 *      def remove_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         remove_parameter(self, name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_19remove_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_18remove_parameter[] = "\n        remove_parameter(self, name)\n        Remove the parameter given by name from the PyXPathProcessor. The parameter will not have any affect on the XPath if it has not yet been executed\n\n        Args:\n            name (str): The name of the XPath parameter\n\n        Returns:\n            bool: True if the removal of the parameter has been successful, False otherwise.\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_19remove_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_parameter (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_18remove_parameter(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_18remove_parameter(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_parameter", 0);

  /* "saxonc.pyx":2759
 * 
 *         """
 *         self.thisxpptr.removeParameter(name)             # <<<<<<<<<<<<<<
 *      def set_property(self, name, value):
 *         """
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 2759, __pyx_L1_error)
  (void)(__pyx_v_self->thisxpptr->removeParameter(__pyx_t_1));

  /* "saxonc.pyx":2747
 *             self.thisxpptr.setParameter(c_str, value.thisvptr)
 * 
 *      def remove_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         remove_parameter(self, name)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.remove_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2760
 *         """
 *         self.thisxpptr.removeParameter(name)
 *      def set_property(self, name, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_property(self, name, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_21set_property(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_20set_property[] = "\n        set_property(self, name, value)\n        Set a property specific to the processor in use.\n \n        Args:\n            name (str): The name of the property\n            value (str): The value of the property\n\n        Example:\n            PyXPathProcessor: set serialization properties (names start with '!' i.e. name \"!method\" -> \"xml\")\r\n            'resources': directory to find Saxon data files,\r \n            's': source as file name,\r\n            'extc': REgister native library to be used with extension functions\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_21set_property(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_property (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_property", 1, 2, 2, 1); __PYX_ERR(1, 2760, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_property") < 0)) __PYX_ERR(1, 2760, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_property", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2760, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.set_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_20set_property(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_20set_property(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_py_name_string = NULL;
  PyObject *__pyx_v_c_name = NULL;
  PyObject *__pyx_v_py_value_string = NULL;
  PyObject *__pyx_v_c_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  char const *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_property", 0);

  /* "saxonc.pyx":2776
 *         """
 * 
 *         py_name_string = name.encode('UTF-8') if name is not None else None             # <<<<<<<<<<<<<<
 *         c_name = py_name_string if name is not None else ""
 * 
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_name_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2777
 * 
 *         py_name_string = name.encode('UTF-8') if name is not None else None
 *         c_name = py_name_string if name is not None else ""             # <<<<<<<<<<<<<<
 * 
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_name_string);
    __pyx_t_1 = __pyx_v_py_name_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2779
 *         c_name = py_name_string if name is not None else ""
 * 
 *         py_value_string = value.encode('UTF-8') if value is not None else None             # <<<<<<<<<<<<<<
 *         c_value = py_value_string if value is not None else ""
 *         self.thisxpptr.setProperty(c_name, c_value)
 */
  __pyx_t_2 = (__pyx_v_value != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2780
 * 
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         c_value = py_value_string if value is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxpptr.setProperty(c_name, c_value)
 *      def declare_namespace(self, prefix, uri):
 */
  __pyx_t_2 = (__pyx_v_value != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_value_string);
    __pyx_t_1 = __pyx_v_py_value_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_value = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2781
 *         py_value_string = value.encode('UTF-8') if value is not None else None
 *         c_value = py_value_string if value is not None else ""
 *         self.thisxpptr.setProperty(c_name, c_value)             # <<<<<<<<<<<<<<
 *      def declare_namespace(self, prefix, uri):
 *         """
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_c_name); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 2781, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_c_value); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 2781, __pyx_L1_error)
  __pyx_v_self->thisxpptr->setProperty(__pyx_t_6, __pyx_t_7);

  /* "saxonc.pyx":2760
 *         """
 *         self.thisxpptr.removeParameter(name)
 *      def set_property(self, name, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_property(self, name, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.set_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_name_string);
  __Pyx_XDECREF(__pyx_v_c_name);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF(__pyx_v_c_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2782
 *         c_value = py_value_string if value is not None else ""
 *         self.thisxpptr.setProperty(c_name, c_value)
 *      def declare_namespace(self, prefix, uri):             # <<<<<<<<<<<<<<
 *         """
 *         declare_namespace(self, prefix, uri)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_23declare_namespace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_22declare_namespace[] = "\n        declare_namespace(self, prefix, uri)\n        Declare a namespace binding as part of the static context for XPath expressions compiled using this compiler\n        Args:\n            prefix (str): The namespace prefix. If the value is a zero-length string, this method sets the default namespace\n                          for elements and types.\n            uri (uri) : The namespace URI. It is possible to specify a zero-length string to \"undeclare\" a namespace;\n                        in this case the prefix will not be available for use, except in the case where the prefix is also a\n                        zero length string, in which case the absence of a prefix implies that the name is in no namespace.\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_23declare_namespace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_prefix = 0;
  PyObject *__pyx_v_uri = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("declare_namespace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_prefix,&__pyx_n_s_uri,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("declare_namespace", 1, 2, 2, 1); __PYX_ERR(1, 2782, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "declare_namespace") < 0)) __PYX_ERR(1, 2782, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_prefix = values[0];
    __pyx_v_uri = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("declare_namespace", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2782, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.declare_namespace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_22declare_namespace(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), __pyx_v_prefix, __pyx_v_uri);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_22declare_namespace(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_prefix, PyObject *__pyx_v_uri) {
  PyObject *__pyx_v_py_prefix_string = NULL;
  PyObject *__pyx_v_c_prefix = NULL;
  PyObject *__pyx_v_py_uri_string = NULL;
  PyObject *__pyx_v_c_uri = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  char const *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("declare_namespace", 0);

  /* "saxonc.pyx":2794
 * 
 *         """
 *         py_prefix_string = prefix.encode('UTF-8') if prefix is not None else None             # <<<<<<<<<<<<<<
 *         c_prefix = py_prefix_string if prefix is not None else ""
 *         py_uri_string = uri.encode('UTF-8') if uri is not None else None
 */
  __pyx_t_2 = (__pyx_v_prefix != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_prefix, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_prefix_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2795
 *         """
 *         py_prefix_string = prefix.encode('UTF-8') if prefix is not None else None
 *         c_prefix = py_prefix_string if prefix is not None else ""             # <<<<<<<<<<<<<<
 *         py_uri_string = uri.encode('UTF-8') if uri is not None else None
 *         c_uri = py_uri_string if uri is not None else ""
 */
  __pyx_t_2 = (__pyx_v_prefix != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_prefix_string);
    __pyx_t_1 = __pyx_v_py_prefix_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_prefix = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2796
 *         py_prefix_string = prefix.encode('UTF-8') if prefix is not None else None
 *         c_prefix = py_prefix_string if prefix is not None else ""
 *         py_uri_string = uri.encode('UTF-8') if uri is not None else None             # <<<<<<<<<<<<<<
 *         c_uri = py_uri_string if uri is not None else ""
 *         self.thisxpptr.declareNamespace(c_prefix, c_uri)
 */
  __pyx_t_2 = (__pyx_v_uri != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_uri, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_uri_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2797
 *         c_prefix = py_prefix_string if prefix is not None else ""
 *         py_uri_string = uri.encode('UTF-8') if uri is not None else None
 *         c_uri = py_uri_string if uri is not None else ""             # <<<<<<<<<<<<<<
 *         self.thisxpptr.declareNamespace(c_prefix, c_uri)
 * 
 */
  __pyx_t_2 = (__pyx_v_uri != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_uri_string);
    __pyx_t_1 = __pyx_v_py_uri_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_uri = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2798
 *         py_uri_string = uri.encode('UTF-8') if uri is not None else None
 *         c_uri = py_uri_string if uri is not None else ""
 *         self.thisxpptr.declareNamespace(c_prefix, c_uri)             # <<<<<<<<<<<<<<
 * 
 *      def set_backwards_compatible(self, option):
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_c_prefix); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 2798, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_c_uri); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 2798, __pyx_L1_error)
  __pyx_v_self->thisxpptr->declareNamespace(__pyx_t_6, __pyx_t_7);

  /* "saxonc.pyx":2782
 *         c_value = py_value_string if value is not None else ""
 *         self.thisxpptr.setProperty(c_name, c_value)
 *      def declare_namespace(self, prefix, uri):             # <<<<<<<<<<<<<<
 *         """
 *         declare_namespace(self, prefix, uri)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.declare_namespace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_prefix_string);
  __Pyx_XDECREF(__pyx_v_c_prefix);
  __Pyx_XDECREF(__pyx_v_py_uri_string);
  __Pyx_XDECREF(__pyx_v_c_uri);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2800
 *         self.thisxpptr.declareNamespace(c_prefix, c_uri)
 * 
 *      def set_backwards_compatible(self, option):             # <<<<<<<<<<<<<<
 *         cdef bool c_option
 *         c_option = option
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_25set_backwards_compatible(PyObject *__pyx_v_self, PyObject *__pyx_v_option); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_25set_backwards_compatible(PyObject *__pyx_v_self, PyObject *__pyx_v_option) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_backwards_compatible (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_24set_backwards_compatible(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_option));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_24set_backwards_compatible(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_option) {
  bool __pyx_v_c_option;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_backwards_compatible", 0);

  /* "saxonc.pyx":2802
 *      def set_backwards_compatible(self, option):
 *         cdef bool c_option
 *         c_option = option             # <<<<<<<<<<<<<<
 *         self.thisxpptr.setBackwardsCompatible(c_option)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_option); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 2802, __pyx_L1_error)
  __pyx_v_c_option = __pyx_t_1;

  /* "saxonc.pyx":2803
 *         cdef bool c_option
 *         c_option = option
 *         self.thisxpptr.setBackwardsCompatible(c_option)             # <<<<<<<<<<<<<<
 * 
 *      def set_caching(self, is_caching):
 */
  __pyx_v_self->thisxpptr->setBackwardsCompatible(__pyx_v_c_option);

  /* "saxonc.pyx":2800
 *         self.thisxpptr.declareNamespace(c_prefix, c_uri)
 * 
 *      def set_backwards_compatible(self, option):             # <<<<<<<<<<<<<<
 *         cdef bool c_option
 *         c_option = option
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.set_backwards_compatible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2805
 *         self.thisxpptr.setBackwardsCompatible(c_option)
 * 
 *      def set_caching(self, is_caching):             # <<<<<<<<<<<<<<
 *          cdef bool c_is_caching
 *          c_is_caching = is_caching
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_27set_caching(PyObject *__pyx_v_self, PyObject *__pyx_v_is_caching); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_27set_caching(PyObject *__pyx_v_self, PyObject *__pyx_v_is_caching) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_caching (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_26set_caching(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_is_caching));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_26set_caching(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_is_caching) {
  bool __pyx_v_c_is_caching;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_caching", 0);

  /* "saxonc.pyx":2807
 *      def set_caching(self, is_caching):
 *          cdef bool c_is_caching
 *          c_is_caching = is_caching             # <<<<<<<<<<<<<<
 *          self.thisxpptr.setCaching(c_is_caching)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_caching); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 2807, __pyx_L1_error)
  __pyx_v_c_is_caching = __pyx_t_1;

  /* "saxonc.pyx":2808
 *          cdef bool c_is_caching
 *          c_is_caching = is_caching
 *          self.thisxpptr.setCaching(c_is_caching)             # <<<<<<<<<<<<<<
 * 
 *      def import_schema_namespace(self, uri):
 */
  __pyx_v_self->thisxpptr->setCaching(__pyx_v_c_is_caching);

  /* "saxonc.pyx":2805
 *         self.thisxpptr.setBackwardsCompatible(c_option)
 * 
 *      def set_caching(self, is_caching):             # <<<<<<<<<<<<<<
 *          cdef bool c_is_caching
 *          c_is_caching = is_caching
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.set_caching", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2810
 *          self.thisxpptr.setCaching(c_is_caching)
 * 
 *      def import_schema_namespace(self, uri):             # <<<<<<<<<<<<<<
 *          py_uri_string = uri.encode('UTF-8') if uri is not None else None
 *          c_name = py_uri_string if uri is not None else ""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_29import_schema_namespace(PyObject *__pyx_v_self, PyObject *__pyx_v_uri); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_29import_schema_namespace(PyObject *__pyx_v_self, PyObject *__pyx_v_uri) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("import_schema_namespace (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_28import_schema_namespace(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_uri));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_28import_schema_namespace(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_uri) {
  PyObject *__pyx_v_py_uri_string = NULL;
  PyObject *__pyx_v_c_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_schema_namespace", 0);

  /* "saxonc.pyx":2811
 * 
 *      def import_schema_namespace(self, uri):
 *          py_uri_string = uri.encode('UTF-8') if uri is not None else None             # <<<<<<<<<<<<<<
 *          c_name = py_uri_string if uri is not None else ""
 *          self.thisxpptr.importSchemaNamespace(c_name)
 */
  __pyx_t_2 = (__pyx_v_uri != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_uri, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_uri_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2812
 *      def import_schema_namespace(self, uri):
 *          py_uri_string = uri.encode('UTF-8') if uri is not None else None
 *          c_name = py_uri_string if uri is not None else ""             # <<<<<<<<<<<<<<
 *          self.thisxpptr.importSchemaNamespace(c_name)
 * 
 */
  __pyx_t_2 = (__pyx_v_uri != Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_v_py_uri_string);
    __pyx_t_1 = __pyx_v_py_uri_string;
  } else {
    __Pyx_INCREF(__pyx_kp_s__16);
    __pyx_t_1 = __pyx_kp_s__16;
  }
  __pyx_v_c_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2813
 *          py_uri_string = uri.encode('UTF-8') if uri is not None else None
 *          c_name = py_uri_string if uri is not None else ""
 *          self.thisxpptr.importSchemaNamespace(c_name)             # <<<<<<<<<<<<<<
 * 
 *      def clear_parameters(self):
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_c_name); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 2813, __pyx_L1_error)
  __pyx_v_self->thisxpptr->importSchemaNamespace(__pyx_t_6);

  /* "saxonc.pyx":2810
 *          self.thisxpptr.setCaching(c_is_caching)
 * 
 *      def import_schema_namespace(self, uri):             # <<<<<<<<<<<<<<
 *          py_uri_string = uri.encode('UTF-8') if uri is not None else None
 *          c_name = py_uri_string if uri is not None else ""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.import_schema_namespace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_uri_string);
  __Pyx_XDECREF(__pyx_v_c_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2815
 *          self.thisxpptr.importSchemaNamespace(c_name)
 * 
 *      def clear_parameters(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_31clear_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_30clear_parameters[] = "\n        clear_parameter(self)\n        Clear all parameters set on the processor\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_31clear_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_parameters (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_30clear_parameters(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_30clear_parameters(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_parameters", 0);

  /* "saxonc.pyx":2820
 *         Clear all parameters set on the processor
 *         """
 *         self.thisxpptr.clearParameters()             # <<<<<<<<<<<<<<
 *      def clear_properties(self):
 *         """
 */
  __pyx_v_self->thisxpptr->clearParameters();

  /* "saxonc.pyx":2815
 *          self.thisxpptr.importSchemaNamespace(c_name)
 * 
 *      def clear_parameters(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2821
 *         """
 *         self.thisxpptr.clearParameters()
 *      def clear_properties(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_33clear_properties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_32clear_properties[] = "\n        clear_parameter(self)\n        Clear all properties set on the processor\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_33clear_properties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_properties (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_32clear_properties(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_32clear_properties(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_properties", 0);

  /* "saxonc.pyx":2826
 *         Clear all properties set on the processor
 *         """
 *         self.thisxpptr.clearProperties()             # <<<<<<<<<<<<<<
 *      def check_exception(self):
 *         """
 */
  __pyx_v_self->thisxpptr->clearProperties();

  /* "saxonc.pyx":2821
 *         """
 *         self.thisxpptr.clearParameters()
 *      def clear_properties(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2827
 *         """
 *         self.thisxpptr.clearProperties()
 *      def check_exception(self):             # <<<<<<<<<<<<<<
 *         """
 *         check_exception(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_35check_exception(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_34check_exception[] = "\n        check_exception(self)\n        Check for exception thrown and get message of the exception.\n  \n        Returns:\n            str: Returns the exception message if thrown otherwise return None\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_35check_exception(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_exception (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_34check_exception(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_34check_exception(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_exception", 0);

  /* "saxonc.pyx":2836
 * 
 *         """
 *         return self.thisxpptr.checkException()             # <<<<<<<<<<<<<<
 *      def exception_occurred(self):
 *         """
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->thisxpptr->checkException()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2827
 *         """
 *         self.thisxpptr.clearProperties()
 *      def check_exception(self):             # <<<<<<<<<<<<<<
 *         """
 *         check_exception(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.check_exception", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2837
 *         """
 *         return self.thisxpptr.checkException()
 *      def exception_occurred(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_occurred(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_37exception_occurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_36exception_occurred[] = "\n        exception_occurred(self)\n        Check if an exception has occurred internally within Saxon/C\n\n        Returns:\n            boolean: True or False if an exception has been reported internally in Saxon/C\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_37exception_occurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_occurred (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_36exception_occurred(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_36exception_occurred(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exception_occurred", 0);

  /* "saxonc.pyx":2846
 *         """
 * 
 *         return self.thisxpptr.exceptionCount() >0             # <<<<<<<<<<<<<<
 * 
 *      def exception_clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisxpptr->exceptionCount() > 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2837
 *         """
 *         return self.thisxpptr.checkException()
 *      def exception_occurred(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_occurred(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.exception_occurred", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2848
 *         return self.thisxpptr.exceptionCount() >0
 * 
 *      def exception_clear(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_clear(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_39exception_clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_38exception_clear[] = "\n        exception_clear(self)\n        Clear any exception thrown\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_39exception_clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_clear (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_38exception_clear(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_38exception_clear(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_clear", 0);

  /* "saxonc.pyx":2854
 * 
 *         """
 *         self.thisxpptr.exceptionClear()             # <<<<<<<<<<<<<<
 *      def exception_count(self):
 *         """
 */
  __pyx_v_self->thisxpptr->exceptionClear();

  /* "saxonc.pyx":2848
 *         return self.thisxpptr.exceptionCount() >0
 * 
 *      def exception_clear(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_clear(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2855
 *         """
 *         self.thisxpptr.exceptionClear()
 *      def exception_count(self):             # <<<<<<<<<<<<<<
 *         """
 *         excepton_count(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_41exception_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_40exception_count[] = "\n        excepton_count(self)\n        Get number of errors reported during execution.\n\n        Returns:\n            int: Count of the exceptions thrown during execution\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_41exception_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_count (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_40exception_count(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_40exception_count(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exception_count", 0);

  /* "saxonc.pyx":2863
 *             int: Count of the exceptions thrown during execution
 *         """
 *         return self.thisxpptr.exceptionCount()             # <<<<<<<<<<<<<<
 *      def get_error_message(self, index):
 *         """
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisxpptr->exceptionCount()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2855
 *         """
 *         self.thisxpptr.exceptionClear()
 *      def exception_count(self):             # <<<<<<<<<<<<<<
 *         """
 *         excepton_count(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.exception_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2864
 *         """
 *         return self.thisxpptr.exceptionCount()
 *      def get_error_message(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_message(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_43get_error_message(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_42get_error_message[] = "\n        get_error_message(self, index)\n        A transformation may have a number of errors reported against it. Get the ith error message if there are any errors\n\n        Args:\n            index (int): The i'th exception\n        \n        Returns:\n            str: The message of the i'th exception. Return None if the i'th exception does not exist.\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_43get_error_message(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_error_message (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_42get_error_message(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_42get_error_message(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_error_message", 0);

  /* "saxonc.pyx":2875
 *             str: The message of the i'th exception. Return None if the i'th exception does not exist.
 *         """
 *         return make_py_str(self.thisxpptr.getErrorMessage(index))             # <<<<<<<<<<<<<<
 *      def get_error_code(self, index):
 *         """
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 2875, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_6saxonc_make_py_str(__pyx_v_self->thisxpptr->getErrorMessage(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2864
 *         """
 *         return self.thisxpptr.exceptionCount()
 *      def get_error_message(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_message(self, index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.get_error_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2876
 *         """
 *         return make_py_str(self.thisxpptr.getErrorMessage(index))
 *      def get_error_code(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_code(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_45get_error_code(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_6saxonc_16PyXPathProcessor_44get_error_code[] = "\n        get_error_code(self, index)\n        A transformation may have a number of errors reported against it. Get the i'th error code if there are any errors\n\n        Args:\n            index (int): The i'th exception\n        \n        Returns:\n            str: The error code associated with the i'th exception. Return None if the i'th exception does not exist.\n\n        ";
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_45get_error_code(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_error_code (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_44get_error_code(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_44get_error_code(struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_error_code", 0);

  /* "saxonc.pyx":2888
 * 
 *         """
 *         return make_py_str(self.thisxpptr.getErrorCode(index))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 2888, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_6saxonc_make_py_str(__pyx_v_self->thisxpptr->getErrorCode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":2876
 *         """
 *         return make_py_str(self.thisxpptr.getErrorMessage(index))
 *      def get_error_code(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_code(self, index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.get_error_code", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_47__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_47__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_46__reduce_cython__(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_46__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_49__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXPathProcessor_49__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXPathProcessor_48__setstate_cython__(((struct __pyx_obj_6saxonc_PyXPathProcessor *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXPathProcessor_48__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXPathProcessor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXPathProcessor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2896
 *      cdef saxoncClasses.SchemaValidator *thissvptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thissvptr = NULL
 *      def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6saxonc_17PySchemaValidator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6saxonc_17PySchemaValidator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator___cinit__(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6saxonc_17PySchemaValidator___cinit__(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "saxonc.pyx":2897
 * 
 *      def __cinit__(self):
 *         self.thissvptr = NULL             # <<<<<<<<<<<<<<
 *      def __dealloc__(self):
 *         if self.thissvptr != NULL:
 */
  __pyx_v_self->thissvptr = NULL;

  /* "saxonc.pyx":2896
 *      cdef saxoncClasses.SchemaValidator *thissvptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thissvptr = NULL
 *      def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2898
 *      def __cinit__(self):
 *         self.thissvptr = NULL
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thissvptr != NULL:
 *            del self.thissvptr
 */

/* Python wrapper */
static void __pyx_pw_6saxonc_17PySchemaValidator_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6saxonc_17PySchemaValidator_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6saxonc_17PySchemaValidator_2__dealloc__(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6saxonc_17PySchemaValidator_2__dealloc__(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "saxonc.pyx":2899
 *         self.thissvptr = NULL
 *      def __dealloc__(self):
 *         if self.thissvptr != NULL:             # <<<<<<<<<<<<<<
 *            del self.thissvptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->thissvptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":2900
 *      def __dealloc__(self):
 *         if self.thissvptr != NULL:
 *            del self.thissvptr             # <<<<<<<<<<<<<<
 * 
 *      def set_cwd(self, cwd):
 */
    delete __pyx_v_self->thissvptr;

    /* "saxonc.pyx":2899
 *         self.thissvptr = NULL
 *      def __dealloc__(self):
 *         if self.thissvptr != NULL:             # <<<<<<<<<<<<<<
 *            del self.thissvptr
 * 
 */
  }

  /* "saxonc.pyx":2898
 *      def __cinit__(self):
 *         self.thissvptr = NULL
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thissvptr != NULL:
 *            del self.thissvptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "saxonc.pyx":2902
 *            del self.thissvptr
 * 
 *      def set_cwd(self, cwd):             # <<<<<<<<<<<<<<
 *         """
 *         set_cwd(self, cwd)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_5set_cwd(PyObject *__pyx_v_self, PyObject *__pyx_v_cwd); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_4set_cwd[] = "\n        set_cwd(self, cwd)\n        Set the current working directory.\n\n        Args:\n            cwd (str): current working directory\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_5set_cwd(PyObject *__pyx_v_self, PyObject *__pyx_v_cwd) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cwd (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_4set_cwd(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), ((PyObject *)__pyx_v_cwd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_4set_cwd(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_cwd) {
  PyObject *__pyx_v_py_cwd_string = NULL;
  char *__pyx_v_c_cwd;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cwd", 0);

  /* "saxonc.pyx":2910
 *             cwd (str): current working directory
 *         """
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_cwd = py_cwd_string if cwd is not None else ""
 *         self.thissvptr.setcwd(c_cwd)
 */
  __pyx_t_2 = (__pyx_v_cwd != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cwd, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_cwd_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2911
 *         """
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None
 *         cdef char * c_cwd = py_cwd_string if cwd is not None else ""             # <<<<<<<<<<<<<<
 *         self.thissvptr.setcwd(c_cwd)
 * 
 */
  __pyx_t_2 = (__pyx_v_cwd != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_cwd_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 2911, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_cwd = __pyx_t_6;

  /* "saxonc.pyx":2912
 *         py_cwd_string = cwd.encode('UTF-8') if cwd is not None else None
 *         cdef char * c_cwd = py_cwd_string if cwd is not None else ""
 *         self.thissvptr.setcwd(c_cwd)             # <<<<<<<<<<<<<<
 * 
 *      def register_schema(self, **kwds):
 */
  __pyx_v_self->thissvptr->setcwd(__pyx_v_c_cwd);

  /* "saxonc.pyx":2902
 *            del self.thissvptr
 * 
 *      def set_cwd(self, cwd):             # <<<<<<<<<<<<<<
 *         """
 *         set_cwd(self, cwd)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PySchemaValidator.set_cwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_cwd_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2914
 *         self.thissvptr.setcwd(c_cwd)
 * 
 *      def register_schema(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         Register schema given as file name or schema text. (xsd_text|xsd_file)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_7register_schema(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_6register_schema[] = "\n        Register schema given as file name or schema text. (xsd_text|xsd_file)\n\n        Args:\n            **kwds: Keyword argument options only one of 'xsd_text' or 'xsd_file'\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_7register_schema(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("register_schema (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("register_schema", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "register_schema", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_6register_schema(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_6register_schema(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_py_error_message = NULL;
  PyObject *__pyx_v_py_value = 0;
  PyObject *__pyx_v_py_value_string = 0;
  char *__pyx_v_c_source;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("register_schema", 0);

  /* "saxonc.pyx":2922
 * 
 *         """
 *         py_error_message = "Error: register_schema should only contain one of the following keyword arguments: (xsd_text|xsd_file)"             # <<<<<<<<<<<<<<
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(__pyx_kp_s_Error_register_schema_should_onl);
  __pyx_v_py_error_message = __pyx_kp_s_Error_register_schema_should_onl;

  /* "saxonc.pyx":2923
 *         """
 *         py_error_message = "Error: register_schema should only contain one of the following keyword arguments: (xsd_text|xsd_file)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2923, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":2924
 *         py_error_message = "Error: register_schema should only contain one of the following keyword arguments: (xsd_text|xsd_file)"
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         cdef py_value = None
 *         cdef py_value_string = None
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2924, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2924, __pyx_L1_error)

    /* "saxonc.pyx":2923
 *         """
 *         py_error_message = "Error: register_schema should only contain one of the following keyword arguments: (xsd_text|xsd_file)"
 *         if len(kwds) != 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  }

  /* "saxonc.pyx":2925
 *         if len(kwds) != 1:
 *           raise Exception(py_error_message)
 *         cdef py_value = None             # <<<<<<<<<<<<<<
 *         cdef py_value_string = None
 *         cdef char * c_source
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value = Py_None;

  /* "saxonc.pyx":2926
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 *         cdef py_value_string = None             # <<<<<<<<<<<<<<
 *         cdef char * c_source
 * 
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value_string = Py_None;

  /* "saxonc.pyx":2929
 *         cdef char * c_source
 * 
 *         if "xsd_text" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["xsd_text"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_xsd_text, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2929, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "saxonc.pyx":2930
 * 
 *         if "xsd_text" in kwds:
 *             py_value = kwds["xsd_text"]             # <<<<<<<<<<<<<<
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xsd_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_py_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2931
 *         if "xsd_text" in kwds:
 *             py_value = kwds["xsd_text"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None             # <<<<<<<<<<<<<<
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thissvptr.registerSchemaFromString(c_source)
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2931, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2931, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __Pyx_DECREF_SET(__pyx_v_py_value_string, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2932
 *             py_value = kwds["xsd_text"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""             # <<<<<<<<<<<<<<
 *             self.thissvptr.registerSchemaFromString(c_source)
 *         elif "xsd_file" in kwds:
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 2932, __pyx_L1_error)
      __pyx_t_8 = __pyx_t_9;
    } else {
      __pyx_t_8 = ((char *)"");
    }
    __pyx_v_c_source = __pyx_t_8;

    /* "saxonc.pyx":2933
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thissvptr.registerSchemaFromString(c_source)             # <<<<<<<<<<<<<<
 *         elif "xsd_file" in kwds:
 *             py_value = kwds["xsd_file"]
 */
    __pyx_v_self->thissvptr->registerSchemaFromString(__pyx_v_c_source);

    /* "saxonc.pyx":2929
 *         cdef char * c_source
 * 
 *         if "xsd_text" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["xsd_text"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":2934
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thissvptr.registerSchemaFromString(c_source)
 *         elif "xsd_file" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["xsd_file"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_xsd_file, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 2934, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_2)) {

    /* "saxonc.pyx":2935
 *             self.thissvptr.registerSchemaFromString(c_source)
 *         elif "xsd_file" in kwds:
 *             py_value = kwds["xsd_file"]             # <<<<<<<<<<<<<<
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xsd_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_py_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2936
 *         elif "xsd_file" in kwds:
 *             py_value = kwds["xsd_file"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None             # <<<<<<<<<<<<<<
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thissvptr.registerSchemaFromFile(c_source)
 */
    __pyx_t_2 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_2 != 0)) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2936, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2936, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __Pyx_DECREF_SET(__pyx_v_py_value_string, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2937
 *             py_value = kwds["xsd_file"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""             # <<<<<<<<<<<<<<
 *             self.thissvptr.registerSchemaFromFile(c_source)
 *         else:
 */
    __pyx_t_2 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_2 != 0)) {
      __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 2937, __pyx_L1_error)
      __pyx_t_8 = __pyx_t_9;
    } else {
      __pyx_t_8 = ((char *)"");
    }
    __pyx_v_c_source = __pyx_t_8;

    /* "saxonc.pyx":2938
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thissvptr.registerSchemaFromFile(c_source)             # <<<<<<<<<<<<<<
 *         else:
 *           raise Exception(py_error_message)
 */
    __pyx_v_self->thissvptr->registerSchemaFromFile(__pyx_v_c_source);

    /* "saxonc.pyx":2934
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thissvptr.registerSchemaFromString(c_source)
 *         elif "xsd_file" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["xsd_file"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":2940
 *             self.thissvptr.registerSchemaFromFile(c_source)
 *         else:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 * 
 *      def set_output_file(self, output_file):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2940, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "saxonc.pyx":2914
 *         self.thissvptr.setcwd(c_cwd)
 * 
 *      def register_schema(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         Register schema given as file name or schema text. (xsd_text|xsd_file)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PySchemaValidator.register_schema", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_error_message);
  __Pyx_XDECREF(__pyx_v_py_value);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2942
 *           raise Exception(py_error_message)
 * 
 *      def set_output_file(self, output_file):             # <<<<<<<<<<<<<<
 *         """
 *         set_output_file(self, output_file)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_9set_output_file(PyObject *__pyx_v_self, PyObject *__pyx_v_output_file); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_8set_output_file[] = "\n        set_output_file(self, output_file)        \n        Set the name of the output file that will be used by the valida tor.\n\n        Args:\n            output_file (str):The output file name for use by the validator\n    \n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_9set_output_file(PyObject *__pyx_v_self, PyObject *__pyx_v_output_file) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_output_file (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_8set_output_file(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), ((PyObject *)__pyx_v_output_file));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_8set_output_file(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_output_file) {
  PyObject *__pyx_v_py_value_string = NULL;
  PyObject *__pyx_v_c_source = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  char const *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_output_file", 0);

  /* "saxonc.pyx":2951
 * 
 *         """
 *         py_value_string = output_file.encode('UTF-8') if output_file is not None else None             # <<<<<<<<<<<<<<
 *         c_source = py_value_string
 *         if output_file is not None:
 */
  __pyx_t_2 = (__pyx_v_output_file != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_output_file, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":2952
 *         """
 *         py_value_string = output_file.encode('UTF-8') if output_file is not None else None
 *         c_source = py_value_string             # <<<<<<<<<<<<<<
 *         if output_file is not None:
 *             self.thissvptr.setOutputFile(c_source)
 */
  __Pyx_INCREF(__pyx_v_py_value_string);
  __pyx_v_c_source = __pyx_v_py_value_string;

  /* "saxonc.pyx":2953
 *         py_value_string = output_file.encode('UTF-8') if output_file is not None else None
 *         c_source = py_value_string
 *         if output_file is not None:             # <<<<<<<<<<<<<<
 *             self.thissvptr.setOutputFile(c_source)
 *         else:
 */
  __pyx_t_2 = (__pyx_v_output_file != Py_None);
  __pyx_t_6 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_6)) {

    /* "saxonc.pyx":2954
 *         c_source = py_value_string
 *         if output_file is not None:
 *             self.thissvptr.setOutputFile(c_source)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Warning("Unable to set output_file. output_file has the value None")
 */
    __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_c_source); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 2954, __pyx_L1_error)
    __pyx_v_self->thissvptr->setOutputFile(__pyx_t_7);

    /* "saxonc.pyx":2953
 *         py_value_string = output_file.encode('UTF-8') if output_file is not None else None
 *         c_source = py_value_string
 *         if output_file is not None:             # <<<<<<<<<<<<<<
 *             self.thissvptr.setOutputFile(c_source)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "saxonc.pyx":2956
 *             self.thissvptr.setOutputFile(c_source)
 *         else:
 *             raise Warning("Unable to set output_file. output_file has the value None")             # <<<<<<<<<<<<<<
 *      def validate(self, **kwds):
 *         """
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_Warning, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 2956, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "saxonc.pyx":2942
 *           raise Exception(py_error_message)
 * 
 *      def set_output_file(self, output_file):             # <<<<<<<<<<<<<<
 *         """
 *         set_output_file(self, output_file)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PySchemaValidator.set_output_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF(__pyx_v_c_source);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2957
 *         else:
 *             raise Warning("Unable to set output_file. output_file has the value None")
 *      def validate(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         validate(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_11validate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_10validate[] = "\n        validate(self, **kwds)\n        Validate an instance document by a registered schema.\n        \n        Args:\n            **kwds: The possible keyword arguments must be one of the follow (file_name|xml_text|xdm_node).\n                    The source file to be validated. Allow None when source document is supplied using the set_source method\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_11validate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("validate (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("validate", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "validate", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_10validate(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_10validate(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_py_error_message = NULL;
  PyObject *__pyx_v_py_value = 0;
  PyObject *__pyx_v_py_value_string = 0;
  char *__pyx_v_c_source;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_xdm_node = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("validate", 0);

  /* "saxonc.pyx":2966
 *                     The source file to be validated. Allow None when source document is supplied using the set_source method
 *         """
 *         py_error_message = "Error: validate should only contain one of the following keyword arguments: (file_name|xdm_node|xml_text)"             # <<<<<<<<<<<<<<
 *         if len(kwds) > 1:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(__pyx_kp_s_Error_validate_should_only_conta);
  __pyx_v_py_error_message = __pyx_kp_s_Error_validate_should_only_conta;

  /* "saxonc.pyx":2967
 *         """
 *         py_error_message = "Error: validate should only contain one of the following keyword arguments: (file_name|xdm_node|xml_text)"
 *         if len(kwds) > 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2967, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 > 1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":2968
 *         py_error_message = "Error: validate should only contain one of the following keyword arguments: (file_name|xdm_node|xml_text)"
 *         if len(kwds) > 1:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         cdef py_value = None
 *         cdef py_value_string = None
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2968, __pyx_L1_error)

    /* "saxonc.pyx":2967
 *         """
 *         py_error_message = "Error: validate should only contain one of the following keyword arguments: (file_name|xdm_node|xml_text)"
 *         if len(kwds) > 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  }

  /* "saxonc.pyx":2969
 *         if len(kwds) > 1:
 *           raise Exception(py_error_message)
 *         cdef py_value = None             # <<<<<<<<<<<<<<
 *         cdef py_value_string = None
 *         cdef char * c_source
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value = Py_None;

  /* "saxonc.pyx":2970
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 *         cdef py_value_string = None             # <<<<<<<<<<<<<<
 *         cdef char * c_source
 *         cdef PyXdmNode xdm_node = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value_string = Py_None;

  /* "saxonc.pyx":2972
 *         cdef py_value_string = None
 *         cdef char * c_source
 *         cdef PyXdmNode xdm_node = None             # <<<<<<<<<<<<<<
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_xdm_node = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":2973
 *         cdef char * c_source
 *         cdef PyXdmNode xdm_node = None
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_file_name, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 2973, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "saxonc.pyx":2974
 *         cdef PyXdmNode xdm_node = None
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]             # <<<<<<<<<<<<<<
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_py_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2975
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None             # <<<<<<<<<<<<<<
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thissvptr.validate(c_source)
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __Pyx_DECREF_SET(__pyx_v_py_value_string, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2976
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""             # <<<<<<<<<<<<<<
 *             self.thissvptr.validate(c_source)
 *         elif "xdm_node" in kwds:
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 2976, __pyx_L1_error)
      __pyx_t_8 = __pyx_t_9;
    } else {
      __pyx_t_8 = ((char *)"");
    }
    __pyx_v_c_source = __pyx_t_8;

    /* "saxonc.pyx":2977
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thissvptr.validate(c_source)             # <<<<<<<<<<<<<<
 *         elif "xdm_node" in kwds:
 *             xdm_node = kwds["xdm_node"]
 */
    try {
      __pyx_v_self->thissvptr->validate(__pyx_v_c_source);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 2977, __pyx_L1_error)
    }

    /* "saxonc.pyx":2973
 *         cdef char * c_source
 *         cdef PyXdmNode xdm_node = None
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":2978
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thissvptr.validate(c_source)
 *         elif "xdm_node" in kwds:             # <<<<<<<<<<<<<<
 *             xdm_node = kwds["xdm_node"]
 *             if isinstance(xdm_node, PyXdmNode):
 */
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_xdm_node, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 2978, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":2979
 *             self.thissvptr.validate(c_source)
 *         elif "xdm_node" in kwds:
 *             xdm_node = kwds["xdm_node"]             # <<<<<<<<<<<<<<
 *             if isinstance(xdm_node, PyXdmNode):
 *                self.thissvptr.setSourceNode(xdm_node.derivednptr)
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xdm_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2979, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6saxonc_PyXdmNode))))) __PYX_ERR(1, 2979, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_xdm_node, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "saxonc.pyx":2980
 *         elif "xdm_node" in kwds:
 *             xdm_node = kwds["xdm_node"]
 *             if isinstance(xdm_node, PyXdmNode):             # <<<<<<<<<<<<<<
 *                self.thissvptr.setSourceNode(xdm_node.derivednptr)
 *                self.thissvptr.validate(NULL)
 */
    __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_xdm_node), __pyx_ptype_6saxonc_PyXdmNode); 
    __pyx_t_4 = (__pyx_t_2 != 0);
    if (__pyx_t_4) {

      /* "saxonc.pyx":2981
 *             xdm_node = kwds["xdm_node"]
 *             if isinstance(xdm_node, PyXdmNode):
 *                self.thissvptr.setSourceNode(xdm_node.derivednptr)             # <<<<<<<<<<<<<<
 *                self.thissvptr.validate(NULL)
 *         else:
 */
      __pyx_v_self->thissvptr->setSourceNode(__pyx_v_xdm_node->derivednptr);

      /* "saxonc.pyx":2982
 *             if isinstance(xdm_node, PyXdmNode):
 *                self.thissvptr.setSourceNode(xdm_node.derivednptr)
 *                self.thissvptr.validate(NULL)             # <<<<<<<<<<<<<<
 *         else:
 *             self.thissvptr.validate(NULL)
 */
      try {
        __pyx_v_self->thissvptr->validate(NULL);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 2982, __pyx_L1_error)
      }

      /* "saxonc.pyx":2980
 *         elif "xdm_node" in kwds:
 *             xdm_node = kwds["xdm_node"]
 *             if isinstance(xdm_node, PyXdmNode):             # <<<<<<<<<<<<<<
 *                self.thissvptr.setSourceNode(xdm_node.derivednptr)
 *                self.thissvptr.validate(NULL)
 */
    }

    /* "saxonc.pyx":2978
 *             c_source = py_value_string if py_value is not None else ""
 *             self.thissvptr.validate(c_source)
 *         elif "xdm_node" in kwds:             # <<<<<<<<<<<<<<
 *             xdm_node = kwds["xdm_node"]
 *             if isinstance(xdm_node, PyXdmNode):
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":2984
 *                self.thissvptr.validate(NULL)
 *         else:
 *             self.thissvptr.validate(NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    try {
      __pyx_v_self->thissvptr->validate(NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 2984, __pyx_L1_error)
    }
  }
  __pyx_L4:;

  /* "saxonc.pyx":2957
 *         else:
 *             raise Warning("Unable to set output_file. output_file has the value None")
 *      def validate(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         validate(self, **kwds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PySchemaValidator.validate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_error_message);
  __Pyx_XDECREF(__pyx_v_py_value);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_xdm_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":2987
 * 
 * 
 *      def validate_to_node(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         validate_to_node(self, **kwds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_13validate_to_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_12validate_to_node[] = "\n        validate_to_node(self, **kwds)\n        Validate an instance document by a registered schema.\n        \n\n        Args:\n            **kwds: The possible keyword arguments must be one of the follow (file_name|xml_text|xdm_node).\n                    The source file to be validated. Allow None when source document is supplied using the set_source method\n\n        Returns:\n            PyXdmNode: The validated document returned to the calling program as an PyXdmNode    \n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_13validate_to_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("validate_to_node (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("validate_to_node", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "validate_to_node", 1))) return NULL;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_12validate_to_node(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_12validate_to_node(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_py_error_message = NULL;
  PyObject *__pyx_v_py_value = 0;
  PyObject *__pyx_v_py_value_string = 0;
  char *__pyx_v_c_source;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_xdm_node = 0;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_val = 0;
  XdmNode *__pyx_v_xdmNode;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  char *__pyx_t_9;
  XdmNode *__pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("validate_to_node", 0);

  /* "saxonc.pyx":3000
 *             PyXdmNode: The validated document returned to the calling program as an PyXdmNode
 *         """
 *         py_error_message = "Error: validate should only contain one of the following keyword arguments: (file_name|xdm_node|xml_text)"             # <<<<<<<<<<<<<<
 *         if len(kwds) > 1:
 *           raise Exception(py_error_message)
 */
  __Pyx_INCREF(__pyx_kp_s_Error_validate_should_only_conta);
  __pyx_v_py_error_message = __pyx_kp_s_Error_validate_should_only_conta;

  /* "saxonc.pyx":3001
 *         """
 *         py_error_message = "Error: validate should only contain one of the following keyword arguments: (file_name|xdm_node|xml_text)"
 *         if len(kwds) > 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 3001, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 > 1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":3002
 *         py_error_message = "Error: validate should only contain one of the following keyword arguments: (file_name|xdm_node|xml_text)"
 *         if len(kwds) > 1:
 *           raise Exception(py_error_message)             # <<<<<<<<<<<<<<
 *         cdef py_value = None
 *         cdef py_value_string = None
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_py_error_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 3002, __pyx_L1_error)

    /* "saxonc.pyx":3001
 *         """
 *         py_error_message = "Error: validate should only contain one of the following keyword arguments: (file_name|xdm_node|xml_text)"
 *         if len(kwds) > 1:             # <<<<<<<<<<<<<<
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 */
  }

  /* "saxonc.pyx":3003
 *         if len(kwds) > 1:
 *           raise Exception(py_error_message)
 *         cdef py_value = None             # <<<<<<<<<<<<<<
 *         cdef py_value_string = None
 *         cdef char * c_source
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value = Py_None;

  /* "saxonc.pyx":3004
 *           raise Exception(py_error_message)
 *         cdef py_value = None
 *         cdef py_value_string = None             # <<<<<<<<<<<<<<
 *         cdef char * c_source
 *         cdef PyXdmNode xdm_node = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_py_value_string = Py_None;

  /* "saxonc.pyx":3006
 *         cdef py_value_string = None
 *         cdef char * c_source
 *         cdef PyXdmNode xdm_node = None             # <<<<<<<<<<<<<<
 *         cdef PyXdmNode val = None
 *         cdef saxoncClasses.XdmNode * xdmNode = NULL
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_xdm_node = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":3007
 *         cdef char * c_source
 *         cdef PyXdmNode xdm_node = None
 *         cdef PyXdmNode val = None             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmNode * xdmNode = NULL
 * 
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":3008
 *         cdef PyXdmNode xdm_node = None
 *         cdef PyXdmNode val = None
 *         cdef saxoncClasses.XdmNode * xdmNode = NULL             # <<<<<<<<<<<<<<
 * 
 *         if "file_name" in kwds:
 */
  __pyx_v_xdmNode = NULL;

  /* "saxonc.pyx":3010
 *         cdef saxoncClasses.XdmNode * xdmNode = NULL
 * 
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_file_name, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 3010, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "saxonc.pyx":3011
 * 
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]             # <<<<<<<<<<<<<<
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3011, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_py_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":3012
 *         if "file_name" in kwds:
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None             # <<<<<<<<<<<<<<
 *             c_source = py_value_string if py_value is not None else ""
 *             if isfile(py_value_string) == False:
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3012, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_UTF_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3012, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __Pyx_DECREF_SET(__pyx_v_py_value_string, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "saxonc.pyx":3013
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""             # <<<<<<<<<<<<<<
 *             if isfile(py_value_string) == False:
 *                 raise Exception("Source file with name "+py_value_string+" does not exist")
 */
    __pyx_t_4 = (__pyx_v_py_value != Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 3013, __pyx_L1_error)
      __pyx_t_8 = __pyx_t_9;
    } else {
      __pyx_t_8 = ((char *)"");
    }
    __pyx_v_c_source = __pyx_t_8;

    /* "saxonc.pyx":3014
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 *             if isfile(py_value_string) == False:             # <<<<<<<<<<<<<<
 *                 raise Exception("Source file with name "+py_value_string+" does not exist")
 *             xdmNode = self.thissvptr.validateToNode(c_source)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_isfile); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3014, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_py_value_string) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_py_value_string);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3014, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3014, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 3014, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "saxonc.pyx":3015
 *             c_source = py_value_string if py_value is not None else ""
 *             if isfile(py_value_string) == False:
 *                 raise Exception("Source file with name "+py_value_string+" does not exist")             # <<<<<<<<<<<<<<
 *             xdmNode = self.thissvptr.validateToNode(c_source)
 *         elif "xdm_node" in kwds:
 */
      __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Source_file_with_name, __pyx_v_py_value_string); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyNumber_Add(__pyx_t_5, __pyx_kp_s_does_not_exist); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 3015, __pyx_L1_error)

      /* "saxonc.pyx":3014
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 *             c_source = py_value_string if py_value is not None else ""
 *             if isfile(py_value_string) == False:             # <<<<<<<<<<<<<<
 *                 raise Exception("Source file with name "+py_value_string+" does not exist")
 *             xdmNode = self.thissvptr.validateToNode(c_source)
 */
    }

    /* "saxonc.pyx":3016
 *             if isfile(py_value_string) == False:
 *                 raise Exception("Source file with name "+py_value_string+" does not exist")
 *             xdmNode = self.thissvptr.validateToNode(c_source)             # <<<<<<<<<<<<<<
 *         elif "xdm_node" in kwds:
 *             xdm_node = kwds["xdm_node"]
 */
    try {
      __pyx_t_10 = __pyx_v_self->thissvptr->validateToNode(__pyx_v_c_source);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 3016, __pyx_L1_error)
    }
    __pyx_v_xdmNode = __pyx_t_10;

    /* "saxonc.pyx":3010
 *         cdef saxoncClasses.XdmNode * xdmNode = NULL
 * 
 *         if "file_name" in kwds:             # <<<<<<<<<<<<<<
 *             py_value = kwds["file_name"]
 *             py_value_string = py_value.encode('UTF-8') if py_value is not None else None
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":3017
 *                 raise Exception("Source file with name "+py_value_string+" does not exist")
 *             xdmNode = self.thissvptr.validateToNode(c_source)
 *         elif "xdm_node" in kwds:             # <<<<<<<<<<<<<<
 *             xdm_node = kwds["xdm_node"]
 *             if isinstance(xdm_node, PyXdmNode):
 */
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_xdm_node, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 3017, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":3018
 *             xdmNode = self.thissvptr.validateToNode(c_source)
 *         elif "xdm_node" in kwds:
 *             xdm_node = kwds["xdm_node"]             # <<<<<<<<<<<<<<
 *             if isinstance(xdm_node, PyXdmNode):
 *                 self.thissvptr.setSourceNode(xdm_node.derivednptr)
 */
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_s_xdm_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_6saxonc_PyXdmNode))))) __PYX_ERR(1, 3018, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_xdm_node, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "saxonc.pyx":3019
 *         elif "xdm_node" in kwds:
 *             xdm_node = kwds["xdm_node"]
 *             if isinstance(xdm_node, PyXdmNode):             # <<<<<<<<<<<<<<
 *                 self.thissvptr.setSourceNode(xdm_node.derivednptr)
 *                 xdmNode = self.thissvptr.validateToNode(NULL)
 */
    __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_xdm_node), __pyx_ptype_6saxonc_PyXdmNode); 
    __pyx_t_4 = (__pyx_t_2 != 0);
    if (__pyx_t_4) {

      /* "saxonc.pyx":3020
 *             xdm_node = kwds["xdm_node"]
 *             if isinstance(xdm_node, PyXdmNode):
 *                 self.thissvptr.setSourceNode(xdm_node.derivednptr)             # <<<<<<<<<<<<<<
 *                 xdmNode = self.thissvptr.validateToNode(NULL)
 *         else:
 */
      __pyx_v_self->thissvptr->setSourceNode(__pyx_v_xdm_node->derivednptr);

      /* "saxonc.pyx":3021
 *             if isinstance(xdm_node, PyXdmNode):
 *                 self.thissvptr.setSourceNode(xdm_node.derivednptr)
 *                 xdmNode = self.thissvptr.validateToNode(NULL)             # <<<<<<<<<<<<<<
 *         else:
 *             xdmNode = self.thissvptr.validateToNode(NULL)
 */
      try {
        __pyx_t_10 = __pyx_v_self->thissvptr->validateToNode(NULL);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 3021, __pyx_L1_error)
      }
      __pyx_v_xdmNode = __pyx_t_10;

      /* "saxonc.pyx":3019
 *         elif "xdm_node" in kwds:
 *             xdm_node = kwds["xdm_node"]
 *             if isinstance(xdm_node, PyXdmNode):             # <<<<<<<<<<<<<<
 *                 self.thissvptr.setSourceNode(xdm_node.derivednptr)
 *                 xdmNode = self.thissvptr.validateToNode(NULL)
 */
    }

    /* "saxonc.pyx":3017
 *                 raise Exception("Source file with name "+py_value_string+" does not exist")
 *             xdmNode = self.thissvptr.validateToNode(c_source)
 *         elif "xdm_node" in kwds:             # <<<<<<<<<<<<<<
 *             xdm_node = kwds["xdm_node"]
 *             if isinstance(xdm_node, PyXdmNode):
 */
    goto __pyx_L4;
  }

  /* "saxonc.pyx":3023
 *                 xdmNode = self.thissvptr.validateToNode(NULL)
 *         else:
 *             xdmNode = self.thissvptr.validateToNode(NULL)             # <<<<<<<<<<<<<<
 * 
 *         if xdmNode == NULL:
 */
  /*else*/ {
    try {
      __pyx_t_10 = __pyx_v_self->thissvptr->validateToNode(NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 3023, __pyx_L1_error)
    }
    __pyx_v_xdmNode = __pyx_t_10;
  }
  __pyx_L4:;

  /* "saxonc.pyx":3025
 *             xdmNode = self.thissvptr.validateToNode(NULL)
 * 
 *         if xdmNode == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __pyx_t_4 = ((__pyx_v_xdmNode == NULL) != 0);
  if (__pyx_t_4) {

    /* "saxonc.pyx":3026
 * 
 *         if xdmNode == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             val = PyXdmNode()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":3025
 *             xdmNode = self.thissvptr.validateToNode(NULL)
 * 
 *         if xdmNode == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  }

  /* "saxonc.pyx":3028
 *             return None
 *         else:
 *             val = PyXdmNode()             # <<<<<<<<<<<<<<
 *             val.derivednptr = val.derivedptr = val.thisvptr =  xdmNode
 *             return val
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "saxonc.pyx":3029
 *         else:
 *             val = PyXdmNode()
 *             val.derivednptr = val.derivedptr = val.thisvptr =  xdmNode             # <<<<<<<<<<<<<<
 *             return val
 * 
 */
    __pyx_v_val->derivednptr = __pyx_v_xdmNode;
    __pyx_v_val->__pyx_base.derivedptr = __pyx_v_xdmNode;
    __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_v_xdmNode;

    /* "saxonc.pyx":3030
 *             val = PyXdmNode()
 *             val.derivednptr = val.derivedptr = val.thisvptr =  xdmNode
 *             return val             # <<<<<<<<<<<<<<
 * 
 *      def set_source_node(self, PyXdmNode source):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;
  }

  /* "saxonc.pyx":2987
 * 
 * 
 *      def validate_to_node(self, **kwds):             # <<<<<<<<<<<<<<
 *         """
 *         validate_to_node(self, **kwds)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("saxonc.PySchemaValidator.validate_to_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_error_message);
  __Pyx_XDECREF(__pyx_v_py_value);
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF((PyObject *)__pyx_v_xdm_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3032
 *             return val
 * 
 *      def set_source_node(self, PyXdmNode source):             # <<<<<<<<<<<<<<
 *         """
 *         set_source_node(self, source)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_15set_source_node(PyObject *__pyx_v_self, PyObject *__pyx_v_source); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_14set_source_node[] = "\n        set_source_node(self, source)\n        Set the source as an PyXdmNode object that will be validated\n\n        Args:\n            source (PyXdmNode) :\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_15set_source_node(PyObject *__pyx_v_self, PyObject *__pyx_v_source) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_source_node (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source), __pyx_ptype_6saxonc_PyXdmNode, 1, "source", 0))) __PYX_ERR(1, 3032, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_14set_source_node(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_source));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_14set_source_node(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_source) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_source_node", 0);

  /* "saxonc.pyx":3040
 *             source (PyXdmNode) :
 *         """
 *         self.thissvptr.setSourceNode(source.derivednptr)             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
  __pyx_v_self->thissvptr->setSourceNode(__pyx_v_source->derivednptr);

  /* "saxonc.pyx":3032
 *             return val
 * 
 *      def set_source_node(self, PyXdmNode source):             # <<<<<<<<<<<<<<
 *         """
 *         set_source_node(self, source)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3043
 * 
 *      @property
 *      def validation_report(self):             # <<<<<<<<<<<<<<
 *         """
 *         validation_report
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_17validation_report_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_17validation_report_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_17validation_report___get__(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_17validation_report___get__(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_val = 0;
  XdmNode *__pyx_v_xdmNode;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3051
 * 
 *         """
 *         cdef PyXdmNode val = None             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmNode * xdmNode = NULL
 *         xdmNode = self.thissvptr.getValidationReport()
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":3052
 *         """
 *         cdef PyXdmNode val = None
 *         cdef saxoncClasses.XdmNode * xdmNode = NULL             # <<<<<<<<<<<<<<
 *         xdmNode = self.thissvptr.getValidationReport()
 *         if xdmNode == NULL:
 */
  __pyx_v_xdmNode = NULL;

  /* "saxonc.pyx":3053
 *         cdef PyXdmNode val = None
 *         cdef saxoncClasses.XdmNode * xdmNode = NULL
 *         xdmNode = self.thissvptr.getValidationReport()             # <<<<<<<<<<<<<<
 *         if xdmNode == NULL:
 *             return None
 */
  __pyx_v_xdmNode = __pyx_v_self->thissvptr->getValidationReport();

  /* "saxonc.pyx":3054
 *         cdef saxoncClasses.XdmNode * xdmNode = NULL
 *         xdmNode = self.thissvptr.getValidationReport()
 *         if xdmNode == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_xdmNode == NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":3055
 *         xdmNode = self.thissvptr.getValidationReport()
 *         if xdmNode == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             val = PyXdmNode()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":3054
 *         cdef saxoncClasses.XdmNode * xdmNode = NULL
 *         xdmNode = self.thissvptr.getValidationReport()
 *         if xdmNode == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  }

  /* "saxonc.pyx":3057
 *             return None
 *         else:
 *             val = PyXdmNode()             # <<<<<<<<<<<<<<
 *             val.derivednptr = val.derivedptr = val.thisvptr = xdmNode
 *             return val
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":3058
 *         else:
 *             val = PyXdmNode()
 *             val.derivednptr = val.derivedptr = val.thisvptr = xdmNode             # <<<<<<<<<<<<<<
 *             return val
 * 
 */
    __pyx_v_val->derivednptr = __pyx_v_xdmNode;
    __pyx_v_val->__pyx_base.derivedptr = __pyx_v_xdmNode;
    __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_v_xdmNode;

    /* "saxonc.pyx":3059
 *             val = PyXdmNode()
 *             val.derivednptr = val.derivedptr = val.thisvptr = xdmNode
 *             return val             # <<<<<<<<<<<<<<
 * 
 *      def set_parameter(self, name, PyXdmValue value):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;
  }

  /* "saxonc.pyx":3043
 * 
 *      @property
 *      def validation_report(self):             # <<<<<<<<<<<<<<
 *         """
 *         validation_report
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PySchemaValidator.validation_report.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3061
 *             return val
 * 
 *      def set_parameter(self, name, PyXdmValue value):             # <<<<<<<<<<<<<<
 *         """
 *         set_parameter(self, name, PyXdmValue value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_17set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_16set_parameter[] = "\n        set_parameter(self, name, PyXdmValue value)\n        Set the value of the parameter for the Schema validator\n\n        Args:\n            name (str): the name of the schema parameter, as a string. For namespaced parameter use the JAXP solution i.e. \"{uri}name\n            value (PyXdmValue): the value of the parameter, or None to clear a previously set value\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_17set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, 1); __PYX_ERR(1, 3061, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_parameter") < 0)) __PYX_ERR(1, 3061, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = ((struct __pyx_obj_6saxonc_PyXdmValue *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 3061, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PySchemaValidator.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_6saxonc_PyXdmValue, 1, "value", 0))) __PYX_ERR(1, 3061, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_16set_parameter(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_16set_parameter(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_value) {
  char const *__pyx_v_c_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_parameter", 0);

  /* "saxonc.pyx":3071
 * 
 *         """
 *         cdef const char * c_str = make_c_str(name)             # <<<<<<<<<<<<<<
 *         if c_str is not NULL:
 *             value.thisvptr.incrementRefCount()
 */
  if (!(likely(PyString_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_name)->tp_name), 0))) __PYX_ERR(1, 3071, __pyx_L1_error)
  __pyx_v_c_str = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_name));

  /* "saxonc.pyx":3072
 *         """
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:             # <<<<<<<<<<<<<<
 *             value.thisvptr.incrementRefCount()
 *             self.thissvptr.setParameter(c_str, value.thisvptr)
 */
  __pyx_t_1 = ((__pyx_v_c_str != NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":3073
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:
 *             value.thisvptr.incrementRefCount()             # <<<<<<<<<<<<<<
 *             self.thissvptr.setParameter(c_str, value.thisvptr)
 * 
 */
    __pyx_v_value->thisvptr->incrementRefCount();

    /* "saxonc.pyx":3074
 *         if c_str is not NULL:
 *             value.thisvptr.incrementRefCount()
 *             self.thissvptr.setParameter(c_str, value.thisvptr)             # <<<<<<<<<<<<<<
 * 
 *      def remove_parameter(self, name):
 */
    __pyx_v_self->thissvptr->setParameter(__pyx_v_c_str, __pyx_v_value->thisvptr);

    /* "saxonc.pyx":3072
 *         """
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:             # <<<<<<<<<<<<<<
 *             value.thisvptr.incrementRefCount()
 *             self.thissvptr.setParameter(c_str, value.thisvptr)
 */
  }

  /* "saxonc.pyx":3061
 *             return val
 * 
 *      def set_parameter(self, name, PyXdmValue value):             # <<<<<<<<<<<<<<
 *         """
 *         set_parameter(self, name, PyXdmValue value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PySchemaValidator.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3076
 *             self.thissvptr.setParameter(c_str, value.thisvptr)
 * 
 *      def remove_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         remove_parameter(self, name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_19remove_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_18remove_parameter[] = "\n        remove_parameter(self, name)\n        Remove the parameter given by name from the PySchemaValidator. The parameter will not have any affect on the SchemaValidator if it has not yet been executed\n\n        Args:\n            name (str): The name of the schema parameter\n\n        Returns:\n            bool: True if the removal of the parameter has been successful, False otherwise.\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_19remove_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_parameter (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_18remove_parameter(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_18remove_parameter(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_name) {
  char const *__pyx_v_c_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_parameter", 0);

  /* "saxonc.pyx":3088
 * 
 *         """
 *         cdef const char * c_str = make_c_str(name)             # <<<<<<<<<<<<<<
 *         if c_str is not NULL:
 *             self.thissvptr.removeParameter(c_str)
 */
  if (!(likely(PyString_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_name)->tp_name), 0))) __PYX_ERR(1, 3088, __pyx_L1_error)
  __pyx_v_c_str = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_name));

  /* "saxonc.pyx":3089
 *         """
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:             # <<<<<<<<<<<<<<
 *             self.thissvptr.removeParameter(c_str)
 *      def set_property(self, name, value):
 */
  __pyx_t_1 = ((__pyx_v_c_str != NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":3090
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:
 *             self.thissvptr.removeParameter(c_str)             # <<<<<<<<<<<<<<
 *      def set_property(self, name, value):
 *         """
 */
    (void)(__pyx_v_self->thissvptr->removeParameter(__pyx_v_c_str));

    /* "saxonc.pyx":3089
 *         """
 *         cdef const char * c_str = make_c_str(name)
 *         if c_str is not NULL:             # <<<<<<<<<<<<<<
 *             self.thissvptr.removeParameter(c_str)
 *      def set_property(self, name, value):
 */
  }

  /* "saxonc.pyx":3076
 *             self.thissvptr.setParameter(c_str, value.thisvptr)
 * 
 *      def remove_parameter(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         remove_parameter(self, name)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PySchemaValidator.remove_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3091
 *         if c_str is not NULL:
 *             self.thissvptr.removeParameter(c_str)
 *      def set_property(self, name, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_property(self, name, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_21set_property(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_20set_property[] = "\n        set_property(self, name, value)\n        Set a property specific to the processor in use.\n \n        Args:\n            name (str): The name of the property\n            value (str): The value of the property\n\n        Example:\n            PySchemaValidator: set serialization properties (names start with '!' i.e. name \"!method\" -> \"xml\")\r\n            'o':outfile name,\r\n            'dtd': Possible values 'on' or 'off' to set DTD validation,\r \n            'resources': directory to find Saxon data files,\r \n            's': source as file name,\r\n            'string': Set the source as xml string for validation. Parsing will take place in the validate method\r\n            'report-node': Boolean flag for validation reporting feature. Error validation failures are represented in an XML\n                           document and returned as an PyXdmNode object\r\n            'report-file': Specifcy value as a file name string. This will switch on the validation reporting feature, which will be\n                           saved to the file in an XML format\r\n            'verbose': boolean value which sets the verbose mode to the output in the terminal. Default is 'on'\n            'element-type': Set the name of the required type of the top-lelvel element of the doucment to be validated.\n                            The string should be in the Clark notation {uri}local\r\n            'lax': Boolean to set the validation mode to strict (False) or lax ('True')\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_21set_property(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_property (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_property", 1, 2, 2, 1); __PYX_ERR(1, 3091, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_property") < 0)) __PYX_ERR(1, 3091, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_property", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 3091, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("saxonc.PySchemaValidator.set_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_20set_property(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_20set_property(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  char const *__pyx_v_c_name;
  char const *__pyx_v_c_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_property", 0);

  /* "saxonc.pyx":3117
 *         """
 * 
 *         cdef const char * c_name = make_c_str(name)             # <<<<<<<<<<<<<<
 *         cdef const char * c_value = make_c_str(value)
 *         if c_name is not NULL:
 */
  if (!(likely(PyString_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_name)->tp_name), 0))) __PYX_ERR(1, 3117, __pyx_L1_error)
  __pyx_v_c_name = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_name));

  /* "saxonc.pyx":3118
 * 
 *         cdef const char * c_name = make_c_str(name)
 *         cdef const char * c_value = make_c_str(value)             # <<<<<<<<<<<<<<
 *         if c_name is not NULL:
 *             if c_value is not NULL:
 */
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 3118, __pyx_L1_error)
  __pyx_v_c_value = __pyx_f_6saxonc_make_c_str(((PyObject*)__pyx_v_value));

  /* "saxonc.pyx":3119
 *         cdef const char * c_name = make_c_str(name)
 *         cdef const char * c_value = make_c_str(value)
 *         if c_name is not NULL:             # <<<<<<<<<<<<<<
 *             if c_value is not NULL:
 *                 self.thissvptr.setProperty(c_name, c_value)
 */
  __pyx_t_1 = ((__pyx_v_c_name != NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":3120
 *         cdef const char * c_value = make_c_str(value)
 *         if c_name is not NULL:
 *             if c_value is not NULL:             # <<<<<<<<<<<<<<
 *                 self.thissvptr.setProperty(c_name, c_value)
 * 
 */
    __pyx_t_1 = ((__pyx_v_c_value != NULL) != 0);
    if (__pyx_t_1) {

      /* "saxonc.pyx":3121
 *         if c_name is not NULL:
 *             if c_value is not NULL:
 *                 self.thissvptr.setProperty(c_name, c_value)             # <<<<<<<<<<<<<<
 * 
 *      def clear_parameters(self):
 */
      __pyx_v_self->thissvptr->setProperty(__pyx_v_c_name, __pyx_v_c_value);

      /* "saxonc.pyx":3120
 *         cdef const char * c_value = make_c_str(value)
 *         if c_name is not NULL:
 *             if c_value is not NULL:             # <<<<<<<<<<<<<<
 *                 self.thissvptr.setProperty(c_name, c_value)
 * 
 */
    }

    /* "saxonc.pyx":3119
 *         cdef const char * c_name = make_c_str(name)
 *         cdef const char * c_value = make_c_str(value)
 *         if c_name is not NULL:             # <<<<<<<<<<<<<<
 *             if c_value is not NULL:
 *                 self.thissvptr.setProperty(c_name, c_value)
 */
  }

  /* "saxonc.pyx":3091
 *         if c_str is not NULL:
 *             self.thissvptr.removeParameter(c_str)
 *      def set_property(self, name, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_property(self, name, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PySchemaValidator.set_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3123
 *                 self.thissvptr.setProperty(c_name, c_value)
 * 
 *      def clear_parameters(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_23clear_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_22clear_parameters[] = "\n        clear_parameter(self)\n        Clear all parameters set on the processor\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_23clear_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_parameters (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_22clear_parameters(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_22clear_parameters(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_parameters", 0);

  /* "saxonc.pyx":3128
 *         Clear all parameters set on the processor
 *         """
 *         self.thissvptr.clearParameters()             # <<<<<<<<<<<<<<
 *      def clear_properties(self):
 *         """
 */
  __pyx_v_self->thissvptr->clearParameters();

  /* "saxonc.pyx":3123
 *                 self.thissvptr.setProperty(c_name, c_value)
 * 
 *      def clear_parameters(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3129
 *         """
 *         self.thissvptr.clearParameters()
 *      def clear_properties(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_25clear_properties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_24clear_properties[] = "\n        clear_parameter(self)\n        Clear all properties set on the processor\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_25clear_properties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_properties (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_24clear_properties(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_24clear_properties(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_properties", 0);

  /* "saxonc.pyx":3134
 *         Clear all properties set on the processor
 *         """
 *         self.thissvptr.clearProperties()             # <<<<<<<<<<<<<<
 *      def exception_occurred(self):
 *         """
 */
  __pyx_v_self->thissvptr->clearProperties();

  /* "saxonc.pyx":3129
 *         """
 *         self.thissvptr.clearParameters()
 *      def clear_properties(self):             # <<<<<<<<<<<<<<
 *         """
 *         clear_parameter(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3135
 *         """
 *         self.thissvptr.clearProperties()
 *      def exception_occurred(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_occurred(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_27exception_occurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_26exception_occurred[] = "\n        exception_occurred(self)\n        Check if an exception has occurred internally within Saxon/C\n\n        Returns:\n            boolean: True or False if an exception has been reported internally in Saxon/C\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_27exception_occurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_occurred (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_26exception_occurred(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_26exception_occurred(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exception_occurred", 0);

  /* "saxonc.pyx":3143
 *             boolean: True or False if an exception has been reported internally in Saxon/C
 *         """
 *         return self.thissvptr.exceptionCount()>0             # <<<<<<<<<<<<<<
 * 
 *      def exception_clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thissvptr->exceptionCount() > 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3135
 *         """
 *         self.thissvptr.clearProperties()
 *      def exception_occurred(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_occurred(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySchemaValidator.exception_occurred", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3145
 *         return self.thissvptr.exceptionCount()>0
 * 
 *      def exception_clear(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_clear(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_29exception_clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_28exception_clear[] = "\n        exception_clear(self)\n        Clear any exception thrown\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_29exception_clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_clear (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_28exception_clear(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_28exception_clear(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_clear", 0);

  /* "saxonc.pyx":3151
 * 
 *         """
 *         self.thissvptr.exceptionClear()             # <<<<<<<<<<<<<<
 *      def exception_count(self):
 *         """
 */
  __pyx_v_self->thissvptr->exceptionClear();

  /* "saxonc.pyx":3145
 *         return self.thissvptr.exceptionCount()>0
 * 
 *      def exception_clear(self):             # <<<<<<<<<<<<<<
 *         """
 *         exception_clear(self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3152
 *         """
 *         self.thissvptr.exceptionClear()
 *      def exception_count(self):             # <<<<<<<<<<<<<<
 *         """
 *         excepton_count(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_31exception_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_30exception_count[] = "\n        excepton_count(self)\n        Get number of errors reported during execution of the schema.\n\n        Returns:\n            int: Count of the exceptions thrown during execution\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_31exception_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exception_count (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_30exception_count(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_30exception_count(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exception_count", 0);

  /* "saxonc.pyx":3160
 *             int: Count of the exceptions thrown during execution
 *         """
 *         return self.thissvptr.exceptionCount()             # <<<<<<<<<<<<<<
 *      def get_error_message(self, index):
 *         """
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thissvptr->exceptionCount()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3152
 *         """
 *         self.thissvptr.exceptionClear()
 *      def exception_count(self):             # <<<<<<<<<<<<<<
 *         """
 *         excepton_count(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySchemaValidator.exception_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3161
 *         """
 *         return self.thissvptr.exceptionCount()
 *      def get_error_message(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_message(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_33get_error_message(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_32get_error_message[] = "\n        get_error_message(self, index)\n        A transformation may have a number of errors reported against it. Get the ith error message if there are any errors\n\n        Args:\n            index (int): The i'th exception\n        \n        Returns:\n            str: The message of the i'th exception. Return None if the i'th exception does not exist.\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_33get_error_message(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_error_message (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_32get_error_message(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_32get_error_message(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_error_message", 0);

  /* "saxonc.pyx":3172
 *             str: The message of the i'th exception. Return None if the i'th exception does not exist.
 *         """
 *         return make_py_str(self.thissvptr.getErrorMessage(index))             # <<<<<<<<<<<<<<
 * 
 *      def get_error_code(self, index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 3172, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_6saxonc_make_py_str(__pyx_v_self->thissvptr->getErrorMessage(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3161
 *         """
 *         return self.thissvptr.exceptionCount()
 *      def get_error_message(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_message(self, index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PySchemaValidator.get_error_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3174
 *         return make_py_str(self.thissvptr.getErrorMessage(index))
 * 
 *      def get_error_code(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_code(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_35get_error_code(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_34get_error_code[] = "\n        get_error_code(self, index)\n        A transformation may have a number of errors reported against it. Get the i'th error code if there are any errors.\n\n        Args:\n            index (int): The i'th exception\n        \n        Returns:\n            str: The error code associated with the i'th exception. Return None if the i'th exception does not exist.\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_35get_error_code(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_error_code (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_34get_error_code(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_34get_error_code(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_error_code", 0);

  /* "saxonc.pyx":3186
 * 
 *         """
 *         return make_py_str(self.thissvptr.getErrorCode(index))             # <<<<<<<<<<<<<<
 * 
 *      def set_lax(self, lax):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 3186, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_6saxonc_make_py_str(__pyx_v_self->thissvptr->getErrorCode(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3174
 *         return make_py_str(self.thissvptr.getErrorMessage(index))
 * 
 *      def get_error_code(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         get_error_code(self, index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PySchemaValidator.get_error_code", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3188
 *         return make_py_str(self.thissvptr.getErrorCode(index))
 * 
 *      def set_lax(self, lax):             # <<<<<<<<<<<<<<
 *         """
 *         set_lax(self, lax)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_37set_lax(PyObject *__pyx_v_self, PyObject *__pyx_v_lax); /*proto*/
static char __pyx_doc_6saxonc_17PySchemaValidator_36set_lax[] = "\n        set_lax(self, lax)\n        The validation mode may be either strict or lax. \r\n        The default is strict; this method may be called to indicate that lax validation is required. With strict validation,\n        validation fails if no element declaration can be located for the outermost element. With lax validation,\n        the absence of an element declaration results in the content being considered valid.\n        \n        Args:\n            lax (boolean): lax True if validation is to be lax, False if it is to be strict\n\n        ";
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_37set_lax(PyObject *__pyx_v_self, PyObject *__pyx_v_lax) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_lax (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_36set_lax(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), ((PyObject *)__pyx_v_lax));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_36set_lax(struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, PyObject *__pyx_v_lax) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_lax", 0);

  /* "saxonc.pyx":3200
 * 
 *         """
 *         self.thissvptr.setLax(lax)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyXdmValue:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_lax); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 3200, __pyx_L1_error)
  __pyx_v_self->thissvptr->setLax(__pyx_t_1);

  /* "saxonc.pyx":3188
 *         return make_py_str(self.thissvptr.getErrorCode(index))
 * 
 *      def set_lax(self, lax):             # <<<<<<<<<<<<<<
 *         """
 *         set_lax(self, lax)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PySchemaValidator.set_lax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_39__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_39__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_38__reduce_cython__(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_38__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySchemaValidator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_41__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6saxonc_17PySchemaValidator_41__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_17PySchemaValidator_40__setstate_cython__(((struct __pyx_obj_6saxonc_PySchemaValidator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_17PySchemaValidator_40__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PySchemaValidator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PySchemaValidator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3206
 *      cdef saxoncClasses.XdmValue *thisvptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """
 *         cinit(self)
 */

/* Python wrapper */
static int __pyx_pw_6saxonc_10PyXdmValue_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6saxonc_10PyXdmValue_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6saxonc_10PyXdmValue___cinit__(((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6saxonc_10PyXdmValue___cinit__(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  XdmValue *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "saxonc.pyx":3212
 * 
 *         """
 *         if type(self) is PyXdmValue:             # <<<<<<<<<<<<<<
 *             self.thisvptr = new saxoncClasses.XdmValue()
 *      def __dealloc__(self):
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_6saxonc_PyXdmValue));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":3213
 *         """
 *         if type(self) is PyXdmValue:
 *             self.thisvptr = new saxoncClasses.XdmValue()             # <<<<<<<<<<<<<<
 *      def __dealloc__(self):
 *         if type(self) is PyXdmValue and self.thisvptr != NULL:
 */
    try {
      __pyx_t_3 = new XdmValue();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 3213, __pyx_L1_error)
    }
    __pyx_v_self->thisvptr = __pyx_t_3;

    /* "saxonc.pyx":3212
 * 
 *         """
 *         if type(self) is PyXdmValue:             # <<<<<<<<<<<<<<
 *             self.thisvptr = new saxoncClasses.XdmValue()
 *      def __dealloc__(self):
 */
  }

  /* "saxonc.pyx":3206
 *      cdef saxoncClasses.XdmValue *thisvptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """
 *         cinit(self)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXdmValue.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3214
 *         if type(self) is PyXdmValue:
 *             self.thisvptr = new saxoncClasses.XdmValue()
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is PyXdmValue and self.thisvptr != NULL:
 *             if self.thisvptr.getRefCount() < 1:
 */

/* Python wrapper */
static void __pyx_pw_6saxonc_10PyXdmValue_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6saxonc_10PyXdmValue_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6saxonc_10PyXdmValue_2__dealloc__(((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6saxonc_10PyXdmValue_2__dealloc__(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "saxonc.pyx":3215
 *             self.thisvptr = new saxoncClasses.XdmValue()
 *      def __dealloc__(self):
 *         if type(self) is PyXdmValue and self.thisvptr != NULL:             # <<<<<<<<<<<<<<
 *             if self.thisvptr.getRefCount() < 1:
 *                 del self.thisvptr
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_6saxonc_PyXdmValue));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_self->thisvptr != NULL) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "saxonc.pyx":3216
 *      def __dealloc__(self):
 *         if type(self) is PyXdmValue and self.thisvptr != NULL:
 *             if self.thisvptr.getRefCount() < 1:             # <<<<<<<<<<<<<<
 *                 del self.thisvptr
 *             else:
 */
    __pyx_t_1 = ((__pyx_v_self->thisvptr->getRefCount() < 1) != 0);
    if (__pyx_t_1) {

      /* "saxonc.pyx":3217
 *         if type(self) is PyXdmValue and self.thisvptr != NULL:
 *             if self.thisvptr.getRefCount() < 1:
 *                 del self.thisvptr             # <<<<<<<<<<<<<<
 *             else:
 *                 self.thisvptr.decrementRefCount()
 */
      delete __pyx_v_self->thisvptr;

      /* "saxonc.pyx":3216
 *      def __dealloc__(self):
 *         if type(self) is PyXdmValue and self.thisvptr != NULL:
 *             if self.thisvptr.getRefCount() < 1:             # <<<<<<<<<<<<<<
 *                 del self.thisvptr
 *             else:
 */
      goto __pyx_L6;
    }

    /* "saxonc.pyx":3219
 *                 del self.thisvptr
 *             else:
 *                 self.thisvptr.decrementRefCount()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_v_self->thisvptr->decrementRefCount();
    }
    __pyx_L6:;

    /* "saxonc.pyx":3215
 *             self.thisvptr = new saxoncClasses.XdmValue()
 *      def __dealloc__(self):
 *         if type(self) is PyXdmValue and self.thisvptr != NULL:             # <<<<<<<<<<<<<<
 *             if self.thisvptr.getRefCount() < 1:
 *                 del self.thisvptr
 */
  }

  /* "saxonc.pyx":3214
 *         if type(self) is PyXdmValue:
 *             self.thisvptr = new saxoncClasses.XdmValue()
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is PyXdmValue and self.thisvptr != NULL:
 *             if self.thisvptr.getRefCount() < 1:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "saxonc.pyx":3222
 * 
 * 
 *      def add_xdm_item(self, PyXdmItem value):             # <<<<<<<<<<<<<<
 *         """
 *         add_xdm_tem(self, PyXdmItem value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_5add_xdm_item(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_6saxonc_10PyXdmValue_4add_xdm_item[] = "\n        add_xdm_tem(self, PyXdmItem value)\n        Add PyXdmItem to the Xdm sequence\n\n        Args:\n            value (PyXdmItem): The PyXdmItem object\n        ";
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_5add_xdm_item(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_xdm_item (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_6saxonc_PyXdmItem, 1, "value", 0))) __PYX_ERR(1, 3222, __pyx_L1_error)
  __pyx_r = __pyx_pf_6saxonc_10PyXdmValue_4add_xdm_item(((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_v_self), ((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_10PyXdmValue_4add_xdm_item(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self, struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_xdm_item", 0);

  /* "saxonc.pyx":3230
 *             value (PyXdmItem): The PyXdmItem object
 *         """
 *         self.thisvptr.addXdmItem(value.derivedptr)             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
  __pyx_v_self->thisvptr->addXdmItem(__pyx_v_value->derivedptr);

  /* "saxonc.pyx":3222
 * 
 * 
 *      def add_xdm_item(self, PyXdmItem value):             # <<<<<<<<<<<<<<
 *         """
 *         add_xdm_tem(self, PyXdmItem value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3233
 * 
 *      @property
 *      def head(self):             # <<<<<<<<<<<<<<
 *         """
 *         head(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_4head_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_4head_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_10PyXdmValue_4head___get__(((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_10PyXdmValue_4head___get__(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XdmItem *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3242
 * 
 *         """
 *         cdef PyXdmItem val = PyXdmItem()             # <<<<<<<<<<<<<<
 *         val.derivedptr = val.thisvptr = self.thisvptr.getHead()
 *         if val.derivedptr == NULL :
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmItem)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3243
 *         """
 *         cdef PyXdmItem val = PyXdmItem()
 *         val.derivedptr = val.thisvptr = self.thisvptr.getHead()             # <<<<<<<<<<<<<<
 *         if val.derivedptr == NULL :
 *             return None
 */
  __pyx_t_2 = __pyx_v_self->thisvptr->getHead();
  __pyx_v_val->derivedptr = __pyx_t_2;
  __pyx_v_val->__pyx_base.thisvptr = __pyx_t_2;

  /* "saxonc.pyx":3244
 *         cdef PyXdmItem val = PyXdmItem()
 *         val.derivedptr = val.thisvptr = self.thisvptr.getHead()
 *         if val.derivedptr == NULL :             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __pyx_t_3 = ((__pyx_v_val->derivedptr == NULL) != 0);
  if (__pyx_t_3) {

    /* "saxonc.pyx":3245
 *         val.derivedptr = val.thisvptr = self.thisvptr.getHead()
 *         if val.derivedptr == NULL :
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             val.derivedptr.incrementRefCount()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":3244
 *         cdef PyXdmItem val = PyXdmItem()
 *         val.derivedptr = val.thisvptr = self.thisvptr.getHead()
 *         if val.derivedptr == NULL :             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  }

  /* "saxonc.pyx":3247
 *             return None
 *         else:
 *             val.derivedptr.incrementRefCount()             # <<<<<<<<<<<<<<
 *             return val
 * 
 */
  /*else*/ {
    __pyx_v_val->derivedptr->incrementRefCount();

    /* "saxonc.pyx":3248
 *         else:
 *             val.derivedptr.incrementRefCount()
 *             return val             # <<<<<<<<<<<<<<
 * 
 *      def item_at(self, index):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;
  }

  /* "saxonc.pyx":3233
 * 
 *      @property
 *      def head(self):             # <<<<<<<<<<<<<<
 *         """
 *         head(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmValue.head.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3250
 *             return val
 * 
 *      def item_at(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         item_at(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_7item_at(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_6saxonc_10PyXdmValue_6item_at[] = "\n        item_at(self, index)\n        Get the n'th item in the value, counting from zero.\n        \n        Args:\n            index (int): the index of the item required. Counting from zero\n        Returns:\n            PyXdmItem: Get the item indicated at the index. If the item does not exist return None.\n        \n\n        ";
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_7item_at(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("item_at (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_10PyXdmValue_6item_at(((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_10PyXdmValue_6item_at(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self, PyObject *__pyx_v_index) {
  struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  XdmItem *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("item_at", 0);

  /* "saxonc.pyx":3262
 * 
 *         """
 *         cdef PyXdmItem val = PyXdmItem()             # <<<<<<<<<<<<<<
 *         val.derivedptr = val.thisvptr = self.thisvptr.itemAt(index)
 *         if val.derivedptr == NULL:
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmItem)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3263
 *         """
 *         cdef PyXdmItem val = PyXdmItem()
 *         val.derivedptr = val.thisvptr = self.thisvptr.itemAt(index)             # <<<<<<<<<<<<<<
 *         if val.derivedptr == NULL:
 *             return None
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 3263, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_self->thisvptr->itemAt(__pyx_t_2);
  __pyx_v_val->derivedptr = __pyx_t_3;
  __pyx_v_val->__pyx_base.thisvptr = __pyx_t_3;

  /* "saxonc.pyx":3264
 *         cdef PyXdmItem val = PyXdmItem()
 *         val.derivedptr = val.thisvptr = self.thisvptr.itemAt(index)
 *         if val.derivedptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __pyx_t_4 = ((__pyx_v_val->derivedptr == NULL) != 0);
  if (__pyx_t_4) {

    /* "saxonc.pyx":3265
 *         val.derivedptr = val.thisvptr = self.thisvptr.itemAt(index)
 *         if val.derivedptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             val.derivedptr.incrementRefCount()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":3264
 *         cdef PyXdmItem val = PyXdmItem()
 *         val.derivedptr = val.thisvptr = self.thisvptr.itemAt(index)
 *         if val.derivedptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  }

  /* "saxonc.pyx":3267
 *             return None
 *         else:
 *             val.derivedptr.incrementRefCount()             # <<<<<<<<<<<<<<
 *             return val
 * 
 */
  /*else*/ {
    __pyx_v_val->derivedptr->incrementRefCount();

    /* "saxonc.pyx":3268
 *         else:
 *             val.derivedptr.incrementRefCount()
 *             return val             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;
  }

  /* "saxonc.pyx":3250
 *             return val
 * 
 *      def item_at(self, index):             # <<<<<<<<<<<<<<
 *         """
 *         item_at(self, index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmValue.item_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3271
 * 
 *      @property
 *      def size(self):             # <<<<<<<<<<<<<<
 *         """
 *         size(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_10PyXdmValue_4size___get__(((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_10PyXdmValue_4size___get__(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3279
 *             int: The count of items in the sequence
 *         """
 *         return self.thisvptr.size()             # <<<<<<<<<<<<<<
 * 
 *      def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisvptr->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3271
 * 
 *      @property
 *      def size(self):             # <<<<<<<<<<<<<<
 *         """
 *         size(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmValue.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3281
 *         return self.thisvptr.size()
 * 
 *      def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         __repr__(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_9__repr__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6saxonc_10PyXdmValue_8__repr__[] = "\n        __repr__(self)\n        The string representation of PyXdmItem\n\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6saxonc_10PyXdmValue_8__repr__;
#endif
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_9__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_10PyXdmValue_8__repr__(((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_10PyXdmValue_8__repr__(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "saxonc.pyx":3287
 * 
 *         """
 *         cdef const char* c_string = self.thisvptr.toString()             # <<<<<<<<<<<<<<
 *         if c_string == NULL:
 *             raise Warning('Empty string returned')
 */
  __pyx_v_c_string = __pyx_v_self->thisvptr->toString();

  /* "saxonc.pyx":3288
 *         """
 *         cdef const char* c_string = self.thisvptr.toString()
 *         if c_string == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning('Empty string returned')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_c_string == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "saxonc.pyx":3289
 *         cdef const char* c_string = self.thisvptr.toString()
 *         if c_string == NULL:
 *             raise Warning('Empty string returned')             # <<<<<<<<<<<<<<
 *         else:
 *             ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Warning, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 3289, __pyx_L1_error)

    /* "saxonc.pyx":3288
 *         """
 *         cdef const char* c_string = self.thisvptr.toString()
 *         if c_string == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning('Empty string returned')
 *         else:
 */
  }

  /* "saxonc.pyx":3291
 *             raise Warning('Empty string returned')
 *         else:
 *             ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *             return ustring
 * 
 */
  /*else*/ {
    if (((__pyx_v_c_string != NULL) != 0)) {
      __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_2 = Py_None;
    }
    __pyx_v_ustring = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "saxonc.pyx":3292
 *         else:
 *             ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *             return ustring             # <<<<<<<<<<<<<<
 * 
 *      def __str__(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_ustring);
    __pyx_r = __pyx_v_ustring;
    goto __pyx_L0;
  }

  /* "saxonc.pyx":3281
 *         return self.thisvptr.size()
 * 
 *      def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         __repr__(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("saxonc.PyXdmValue.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3294
 *             return ustring
 * 
 *      def __str__(self):             # <<<<<<<<<<<<<<
 *         """
 *         __str__(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_11__str__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6saxonc_10PyXdmValue_10__str__[] = "\n        __str__(self)\n        The string representation of PyXdmItem\n\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6saxonc_10PyXdmValue_10__str__;
#endif
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_11__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_10PyXdmValue_10__str__(((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_10PyXdmValue_10__str__(struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "saxonc.pyx":3300
 * 
 *         """
 *         cdef const char* c_string = self.thisvptr.toString()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->thisvptr->toString();

  /* "saxonc.pyx":3301
 *         """
 *         cdef const char* c_string = self.thisvptr.toString()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3302
 *         cdef const char* c_string = self.thisvptr.toString()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 * cdef class PyXdmItem(PyXdmValue):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":3294
 *             return ustring
 * 
 *      def __str__(self):             # <<<<<<<<<<<<<<
 *         """
 *         __str__(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXdmValue.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_10PyXdmValue_12__reduce_cython__(((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_10PyXdmValue_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmValue.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6saxonc_10PyXdmValue_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_10PyXdmValue_14__setstate_cython__(((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_10PyXdmValue_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmValue.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3307
 *      cdef saxoncClasses.XdmItem *derivedptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is PyXdmItem:
 *             self.derivedptr = self.thisvptr = new saxoncClasses.XdmItem()
 */

/* Python wrapper */
static int __pyx_pw_6saxonc_9PyXdmItem_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6saxonc_9PyXdmItem_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6saxonc_9PyXdmItem___cinit__(((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6saxonc_9PyXdmItem___cinit__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  XdmItem *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "saxonc.pyx":3308
 * 
 *      def __cinit__(self):
 *         if type(self) is PyXdmItem:             # <<<<<<<<<<<<<<
 *             self.derivedptr = self.thisvptr = new saxoncClasses.XdmItem()
 *      def __dealloc__(self):
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_6saxonc_PyXdmItem));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":3309
 *      def __cinit__(self):
 *         if type(self) is PyXdmItem:
 *             self.derivedptr = self.thisvptr = new saxoncClasses.XdmItem()             # <<<<<<<<<<<<<<
 *      def __dealloc__(self):
 *         if type(self) is PyXdmItem and self.derivedptr != NULL:
 */
    try {
      __pyx_t_3 = new XdmItem();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 3309, __pyx_L1_error)
    }
    __pyx_v_self->derivedptr = __pyx_t_3;
    __pyx_v_self->__pyx_base.thisvptr = __pyx_t_3;

    /* "saxonc.pyx":3308
 * 
 *      def __cinit__(self):
 *         if type(self) is PyXdmItem:             # <<<<<<<<<<<<<<
 *             self.derivedptr = self.thisvptr = new saxoncClasses.XdmItem()
 *      def __dealloc__(self):
 */
  }

  /* "saxonc.pyx":3307
 *      cdef saxoncClasses.XdmItem *derivedptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is PyXdmItem:
 *             self.derivedptr = self.thisvptr = new saxoncClasses.XdmItem()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXdmItem.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3310
 *         if type(self) is PyXdmItem:
 *             self.derivedptr = self.thisvptr = new saxoncClasses.XdmItem()
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is PyXdmItem and self.derivedptr != NULL:
 *             if self.derivedptr.getRefCount() < 1:
 */

/* Python wrapper */
static void __pyx_pw_6saxonc_9PyXdmItem_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6saxonc_9PyXdmItem_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6saxonc_9PyXdmItem_2__dealloc__(((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6saxonc_9PyXdmItem_2__dealloc__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "saxonc.pyx":3311
 *             self.derivedptr = self.thisvptr = new saxoncClasses.XdmItem()
 *      def __dealloc__(self):
 *         if type(self) is PyXdmItem and self.derivedptr != NULL:             # <<<<<<<<<<<<<<
 *             if self.derivedptr.getRefCount() < 1:
 *                 del self.derivedptr
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_6saxonc_PyXdmItem));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_self->derivedptr != NULL) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "saxonc.pyx":3312
 *      def __dealloc__(self):
 *         if type(self) is PyXdmItem and self.derivedptr != NULL:
 *             if self.derivedptr.getRefCount() < 1:             # <<<<<<<<<<<<<<
 *                 del self.derivedptr
 *             else:
 */
    __pyx_t_1 = ((__pyx_v_self->derivedptr->getRefCount() < 1) != 0);
    if (__pyx_t_1) {

      /* "saxonc.pyx":3313
 *         if type(self) is PyXdmItem and self.derivedptr != NULL:
 *             if self.derivedptr.getRefCount() < 1:
 *                 del self.derivedptr             # <<<<<<<<<<<<<<
 *             else:
 *                 self.derivedptr.decrementRefCount()
 */
      delete __pyx_v_self->derivedptr;

      /* "saxonc.pyx":3312
 *      def __dealloc__(self):
 *         if type(self) is PyXdmItem and self.derivedptr != NULL:
 *             if self.derivedptr.getRefCount() < 1:             # <<<<<<<<<<<<<<
 *                 del self.derivedptr
 *             else:
 */
      goto __pyx_L6;
    }

    /* "saxonc.pyx":3315
 *                 del self.derivedptr
 *             else:
 *                 self.derivedptr.decrementRefCount()             # <<<<<<<<<<<<<<
 * 
 *         '''if type(self) is PyXdmItem:
 */
    /*else*/ {
      __pyx_v_self->derivedptr->decrementRefCount();
    }
    __pyx_L6:;

    /* "saxonc.pyx":3311
 *             self.derivedptr = self.thisvptr = new saxoncClasses.XdmItem()
 *      def __dealloc__(self):
 *         if type(self) is PyXdmItem and self.derivedptr != NULL:             # <<<<<<<<<<<<<<
 *             if self.derivedptr.getRefCount() < 1:
 *                 del self.derivedptr
 */
  }

  /* "saxonc.pyx":3310
 *         if type(self) is PyXdmItem:
 *             self.derivedptr = self.thisvptr = new saxoncClasses.XdmItem()
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is PyXdmItem and self.derivedptr != NULL:
 *             if self.derivedptr.getRefCount() < 1:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "saxonc.pyx":3321
 * 
 *      @property
 *      def string_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         string_value(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_12string_value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_12string_value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmItem_12string_value___get__(((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmItem_12string_value___get__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3326
 *         Property to get the the strign value of the XdmItem
 *         """
 *         cdef const char* c_string = self.derivedptr.getStringValue()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->derivedptr->getStringValue();

  /* "saxonc.pyx":3327
 *         """
 *         cdef const char* c_string = self.derivedptr.getStringValue()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3328
 *         cdef const char* c_string = self.derivedptr.getStringValue()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":3321
 * 
 *      @property
 *      def string_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         string_value(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXdmItem.string_value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3331
 * 
 * 
 *      def __repr__(self):             # <<<<<<<<<<<<<<
 *         return make_py_str(self.derivedptr.getStringValue())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmItem_4__repr__(((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmItem_4__repr__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "saxonc.pyx":3332
 * 
 *      def __repr__(self):
 *         return make_py_str(self.derivedptr.getStringValue())             # <<<<<<<<<<<<<<
 * 
 *      def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6saxonc_make_py_str(__pyx_v_self->derivedptr->getStringValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3331
 * 
 * 
 *      def __repr__(self):             # <<<<<<<<<<<<<<
 *         return make_py_str(self.derivedptr.getStringValue())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmItem.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3334
 *         return make_py_str(self.derivedptr.getStringValue())
 * 
 *      def __str__(self):             # <<<<<<<<<<<<<<
 *         return make_py_str(self.derivedptr.getStringValue())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_7__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_7__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmItem_6__str__(((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmItem_6__str__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "saxonc.pyx":3335
 * 
 *      def __str__(self):
 *         return make_py_str(self.derivedptr.getStringValue())             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6saxonc_make_py_str(__pyx_v_self->derivedptr->getStringValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3334
 *         return make_py_str(self.derivedptr.getStringValue())
 * 
 *      def __str__(self):             # <<<<<<<<<<<<<<
 *         return make_py_str(self.derivedptr.getStringValue())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmItem.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3338
 * 
 *      @property
 *      def is_atomic(self):             # <<<<<<<<<<<<<<
 *         """
 *         is_atomic(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_9is_atomic_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_9is_atomic_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmItem_9is_atomic___get__(((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmItem_9is_atomic___get__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3346
 *             bool: Check of is atomic value
 *         """
 *         return self.derivedptr.isAtomic()             # <<<<<<<<<<<<<<
 * 
 *      def get_node_value(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->derivedptr->isAtomic()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3338
 * 
 *      @property
 *      def is_atomic(self):             # <<<<<<<<<<<<<<
 *         """
 *         is_atomic(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmItem.is_atomic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3348
 *         return self.derivedptr.isAtomic()
 * 
 *      def get_node_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         get_node_value(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_9get_node_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_9PyXdmItem_8get_node_value[] = "\n        get_node_value(self)\n        Get the subclass PyXdmNode for this PyXdmItem object current object is an atomic value\n    \n        Returns:\n            PyXdmNode: Subclass this object to PyXdmNode or error \n        ";
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_9get_node_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_node_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmItem_8get_node_value(((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmItem_8get_node_value(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_node_value", 0);

  /* "saxonc.pyx":3356
 *             PyXdmNode: Subclass this object to PyXdmNode or error
 *         """
 *         cdef PyXdmNode val = None             # <<<<<<<<<<<<<<
 *         if self.is_atomic:
 *           raise Exception("The PyXdmItem is an PyXdmAtomicValue therefore cannot be sub-classed to an PyXdmNode")
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":3357
 *         """
 *         cdef PyXdmNode val = None
 *         if self.is_atomic:             # <<<<<<<<<<<<<<
 *           raise Exception("The PyXdmItem is an PyXdmAtomicValue therefore cannot be sub-classed to an PyXdmNode")
 *         val = PyXdmNode()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_atomic); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 3357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "saxonc.pyx":3358
 *         cdef PyXdmNode val = None
 *         if self.is_atomic:
 *           raise Exception("The PyXdmItem is an PyXdmAtomicValue therefore cannot be sub-classed to an PyXdmNode")             # <<<<<<<<<<<<<<
 *         val = PyXdmNode()
 *         val.derivednptr = val.derivedptr = <saxoncClasses.XdmNode*> self.derivedptr
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 3358, __pyx_L1_error)

    /* "saxonc.pyx":3357
 *         """
 *         cdef PyXdmNode val = None
 *         if self.is_atomic:             # <<<<<<<<<<<<<<
 *           raise Exception("The PyXdmItem is an PyXdmAtomicValue therefore cannot be sub-classed to an PyXdmNode")
 *         val = PyXdmNode()
 */
  }

  /* "saxonc.pyx":3359
 *         if self.is_atomic:
 *           raise Exception("The PyXdmItem is an PyXdmAtomicValue therefore cannot be sub-classed to an PyXdmNode")
 *         val = PyXdmNode()             # <<<<<<<<<<<<<<
 *         val.derivednptr = val.derivedptr = <saxoncClasses.XdmNode*> self.derivedptr
 *         '''val.derivednptr.incrementRefCount()'''
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3360
 *           raise Exception("The PyXdmItem is an PyXdmAtomicValue therefore cannot be sub-classed to an PyXdmNode")
 *         val = PyXdmNode()
 *         val.derivednptr = val.derivedptr = <saxoncClasses.XdmNode*> self.derivedptr             # <<<<<<<<<<<<<<
 *         '''val.derivednptr.incrementRefCount()'''
 *         return val
 */
  __pyx_v_val->derivednptr = ((XdmNode *)__pyx_v_self->derivedptr);
  __pyx_v_val->__pyx_base.derivedptr = ((XdmNode *)__pyx_v_self->derivedptr);

  /* "saxonc.pyx":3362
 *         val.derivednptr = val.derivedptr = <saxoncClasses.XdmNode*> self.derivedptr
 *         '''val.derivednptr.incrementRefCount()'''
 *         return val             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":3348
 *         return self.derivedptr.isAtomic()
 * 
 *      def get_node_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         get_node_value(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmItem.get_node_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3365
 * 
 *      @property
 *      def head(self):             # <<<<<<<<<<<<<<
 *         """
 *         head(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_4head_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_4head_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmItem_4head___get__(((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmItem_4head___get__(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3374
 * 
 *         """
 *         return self             # <<<<<<<<<<<<<<
 * 
 *      def get_atomic_value(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "saxonc.pyx":3365
 * 
 *      @property
 *      def head(self):             # <<<<<<<<<<<<<<
 *         """
 *         head(self)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3376
 *         return self
 * 
 *      def get_atomic_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         get_atomic_value(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_11get_atomic_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_9PyXdmItem_10get_atomic_value[] = "\n        get_atomic_value(self)\n        Get the subclass PyXdmAtomicValue for this PyXdmItem object current object is an atomic value\n    \n        Returns:\n            PyXdmAtomicValue: Subclass this object to PyXdmAtomicValue or error \n        ";
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_11get_atomic_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_atomic_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmItem_10get_atomic_value(((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmItem_10get_atomic_value(struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_atomic_value", 0);

  /* "saxonc.pyx":3384
 *             PyXdmAtomicValue: Subclass this object to PyXdmAtomicValue or error
 *         """
 *         if self.is_atomic == False:             # <<<<<<<<<<<<<<
 *           raise Exception("The PyXdmItem is not an PyXdmAtomicValue")
 *         val = PyXdmAtomicValue()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_atomic); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 3384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "saxonc.pyx":3385
 *         """
 *         if self.is_atomic == False:
 *           raise Exception("The PyXdmItem is not an PyXdmAtomicValue")             # <<<<<<<<<<<<<<
 *         val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = <saxoncClasses.XdmAtomicValue*>self.derivedptr
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 3385, __pyx_L1_error)

    /* "saxonc.pyx":3384
 *             PyXdmAtomicValue: Subclass this object to PyXdmAtomicValue or error
 *         """
 *         if self.is_atomic == False:             # <<<<<<<<<<<<<<
 *           raise Exception("The PyXdmItem is not an PyXdmAtomicValue")
 *         val = PyXdmAtomicValue()
 */
  }

  /* "saxonc.pyx":3386
 *         if self.is_atomic == False:
 *           raise Exception("The PyXdmItem is not an PyXdmAtomicValue")
 *         val = PyXdmAtomicValue()             # <<<<<<<<<<<<<<
 *         val.derivedaptr = val.derivedptr = <saxoncClasses.XdmAtomicValue*>self.derivedptr
 *         val.derivedaptr.incrementRefCount()
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "saxonc.pyx":3387
 *           raise Exception("The PyXdmItem is not an PyXdmAtomicValue")
 *         val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = <saxoncClasses.XdmAtomicValue*>self.derivedptr             # <<<<<<<<<<<<<<
 *         val.derivedaptr.incrementRefCount()
 *         return val
 */
  __pyx_v_val->derivedaptr = ((XdmAtomicValue *)__pyx_v_self->derivedptr);
  __pyx_v_val->__pyx_base.derivedptr = ((XdmAtomicValue *)__pyx_v_self->derivedptr);

  /* "saxonc.pyx":3388
 *         val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = <saxoncClasses.XdmAtomicValue*>self.derivedptr
 *         val.derivedaptr.incrementRefCount()             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_v_val->derivedaptr->incrementRefCount();

  /* "saxonc.pyx":3389
 *         val.derivedaptr = val.derivedptr = <saxoncClasses.XdmAtomicValue*>self.derivedptr
 *         val.derivedaptr.incrementRefCount()
 *         return val             # <<<<<<<<<<<<<<
 * 
 * cdef class PyXdmNode(PyXdmItem):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":3376
 *         return self
 * 
 *      def get_atomic_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         get_atomic_value(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXdmItem.get_atomic_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmItem_12__reduce_cython__(((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmItem_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmItem.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmItem_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmItem_14__setstate_cython__(((struct __pyx_obj_6saxonc_PyXdmItem *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmItem_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmItem *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmItem.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3394
 *      cdef saxoncClasses.XdmNode *derivednptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.derivednptr = self.derivedptr = self.thisvptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_6saxonc_9PyXdmNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6saxonc_9PyXdmNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode___cinit__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6saxonc_9PyXdmNode___cinit__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "saxonc.pyx":3395
 * 
 *      def __cinit__(self):
 *         self.derivednptr = self.derivedptr = self.thisvptr = NULL             # <<<<<<<<<<<<<<
 * 
 *      def __dealloc__(self):
 */
  __pyx_v_self->derivednptr = NULL;
  __pyx_v_self->__pyx_base.derivedptr = NULL;
  __pyx_v_self->__pyx_base.__pyx_base.thisvptr = NULL;

  /* "saxonc.pyx":3394
 *      cdef saxoncClasses.XdmNode *derivednptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.derivednptr = self.derivedptr = self.thisvptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3397
 *         self.derivednptr = self.derivedptr = self.thisvptr = NULL
 * 
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is PyXdmNode and self.derivednptr != NULL:
 *                  if self.derivednptr.getRefCount() < 1:
 */

/* Python wrapper */
static void __pyx_pw_6saxonc_9PyXdmNode_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6saxonc_9PyXdmNode_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6saxonc_9PyXdmNode_2__dealloc__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6saxonc_9PyXdmNode_2__dealloc__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "saxonc.pyx":3398
 * 
 *      def __dealloc__(self):
 *         if type(self) is PyXdmNode and self.derivednptr != NULL:             # <<<<<<<<<<<<<<
 *                  if self.derivednptr.getRefCount() < 1:
 *                      del self.derivednptr
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_6saxonc_PyXdmNode));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_self->derivednptr != NULL) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "saxonc.pyx":3399
 *      def __dealloc__(self):
 *         if type(self) is PyXdmNode and self.derivednptr != NULL:
 *                  if self.derivednptr.getRefCount() < 1:             # <<<<<<<<<<<<<<
 *                      del self.derivednptr
 *                  else:
 */
    __pyx_t_1 = ((__pyx_v_self->derivednptr->getRefCount() < 1) != 0);
    if (__pyx_t_1) {

      /* "saxonc.pyx":3400
 *         if type(self) is PyXdmNode and self.derivednptr != NULL:
 *                  if self.derivednptr.getRefCount() < 1:
 *                      del self.derivednptr             # <<<<<<<<<<<<<<
 *                  else:
 *                      self.derivednptr.decrementRefCount()
 */
      delete __pyx_v_self->derivednptr;

      /* "saxonc.pyx":3399
 *      def __dealloc__(self):
 *         if type(self) is PyXdmNode and self.derivednptr != NULL:
 *                  if self.derivednptr.getRefCount() < 1:             # <<<<<<<<<<<<<<
 *                      del self.derivednptr
 *                  else:
 */
      goto __pyx_L6;
    }

    /* "saxonc.pyx":3402
 *                      del self.derivednptr
 *                  else:
 *                      self.derivednptr.decrementRefCount()             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
    /*else*/ {
      __pyx_v_self->derivednptr->decrementRefCount();
    }
    __pyx_L6:;

    /* "saxonc.pyx":3398
 * 
 *      def __dealloc__(self):
 *         if type(self) is PyXdmNode and self.derivednptr != NULL:             # <<<<<<<<<<<<<<
 *                  if self.derivednptr.getRefCount() < 1:
 *                      del self.derivednptr
 */
  }

  /* "saxonc.pyx":3397
 *         self.derivednptr = self.derivedptr = self.thisvptr = NULL
 * 
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is PyXdmNode and self.derivednptr != NULL:
 *                  if self.derivednptr.getRefCount() < 1:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "saxonc.pyx":3405
 * 
 *      @property
 *      def head(self):             # <<<<<<<<<<<<<<
 *         """
 *         head(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_4head_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_4head_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_4head___get__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_4head___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3414
 * 
 *         """
 *         return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "saxonc.pyx":3405
 * 
 *      @property
 *      def head(self):             # <<<<<<<<<<<<<<
 *         """
 *         head(self)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3418
 * 
 *      @property
 *      def node_kind(self):             # <<<<<<<<<<<<<<
 *         """
 *         node_kind(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_9node_kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_9node_kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_9node_kind___get__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_9node_kind___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3428
 *         """
 *         cdef int kind
 *         return self.derivednptr.getNodeKind()             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->derivednptr->getNodeKind()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3418
 * 
 *      @property
 *      def node_kind(self):             # <<<<<<<<<<<<<<
 *         """
 *         node_kind(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmNode.node_kind.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3431
 * 
 *      @property
 *      def node_kind_str(self):             # <<<<<<<<<<<<<<
 *         """
 *         node_kind(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_13node_kind_str_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_13node_kind_str_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_13node_kind_str___get__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_13node_kind_str___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  PyObject *__pyx_v_kind = 0;
  int __pyx_v_nk;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3441
 *         """
 *         cdef str kind
 *         cdef int nk = self.derivednptr.getNodeKind()             # <<<<<<<<<<<<<<
 *         if nk == DOCUMENT:
 *             kind = 'document'
 */
  __pyx_v_nk = __pyx_v_self->derivednptr->getNodeKind();

  /* "saxonc.pyx":3442
 *         cdef str kind
 *         cdef int nk = self.derivednptr.getNodeKind()
 *         if nk == DOCUMENT:             # <<<<<<<<<<<<<<
 *             kind = 'document'
 *         elif nk == ELEMENT:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_nk); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DOCUMENT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 3442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "saxonc.pyx":3443
 *         cdef int nk = self.derivednptr.getNodeKind()
 *         if nk == DOCUMENT:
 *             kind = 'document'             # <<<<<<<<<<<<<<
 *         elif nk == ELEMENT:
 *             kind = 'element'
 */
    __Pyx_INCREF(__pyx_n_s_document);
    __pyx_v_kind = __pyx_n_s_document;

    /* "saxonc.pyx":3442
 *         cdef str kind
 *         cdef int nk = self.derivednptr.getNodeKind()
 *         if nk == DOCUMENT:             # <<<<<<<<<<<<<<
 *             kind = 'document'
 *         elif nk == ELEMENT:
 */
    goto __pyx_L3;
  }

  /* "saxonc.pyx":3444
 *         if nk == DOCUMENT:
 *             kind = 'document'
 *         elif nk == ELEMENT:             # <<<<<<<<<<<<<<
 *             kind = 'element'
 *         elif nk == ATTRIBUTE:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_nk); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ELEMENT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 3444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "saxonc.pyx":3445
 *             kind = 'document'
 *         elif nk == ELEMENT:
 *             kind = 'element'             # <<<<<<<<<<<<<<
 *         elif nk == ATTRIBUTE:
 *             kind = 'attribute'
 */
    __Pyx_INCREF(__pyx_n_s_element);
    __pyx_v_kind = __pyx_n_s_element;

    /* "saxonc.pyx":3444
 *         if nk == DOCUMENT:
 *             kind = 'document'
 *         elif nk == ELEMENT:             # <<<<<<<<<<<<<<
 *             kind = 'element'
 *         elif nk == ATTRIBUTE:
 */
    goto __pyx_L3;
  }

  /* "saxonc.pyx":3446
 *         elif nk == ELEMENT:
 *             kind = 'element'
 *         elif nk == ATTRIBUTE:             # <<<<<<<<<<<<<<
 *             kind = 'attribute'
 *         elif nk == TEXT:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_nk); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ATTRIBUTE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 3446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "saxonc.pyx":3447
 *             kind = 'element'
 *         elif nk == ATTRIBUTE:
 *             kind = 'attribute'             # <<<<<<<<<<<<<<
 *         elif nk == TEXT:
 *             kind = 'text'
 */
    __Pyx_INCREF(__pyx_n_s_attribute);
    __pyx_v_kind = __pyx_n_s_attribute;

    /* "saxonc.pyx":3446
 *         elif nk == ELEMENT:
 *             kind = 'element'
 *         elif nk == ATTRIBUTE:             # <<<<<<<<<<<<<<
 *             kind = 'attribute'
 *         elif nk == TEXT:
 */
    goto __pyx_L3;
  }

  /* "saxonc.pyx":3448
 *         elif nk == ATTRIBUTE:
 *             kind = 'attribute'
 *         elif nk == TEXT:             # <<<<<<<<<<<<<<
 *             kind = 'text'
 *         elif nk == COMMENT:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_nk); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TEXT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 3448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "saxonc.pyx":3449
 *             kind = 'attribute'
 *         elif nk == TEXT:
 *             kind = 'text'             # <<<<<<<<<<<<<<
 *         elif nk == COMMENT:
 *             kind = 'comment'
 */
    __Pyx_INCREF(__pyx_n_s_text);
    __pyx_v_kind = __pyx_n_s_text;

    /* "saxonc.pyx":3448
 *         elif nk == ATTRIBUTE:
 *             kind = 'attribute'
 *         elif nk == TEXT:             # <<<<<<<<<<<<<<
 *             kind = 'text'
 *         elif nk == COMMENT:
 */
    goto __pyx_L3;
  }

  /* "saxonc.pyx":3450
 *         elif nk == TEXT:
 *             kind = 'text'
 *         elif nk == COMMENT:             # <<<<<<<<<<<<<<
 *             kind = 'comment'
 *         elif nk == PROCESSING_INSTRUCTION:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_nk); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_COMMENT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3450, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 3450, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "saxonc.pyx":3451
 *             kind = 'text'
 *         elif nk == COMMENT:
 *             kind = 'comment'             # <<<<<<<<<<<<<<
 *         elif nk == PROCESSING_INSTRUCTION:
 *             kind = 'processing-instruction'
 */
    __Pyx_INCREF(__pyx_n_s_comment);
    __pyx_v_kind = __pyx_n_s_comment;

    /* "saxonc.pyx":3450
 *         elif nk == TEXT:
 *             kind = 'text'
 *         elif nk == COMMENT:             # <<<<<<<<<<<<<<
 *             kind = 'comment'
 *         elif nk == PROCESSING_INSTRUCTION:
 */
    goto __pyx_L3;
  }

  /* "saxonc.pyx":3452
 *         elif nk == COMMENT:
 *             kind = 'comment'
 *         elif nk == PROCESSING_INSTRUCTION:             # <<<<<<<<<<<<<<
 *             kind = 'processing-instruction'
 *         elif nk == NAMESPACE:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_nk); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PROCESSING_INSTRUCTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 3452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "saxonc.pyx":3453
 *             kind = 'comment'
 *         elif nk == PROCESSING_INSTRUCTION:
 *             kind = 'processing-instruction'             # <<<<<<<<<<<<<<
 *         elif nk == NAMESPACE:
 *             kind = 'namespace'
 */
    __Pyx_INCREF(__pyx_kp_s_processing_instruction);
    __pyx_v_kind = __pyx_kp_s_processing_instruction;

    /* "saxonc.pyx":3452
 *         elif nk == COMMENT:
 *             kind = 'comment'
 *         elif nk == PROCESSING_INSTRUCTION:             # <<<<<<<<<<<<<<
 *             kind = 'processing-instruction'
 *         elif nk == NAMESPACE:
 */
    goto __pyx_L3;
  }

  /* "saxonc.pyx":3454
 *         elif nk == PROCESSING_INSTRUCTION:
 *             kind = 'processing-instruction'
 *         elif nk == NAMESPACE:             # <<<<<<<<<<<<<<
 *             kind = 'namespace'
 *         elif nk == UNKNOWN:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_nk); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NAMESPACE); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 3454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "saxonc.pyx":3455
 *             kind = 'processing-instruction'
 *         elif nk == NAMESPACE:
 *             kind = 'namespace'             # <<<<<<<<<<<<<<
 *         elif nk == UNKNOWN:
 *             kind = 'unknown'
 */
    __Pyx_INCREF(__pyx_n_s_namespace);
    __pyx_v_kind = __pyx_n_s_namespace;

    /* "saxonc.pyx":3454
 *         elif nk == PROCESSING_INSTRUCTION:
 *             kind = 'processing-instruction'
 *         elif nk == NAMESPACE:             # <<<<<<<<<<<<<<
 *             kind = 'namespace'
 *         elif nk == UNKNOWN:
 */
    goto __pyx_L3;
  }

  /* "saxonc.pyx":3456
 *         elif nk == NAMESPACE:
 *             kind = 'namespace'
 *         elif nk == UNKNOWN:             # <<<<<<<<<<<<<<
 *             kind = 'unknown'
 *         else:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_nk); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_UNKNOWN); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 3456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_4)) {

    /* "saxonc.pyx":3457
 *             kind = 'namespace'
 *         elif nk == UNKNOWN:
 *             kind = 'unknown'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError('Unknown node kind: %d' % nk)
 */
    __Pyx_INCREF(__pyx_n_s_unknown);
    __pyx_v_kind = __pyx_n_s_unknown;

    /* "saxonc.pyx":3456
 *         elif nk == NAMESPACE:
 *             kind = 'namespace'
 *         elif nk == UNKNOWN:             # <<<<<<<<<<<<<<
 *             kind = 'unknown'
 *         else:
 */
    goto __pyx_L3;
  }

  /* "saxonc.pyx":3459
 *             kind = 'unknown'
 *         else:
 *             raise ValueError('Unknown node kind: %d' % nk)             # <<<<<<<<<<<<<<
 *         return kind
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_nk); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_node_kind_d, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 3459, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "saxonc.pyx":3460
 *         else:
 *             raise ValueError('Unknown node kind: %d' % nk)
 *         return kind             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_kind);
  __pyx_r = __pyx_v_kind;
  goto __pyx_L0;

  /* "saxonc.pyx":3431
 * 
 *      @property
 *      def node_kind_str(self):             # <<<<<<<<<<<<<<
 *         """
 *         node_kind(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("saxonc.PyXdmNode.node_kind_str.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kind);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3463
 * 
 *      @property
 *      def name(self):             # <<<<<<<<<<<<<<
 *         """
 *         name(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_4name___get__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_4name___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3470
 *             str: the name of the node. In the case of unnamed nodes (for example, text and comment nodes) return None
 *         """
 *         cdef const char* c_string = self.derivednptr.getNodeName()             # <<<<<<<<<<<<<<
 *         if c_string == NULL:
 *             return None
 */
  __pyx_v_c_string = __pyx_v_self->derivednptr->getNodeName();

  /* "saxonc.pyx":3471
 *         """
 *         cdef const char* c_string = self.derivednptr.getNodeName()
 *         if c_string == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_c_string == NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":3472
 *         cdef const char* c_string = self.derivednptr.getNodeName()
 *         if c_string == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             ustring = c_string.decode('UTF-8')
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":3471
 *         """
 *         cdef const char* c_string = self.derivednptr.getNodeName()
 *         if c_string == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  }

  /* "saxonc.pyx":3474
 *             return None
 *         else:
 *             ustring = c_string.decode('UTF-8')             # <<<<<<<<<<<<<<
 *             return ustring
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_ustring = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "saxonc.pyx":3475
 *         else:
 *             ustring = c_string.decode('UTF-8')
 *             return ustring             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_ustring);
    __pyx_r = __pyx_v_ustring;
    goto __pyx_L0;
  }

  /* "saxonc.pyx":3463
 * 
 *      @property
 *      def name(self):             # <<<<<<<<<<<<<<
 *         """
 *         name(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXdmNode.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3478
 * 
 *      @property
 *      def typed_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         typed_value(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_11typed_value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_11typed_value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_11typed_value___get__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_11typed_value___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PyXdmValue *__pyx_v_val = 0;
  XdmValue *__pyx_v_xdmValue;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3485
 *             PyXdmValue:the typed value. If the typed value is a single atomic value, this will be returne as an instance of {@link XdmAtomicValue}
 *         """
 *         cdef PyXdmValue val = None             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmValue * xdmValue = self.derivednptr.getTypedValue()
 *         if xdmValue == NULL:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmValue *)Py_None);

  /* "saxonc.pyx":3486
 *         """
 *         cdef PyXdmValue val = None
 *         cdef saxoncClasses.XdmValue * xdmValue = self.derivednptr.getTypedValue()             # <<<<<<<<<<<<<<
 *         if xdmValue == NULL:
 *             return None
 */
  __pyx_v_xdmValue = __pyx_v_self->derivednptr->getTypedValue();

  /* "saxonc.pyx":3487
 *         cdef PyXdmValue val = None
 *         cdef saxoncClasses.XdmValue * xdmValue = self.derivednptr.getTypedValue()
 *         if xdmValue == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_xdmValue == NULL) != 0);
  if (__pyx_t_1) {

    /* "saxonc.pyx":3488
 *         cdef saxoncClasses.XdmValue * xdmValue = self.derivednptr.getTypedValue()
 *         if xdmValue == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             val = PyXdmValue()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "saxonc.pyx":3487
 *         cdef PyXdmValue val = None
 *         cdef saxoncClasses.XdmValue * xdmValue = self.derivednptr.getTypedValue()
 *         if xdmValue == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  }

  /* "saxonc.pyx":3490
 *             return None
 *         else:
 *             val = PyXdmValue()             # <<<<<<<<<<<<<<
 *             val.thisvptr = xdmValue
 *             return val
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmValue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmValue *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "saxonc.pyx":3491
 *         else:
 *             val = PyXdmValue()
 *             val.thisvptr = xdmValue             # <<<<<<<<<<<<<<
 *             return val
 * 
 */
    __pyx_v_val->thisvptr = __pyx_v_xdmValue;

    /* "saxonc.pyx":3492
 *             val = PyXdmValue()
 *             val.thisvptr = xdmValue
 *             return val             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_val));
    __pyx_r = ((PyObject *)__pyx_v_val);
    goto __pyx_L0;
  }

  /* "saxonc.pyx":3478
 * 
 *      @property
 *      def typed_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         typed_value(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXdmNode.typed_value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3495
 * 
 *      @property
 *      def base_uri(self):             # <<<<<<<<<<<<<<
 *         """
 *         base_uri(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_8base_uri_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_8base_uri_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_8base_uri___get__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_8base_uri___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3505
 *                  where the node has no parent.
 *         """
 *         return make_py_str(self.derivednptr.getBaseUri())             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6saxonc_make_py_str(__pyx_v_self->derivednptr->getBaseUri()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3495
 * 
 *      @property
 *      def base_uri(self):             # <<<<<<<<<<<<<<
 *         """
 *         base_uri(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmNode.base_uri.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3508
 * 
 *      @property
 *      def string_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         get_String_value(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_12string_value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_12string_value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_12string_value___get__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_12string_value___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3517
 * 
 *         """
 *         cdef const char* c_string = self.derivednptr.getStringValue()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->derivednptr->getStringValue();

  /* "saxonc.pyx":3518
 *         """
 *         cdef const char* c_string = self.derivednptr.getStringValue()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3519
 *         cdef const char* c_string = self.derivednptr.getStringValue()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":3508
 * 
 *      @property
 *      def string_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         get_String_value(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXdmNode.string_value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3522
 * 
 * 
 *      def __str__(self):             # <<<<<<<<<<<<<<
 *         """
 *         __str__(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_5__str__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6saxonc_9PyXdmNode_4__str__[] = "\n        __str__(self)\n        The string value of the node as defined in the XPath data model\n        Returns:\n            str: String value of this node\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6saxonc_9PyXdmNode_4__str__;
#endif
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_5__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_4__str__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_4__str__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "saxonc.pyx":3529
 *             str: String value of this node
 *         """
 *         cdef const char* c_string = self.derivednptr.toString()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->derivednptr->toString();

  /* "saxonc.pyx":3530
 *         """
 *         cdef const char* c_string = self.derivednptr.toString()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3531
 *         cdef const char* c_string = self.derivednptr.toString()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 *      def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":3522
 * 
 * 
 *      def __str__(self):             # <<<<<<<<<<<<<<
 *         """
 *         __str__(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXdmNode.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3533
 *         return ustring
 * 
 *      def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         ___repr__
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_7__repr__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6saxonc_9PyXdmNode_6__repr__[] = "\n        ___repr__ \n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6saxonc_9PyXdmNode_6__repr__;
#endif
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_7__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_6__repr__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_6__repr__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "saxonc.pyx":3537
 *         ___repr__
 *         """
 *         cdef const char* c_string = self.derivednptr.toString()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->derivednptr->toString();

  /* "saxonc.pyx":3538
 *         """
 *         cdef const char* c_string = self.derivednptr.toString()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3539
 *         cdef const char* c_string = self.derivednptr.toString()
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":3533
 *         return ustring
 * 
 *      def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         ___repr__
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("saxonc.PyXdmNode.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3543
 * 
 * 
 *      def get_parent(self):             # <<<<<<<<<<<<<<
 *         """
 *         get_parent(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_9get_parent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6saxonc_9PyXdmNode_8get_parent[] = "\n        get_parent(self)\n        Get the current node's parent\n\n        Returns:\n            PyXdmNode: The parent node as PyXdmNode object\n        ";
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_9get_parent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_parent (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_8get_parent(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_8get_parent(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XdmNode *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_parent", 0);

  /* "saxonc.pyx":3552
 *         """
 * 
 *         cdef PyXdmNode val = PyXdmNode()             # <<<<<<<<<<<<<<
 *         val.derivednptr = val.derivedptr = val.thisvptr = self.derivednptr.getParent()
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3553
 * 
 *         cdef PyXdmNode val = PyXdmNode()
 *         val.derivednptr = val.derivedptr = val.thisvptr = self.derivednptr.getParent()             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_t_2 = __pyx_v_self->derivednptr->getParent();
  __pyx_v_val->derivednptr = __pyx_t_2;
  __pyx_v_val->__pyx_base.derivedptr = __pyx_t_2;
  __pyx_v_val->__pyx_base.__pyx_base.thisvptr = __pyx_t_2;

  /* "saxonc.pyx":3554
 *         cdef PyXdmNode val = PyXdmNode()
 *         val.derivednptr = val.derivedptr = val.thisvptr = self.derivednptr.getParent()
 *         return val             # <<<<<<<<<<<<<<
 * 
 *      def get_attribute_value(self, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "saxonc.pyx":3543
 * 
 * 
 *      def get_parent(self):             # <<<<<<<<<<<<<<
 *         """
 *         get_parent(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmNode.get_parent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3556
 *         return val
 * 
 *      def get_attribute_value(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         getAttribute_value(self, name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_11get_attribute_value(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_6saxonc_9PyXdmNode_10get_attribute_value[] = "\n        getAttribute_value(self, name)\n        The name of the required attribute\n        \n        Args:\n            name(str): the eqname of the required attribute\n\n        ";
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_11get_attribute_value(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_attribute_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_10get_attribute_value(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_10get_attribute_value(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_py_value_string = NULL;
  char *__pyx_v_c_name;
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_attribute_value", 0);

  /* "saxonc.pyx":3565
 * 
 *         """
 *         py_value_string = name.encode('UTF-8') if name is not None else None             # <<<<<<<<<<<<<<
 *         cdef char * c_name = py_value_string if name is not None else ""
 * 
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_py_value_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3566
 *         """
 *         py_value_string = name.encode('UTF-8') if name is not None else None
 *         cdef char * c_name = py_value_string if name is not None else ""             # <<<<<<<<<<<<<<
 * 
 *         cdef const char* c_string = self.derivednptr.getAttributeValue(c_name)
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_py_value_string); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 3566, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = ((char *)"");
  }
  __pyx_v_c_name = __pyx_t_6;

  /* "saxonc.pyx":3568
 *         cdef char * c_name = py_value_string if name is not None else ""
 * 
 *         cdef const char* c_string = self.derivednptr.getAttributeValue(c_name)             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 * 
 */
  __pyx_v_c_string = __pyx_v_self->derivednptr->getAttributeValue(__pyx_v_c_name);

  /* "saxonc.pyx":3569
 * 
 *         cdef const char* c_string = self.derivednptr.getAttributeValue(c_name)
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None             # <<<<<<<<<<<<<<
 * 
 *         return ustring
 */
  if (((__pyx_v_c_string != NULL) != 0)) {
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3571
 *         ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 * 
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":3556
 *         return val
 * 
 *      def get_attribute_value(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         getAttribute_value(self, name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("saxonc.PyXdmNode.get_attribute_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_value_string);
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3574
 * 
 *      @property
 *      def attribute_count(self):             # <<<<<<<<<<<<<<
 *         """
 *         attribute_count(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_15attribute_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_15attribute_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_15attribute_count___get__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_15attribute_count___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3583
 * 
 *         """
 *         return self.derivednptr.getAttributeCount()             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->derivednptr->getAttributeCount()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3574
 * 
 *      @property
 *      def attribute_count(self):             # <<<<<<<<<<<<<<
 *         """
 *         attribute_count(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmNode.attribute_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3586
 * 
 *      @property
 *      def attributes(self):             # <<<<<<<<<<<<<<
 *         """
 *         attribute_nodes(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_10attributes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_10attributes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_10attributes___get__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_10attributes___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  PyObject *__pyx_v_nodes = 0;
  XdmNode **__pyx_v_n;
  int __pyx_v_count;
  int __pyx_v_i;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3594
 *             list[PyXdmNode]: List of PyXdmNode objects
 *         """
 *         cdef list nodes = []             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmNode **n
 *         cdef int count, i
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3597
 *         cdef saxoncClasses.XdmNode **n
 *         cdef int count, i
 *         cdef PyXdmNode val = None             # <<<<<<<<<<<<<<
 *         count = self.derivednptr.getAttributeCount()
 *         if count > 0:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":3598
 *         cdef int count, i
 *         cdef PyXdmNode val = None
 *         count = self.derivednptr.getAttributeCount()             # <<<<<<<<<<<<<<
 *         if count > 0:
 *             n = self.derivednptr.getAttributeNodes()
 */
  __pyx_v_count = __pyx_v_self->derivednptr->getAttributeCount();

  /* "saxonc.pyx":3599
 *         cdef PyXdmNode val = None
 *         count = self.derivednptr.getAttributeCount()
 *         if count > 0:             # <<<<<<<<<<<<<<
 *             n = self.derivednptr.getAttributeNodes()
 *             for i in range(count):
 */
  __pyx_t_2 = ((__pyx_v_count > 0) != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":3600
 *         count = self.derivednptr.getAttributeCount()
 *         if count > 0:
 *             n = self.derivednptr.getAttributeNodes()             # <<<<<<<<<<<<<<
 *             for i in range(count):
 *                 val = PyXdmNode()
 */
    __pyx_v_n = __pyx_v_self->derivednptr->getAttributeNodes();

    /* "saxonc.pyx":3601
 *         if count > 0:
 *             n = self.derivednptr.getAttributeNodes()
 *             for i in range(count):             # <<<<<<<<<<<<<<
 *                 val = PyXdmNode()
 *                 val.derivednptr = val.derivedptr = val.thisvptr = n[i]
 */
    __pyx_t_3 = __pyx_v_count;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "saxonc.pyx":3602
 *             n = self.derivednptr.getAttributeNodes()
 *             for i in range(count):
 *                 val = PyXdmNode()             # <<<<<<<<<<<<<<
 *                 val.derivednptr = val.derivedptr = val.thisvptr = n[i]
 *                 val.derivednptr.incrementRefCount()
 */
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "saxonc.pyx":3603
 *             for i in range(count):
 *                 val = PyXdmNode()
 *                 val.derivednptr = val.derivedptr = val.thisvptr = n[i]             # <<<<<<<<<<<<<<
 *                 val.derivednptr.incrementRefCount()
 *                 nodes.append(val)
 */
      __pyx_v_val->derivednptr = (__pyx_v_n[__pyx_v_i]);
      __pyx_v_val->__pyx_base.derivedptr = (__pyx_v_n[__pyx_v_i]);
      __pyx_v_val->__pyx_base.__pyx_base.thisvptr = (__pyx_v_n[__pyx_v_i]);

      /* "saxonc.pyx":3604
 *                 val = PyXdmNode()
 *                 val.derivednptr = val.derivedptr = val.thisvptr = n[i]
 *                 val.derivednptr.incrementRefCount()             # <<<<<<<<<<<<<<
 *                 nodes.append(val)
 * 
 */
      __pyx_v_val->derivednptr->incrementRefCount();

      /* "saxonc.pyx":3605
 *                 val.derivednptr = val.derivedptr = val.thisvptr = n[i]
 *                 val.derivednptr.incrementRefCount()
 *                 nodes.append(val)             # <<<<<<<<<<<<<<
 * 
 *         return nodes
 */
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_nodes, ((PyObject *)__pyx_v_val)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 3605, __pyx_L1_error)
    }

    /* "saxonc.pyx":3599
 *         cdef PyXdmNode val = None
 *         count = self.derivednptr.getAttributeCount()
 *         if count > 0:             # <<<<<<<<<<<<<<
 *             n = self.derivednptr.getAttributeNodes()
 *             for i in range(count):
 */
  }

  /* "saxonc.pyx":3607
 *                 nodes.append(val)
 * 
 *         return nodes             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_nodes);
  __pyx_r = __pyx_v_nodes;
  goto __pyx_L0;

  /* "saxonc.pyx":3586
 * 
 *      @property
 *      def attributes(self):             # <<<<<<<<<<<<<<
 *         """
 *         attribute_nodes(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmNode.attributes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3611
 * 
 *      @property
 *      def children(self):             # <<<<<<<<<<<<<<
 *         """
 *         children(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_8children_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_8children_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_8children___get__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_8children___get__(struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  PyObject *__pyx_v_nodes = 0;
  XdmNode **__pyx_v_n;
  int __pyx_v_count;
  int __pyx_v_i;
  struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3619
 *             list[PyXdmNode]: List of PyXdmNode objects
 *         """
 *         cdef list nodes = []             # <<<<<<<<<<<<<<
 *         cdef saxoncClasses.XdmNode **n
 *         cdef int count, i
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3622
 *         cdef saxoncClasses.XdmNode **n
 *         cdef int count, i
 *         cdef PyXdmNode val = None             # <<<<<<<<<<<<<<
 *         count = self.derivednptr.getChildCount()
 *         if count > 0:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_val = ((struct __pyx_obj_6saxonc_PyXdmNode *)Py_None);

  /* "saxonc.pyx":3623
 *         cdef int count, i
 *         cdef PyXdmNode val = None
 *         count = self.derivednptr.getChildCount()             # <<<<<<<<<<<<<<
 *         if count > 0:
 *             n = self.derivednptr.getChildren()
 */
  __pyx_v_count = __pyx_v_self->derivednptr->getChildCount();

  /* "saxonc.pyx":3624
 *         cdef PyXdmNode val = None
 *         count = self.derivednptr.getChildCount()
 *         if count > 0:             # <<<<<<<<<<<<<<
 *             n = self.derivednptr.getChildren()
 *             for i in range(count):
 */
  __pyx_t_2 = ((__pyx_v_count > 0) != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":3625
 *         count = self.derivednptr.getChildCount()
 *         if count > 0:
 *             n = self.derivednptr.getChildren()             # <<<<<<<<<<<<<<
 *             for i in range(count):
 *                 val = PyXdmNode()
 */
    __pyx_v_n = __pyx_v_self->derivednptr->getChildren();

    /* "saxonc.pyx":3626
 *         if count > 0:
 *             n = self.derivednptr.getChildren()
 *             for i in range(count):             # <<<<<<<<<<<<<<
 *                 val = PyXdmNode()
 *                 val.derivednptr = val.derivedptr = val.thisvptr = n[i]
 */
    __pyx_t_3 = __pyx_v_count;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "saxonc.pyx":3627
 *             n = self.derivednptr.getChildren()
 *             for i in range(count):
 *                 val = PyXdmNode()             # <<<<<<<<<<<<<<
 *                 val.derivednptr = val.derivedptr = val.thisvptr = n[i]
 *                 val.derivednptr.incrementRefCount()
 */
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6saxonc_PyXdmNode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_val, ((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "saxonc.pyx":3628
 *             for i in range(count):
 *                 val = PyXdmNode()
 *                 val.derivednptr = val.derivedptr = val.thisvptr = n[i]             # <<<<<<<<<<<<<<
 *                 val.derivednptr.incrementRefCount()
 *                 nodes.append(val)
 */
      __pyx_v_val->derivednptr = (__pyx_v_n[__pyx_v_i]);
      __pyx_v_val->__pyx_base.derivedptr = (__pyx_v_n[__pyx_v_i]);
      __pyx_v_val->__pyx_base.__pyx_base.thisvptr = (__pyx_v_n[__pyx_v_i]);

      /* "saxonc.pyx":3629
 *                 val = PyXdmNode()
 *                 val.derivednptr = val.derivedptr = val.thisvptr = n[i]
 *                 val.derivednptr.incrementRefCount()             # <<<<<<<<<<<<<<
 *                 nodes.append(val)
 * 
 */
      __pyx_v_val->derivednptr->incrementRefCount();

      /* "saxonc.pyx":3630
 *                 val.derivednptr = val.derivedptr = val.thisvptr = n[i]
 *                 val.derivednptr.incrementRefCount()
 *                 nodes.append(val)             # <<<<<<<<<<<<<<
 * 
 *         return nodes
 */
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_nodes, ((PyObject *)__pyx_v_val)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 3630, __pyx_L1_error)
    }

    /* "saxonc.pyx":3624
 *         cdef PyXdmNode val = None
 *         count = self.derivednptr.getChildCount()
 *         if count > 0:             # <<<<<<<<<<<<<<
 *             n = self.derivednptr.getChildren()
 *             for i in range(count):
 */
  }

  /* "saxonc.pyx":3632
 *                 nodes.append(val)
 * 
 *         return nodes             # <<<<<<<<<<<<<<
 * 
 *       # def getChildCount(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_nodes);
  __pyx_r = __pyx_v_nodes;
  goto __pyx_L0;

  /* "saxonc.pyx":3611
 * 
 *      @property
 *      def children(self):             # <<<<<<<<<<<<<<
 *         """
 *         children(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmNode.children.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_12__reduce_cython__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmNode.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6saxonc_9PyXdmNode_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_9PyXdmNode_14__setstate_cython__(((struct __pyx_obj_6saxonc_PyXdmNode *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_9PyXdmNode_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmNode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3645
 *      cdef saxoncClasses.XdmAtomicValue *derivedaptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is PyXdmAtomicValue:
 *             self.derivedaptr = self.derivedptr = self.thisvptr = new saxoncClasses.XdmAtomicValue()
 */

/* Python wrapper */
static int __pyx_pw_6saxonc_16PyXdmAtomicValue_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6saxonc_16PyXdmAtomicValue_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6saxonc_16PyXdmAtomicValue___cinit__(((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6saxonc_16PyXdmAtomicValue___cinit__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  XdmAtomicValue *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "saxonc.pyx":3646
 * 
 *      def __cinit__(self):
 *         if type(self) is PyXdmAtomicValue:             # <<<<<<<<<<<<<<
 *             self.derivedaptr = self.derivedptr = self.thisvptr = new saxoncClasses.XdmAtomicValue()
 *      def __dealloc__(self):
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_6saxonc_PyXdmAtomicValue));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "saxonc.pyx":3647
 *      def __cinit__(self):
 *         if type(self) is PyXdmAtomicValue:
 *             self.derivedaptr = self.derivedptr = self.thisvptr = new saxoncClasses.XdmAtomicValue()             # <<<<<<<<<<<<<<
 *      def __dealloc__(self):
 *         if self.derivedaptr != NULL and self.derivedaptr != NULL:
 */
    try {
      __pyx_t_3 = new XdmAtomicValue();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 3647, __pyx_L1_error)
    }
    __pyx_v_self->derivedaptr = __pyx_t_3;
    __pyx_v_self->__pyx_base.derivedptr = __pyx_t_3;
    __pyx_v_self->__pyx_base.__pyx_base.thisvptr = __pyx_t_3;

    /* "saxonc.pyx":3646
 * 
 *      def __cinit__(self):
 *         if type(self) is PyXdmAtomicValue:             # <<<<<<<<<<<<<<
 *             self.derivedaptr = self.derivedptr = self.thisvptr = new saxoncClasses.XdmAtomicValue()
 *      def __dealloc__(self):
 */
  }

  /* "saxonc.pyx":3645
 *      cdef saxoncClasses.XdmAtomicValue *derivedaptr      # hold a C++ instance which we're wrapping
 * 
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is PyXdmAtomicValue:
 *             self.derivedaptr = self.derivedptr = self.thisvptr = new saxoncClasses.XdmAtomicValue()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("saxonc.PyXdmAtomicValue.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3648
 *         if type(self) is PyXdmAtomicValue:
 *             self.derivedaptr = self.derivedptr = self.thisvptr = new saxoncClasses.XdmAtomicValue()
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.derivedaptr != NULL and self.derivedaptr != NULL:
 *             if self.derivedaptr.getRefCount() < 1:
 */

/* Python wrapper */
static void __pyx_pw_6saxonc_16PyXdmAtomicValue_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6saxonc_16PyXdmAtomicValue_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6saxonc_16PyXdmAtomicValue_2__dealloc__(((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6saxonc_16PyXdmAtomicValue_2__dealloc__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "saxonc.pyx":3649
 *             self.derivedaptr = self.derivedptr = self.thisvptr = new saxoncClasses.XdmAtomicValue()
 *      def __dealloc__(self):
 *         if self.derivedaptr != NULL and self.derivedaptr != NULL:             # <<<<<<<<<<<<<<
 *             if self.derivedaptr.getRefCount() < 1:
 *                 del self.derivedaptr
 */
  __pyx_t_2 = ((__pyx_v_self->derivedaptr != NULL) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->derivedaptr != NULL) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "saxonc.pyx":3650
 *      def __dealloc__(self):
 *         if self.derivedaptr != NULL and self.derivedaptr != NULL:
 *             if self.derivedaptr.getRefCount() < 1:             # <<<<<<<<<<<<<<
 *                 del self.derivedaptr
 *             else:
 */
    __pyx_t_1 = ((__pyx_v_self->derivedaptr->getRefCount() < 1) != 0);
    if (__pyx_t_1) {

      /* "saxonc.pyx":3651
 *         if self.derivedaptr != NULL and self.derivedaptr != NULL:
 *             if self.derivedaptr.getRefCount() < 1:
 *                 del self.derivedaptr             # <<<<<<<<<<<<<<
 *             else:
 *                 self.derivedaptr.decrementRefCount()
 */
      delete __pyx_v_self->derivedaptr;

      /* "saxonc.pyx":3650
 *      def __dealloc__(self):
 *         if self.derivedaptr != NULL and self.derivedaptr != NULL:
 *             if self.derivedaptr.getRefCount() < 1:             # <<<<<<<<<<<<<<
 *                 del self.derivedaptr
 *             else:
 */
      goto __pyx_L6;
    }

    /* "saxonc.pyx":3653
 *                 del self.derivedaptr
 *             else:
 *                 self.derivedaptr.decrementRefCount()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_v_self->derivedaptr->decrementRefCount();
    }
    __pyx_L6:;

    /* "saxonc.pyx":3649
 *             self.derivedaptr = self.derivedptr = self.thisvptr = new saxoncClasses.XdmAtomicValue()
 *      def __dealloc__(self):
 *         if self.derivedaptr != NULL and self.derivedaptr != NULL:             # <<<<<<<<<<<<<<
 *             if self.derivedaptr.getRefCount() < 1:
 *                 del self.derivedaptr
 */
  }

  /* "saxonc.pyx":3648
 *         if type(self) is PyXdmAtomicValue:
 *             self.derivedaptr = self.derivedptr = self.thisvptr = new saxoncClasses.XdmAtomicValue()
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.derivedaptr != NULL and self.derivedaptr != NULL:
 *             if self.derivedaptr.getRefCount() < 1:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "saxonc.pyx":3657
 * 
 *      @property
 *      def primitive_type_name(self):             # <<<<<<<<<<<<<<
 *         """
 *         get_primitive_type_name()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_19primitive_type_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_19primitive_type_name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXdmAtomicValue_19primitive_type_name___get__(((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_19primitive_type_name___get__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3665
 * 
 *         """
 *         cdef const char* c_string = self.derivedaptr.getPrimitiveTypeName()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8')
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->derivedaptr->getPrimitiveTypeName();

  /* "saxonc.pyx":3666
 *         """
 *         cdef const char* c_string = self.derivedaptr.getPrimitiveTypeName()
 *         ustring = c_string.decode('UTF-8')             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3667
 *         cdef const char* c_string = self.derivedaptr.getPrimitiveTypeName()
 *         ustring = c_string.decode('UTF-8')
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":3657
 * 
 *      @property
 *      def primitive_type_name(self):             # <<<<<<<<<<<<<<
 *         """
 *         get_primitive_type_name()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmAtomicValue.primitive_type_name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3671
 * 
 *      @property
 *      def boolean_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         Property which returns the boolean value of the PyXdmAtomicValue
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_13boolean_value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_13boolean_value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXdmAtomicValue_13boolean_value___get__(((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_13boolean_value___get__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3680
 * 
 *         """
 *         return self.derivedaptr.getBooleanValue()             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->derivedaptr->getBooleanValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3671
 * 
 *      @property
 *      def boolean_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         Property which returns the boolean value of the PyXdmAtomicValue
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmAtomicValue.boolean_value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3683
 * 
 *      @property
 *      def double_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         Property which is returns the double value of the PyXdmAtomicValue if it can be converted.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_12double_value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_12double_value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXdmAtomicValue_12double_value___get__(((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_12double_value___get__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3692
 *         """
 * 
 *         return self.derivedaptr.getDoubleValue()             # <<<<<<<<<<<<<<
 * 
 *      @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->derivedaptr->getDoubleValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3683
 * 
 *      @property
 *      def double_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         Property which is returns the double value of the PyXdmAtomicValue if it can be converted.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmAtomicValue.double_value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3695
 * 
 *      @property
 *      def head(self):             # <<<<<<<<<<<<<<
 *         """
 *         head(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_4head_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_4head_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXdmAtomicValue_4head___get__(((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_4head___get__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3704
 * 
 *         """
 *         return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "saxonc.pyx":3695
 * 
 *      @property
 *      def head(self):             # <<<<<<<<<<<<<<
 *         """
 *         head(self)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3708
 * 
 *      @property
 *      def integer_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         Property which is returns the int value of the PyXdmAtomicValue if it can be converted.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_13integer_value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_13integer_value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXdmAtomicValue_13integer_value___get__(((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_13integer_value___get__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3717
 *         """
 * 
 *         return self.derivedaptr.getLongValue()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->derivedaptr->getLongValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "saxonc.pyx":3708
 * 
 *      @property
 *      def integer_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         Property which is returns the int value of the PyXdmAtomicValue if it can be converted.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmAtomicValue.integer_value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3721
 * 
 *      @property
 *      def string_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         Property which returns the string value of the PyXdmAtomicValue
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_12string_value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_12string_value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXdmAtomicValue_12string_value___get__(((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_12string_value___get__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "saxonc.pyx":3727
 *             str: String value of the Xdm object
 *         """
 *         cdef const char* c_string = self.derivedaptr.getStringValue()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8')
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->derivedaptr->getStringValue();

  /* "saxonc.pyx":3728
 *         """
 *         cdef const char* c_string = self.derivedaptr.getStringValue()
 *         ustring = c_string.decode('UTF-8')             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3729
 *         cdef const char* c_string = self.derivedaptr.getStringValue()
 *         ustring = c_string.decode('UTF-8')
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":3721
 * 
 *      @property
 *      def string_value(self):             # <<<<<<<<<<<<<<
 *         """
 *         Property which returns the string value of the PyXdmAtomicValue
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmAtomicValue.string_value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3732
 * 
 * 
 *      def __str__(self):             # <<<<<<<<<<<<<<
 *         """
 *         __str__(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_5__str__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6saxonc_16PyXdmAtomicValue_4__str__[] = "\n        __str__(self)\n        The string value of the node as defined in the XPath data model\n        Returns:\n            str: String value of this node\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6saxonc_16PyXdmAtomicValue_4__str__;
#endif
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_5__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXdmAtomicValue_4__str__(((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_4__str__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "saxonc.pyx":3739
 *             str: String value of this node
 *         """
 *         cdef const char* c_string = self.derivedaptr.getStringValue()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8')
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->derivedaptr->getStringValue();

  /* "saxonc.pyx":3740
 *         """
 *         cdef const char* c_string = self.derivedaptr.getStringValue()
 *         ustring = c_string.decode('UTF-8')             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3741
 *         cdef const char* c_string = self.derivedaptr.getStringValue()
 *         ustring = c_string.decode('UTF-8')
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 *      def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":3732
 * 
 * 
 *      def __str__(self):             # <<<<<<<<<<<<<<
 *         """
 *         __str__(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmAtomicValue.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "saxonc.pyx":3743
 *         return ustring
 * 
 *      def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         ___repr__
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_7__repr__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6saxonc_16PyXdmAtomicValue_6__repr__[] = "\n        ___repr__ \n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6saxonc_16PyXdmAtomicValue_6__repr__;
#endif
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_7__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXdmAtomicValue_6__repr__(((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_6__repr__(struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self) {
  char const *__pyx_v_c_string;
  PyObject *__pyx_v_ustring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "saxonc.pyx":3747
 *         ___repr__
 *         """
 *         cdef const char* c_string = self.derivedaptr.getStringValue()             # <<<<<<<<<<<<<<
 *         ustring = c_string.decode('UTF-8')
 *         return ustring
 */
  __pyx_v_c_string = __pyx_v_self->derivedaptr->getStringValue();

  /* "saxonc.pyx":3748
 *         """
 *         cdef const char* c_string = self.derivedaptr.getStringValue()
 *         ustring = c_string.decode('UTF-8')             # <<<<<<<<<<<<<<
 *         return ustring
 * 
 */
  __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ustring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "saxonc.pyx":3749
 *         cdef const char* c_string = self.derivedaptr.getStringValue()
 *         ustring = c_string.decode('UTF-8')
 *         return ustring             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ustring);
  __pyx_r = __pyx_v_ustring;
  goto __pyx_L0;

  /* "saxonc.pyx":3743
 *         return ustring
 * 
 *      def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         ___repr__
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmAtomicValue.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ustring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXdmAtomicValue_8__reduce_cython__(((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmAtomicValue.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6saxonc_16PyXdmAtomicValue_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6saxonc_16PyXdmAtomicValue_10__setstate_cython__(((struct __pyx_obj_6saxonc_PyXdmAtomicValue *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6saxonc_16PyXdmAtomicValue_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6saxonc_PyXdmAtomicValue *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("saxonc.PyXdmAtomicValue.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6saxonc_PySaxonProcessor(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6saxonc_16PySaxonProcessor_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6saxonc_PySaxonProcessor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6saxonc_16PySaxonProcessor_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6saxonc_16PySaxonProcessor_version(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_16PySaxonProcessor_7version_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_16PySaxonProcessor_cwd(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_16PySaxonProcessor_3cwd_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_16PySaxonProcessor_resources_directory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_16PySaxonProcessor_19resources_directory_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_16PySaxonProcessor_is_schema_aware(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_16PySaxonProcessor_15is_schema_aware_1__get__(o);
}

static PyMethodDef __pyx_methods_6saxonc_PySaxonProcessor[] = {
  {"__enter__", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_5__enter__, METH_NOARGS, __pyx_doc_6saxonc_16PySaxonProcessor_4__enter__},
  {"__exit__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_16PySaxonProcessor_7__exit__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_16PySaxonProcessor_6__exit__},
  {"release", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_9release, METH_NOARGS, __pyx_doc_6saxonc_16PySaxonProcessor_8release},
  {"set_cwd", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_11set_cwd, METH_O, 0},
  {"set_resources_directory", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_13set_resources_directory, METH_O, __pyx_doc_6saxonc_16PySaxonProcessor_12set_resources_directory},
  {"set_configuration_property", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_16PySaxonProcessor_15set_configuration_property, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_16PySaxonProcessor_14set_configuration_property},
  {"clear_configuration_properties", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_17clear_configuration_properties, METH_NOARGS, __pyx_doc_6saxonc_16PySaxonProcessor_16clear_configuration_properties},
  {"new_xslt_processor", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_19new_xslt_processor, METH_NOARGS, __pyx_doc_6saxonc_16PySaxonProcessor_18new_xslt_processor},
  {"new_xslt30_processor", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_21new_xslt30_processor, METH_NOARGS, __pyx_doc_6saxonc_16PySaxonProcessor_20new_xslt30_processor},
  {"new_xquery_processor", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_23new_xquery_processor, METH_NOARGS, __pyx_doc_6saxonc_16PySaxonProcessor_22new_xquery_processor},
  {"new_xpath_processor", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_25new_xpath_processor, METH_NOARGS, __pyx_doc_6saxonc_16PySaxonProcessor_24new_xpath_processor},
  {"new_schema_validator", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_27new_schema_validator, METH_NOARGS, __pyx_doc_6saxonc_16PySaxonProcessor_26new_schema_validator},
  {"make_string_value", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_29make_string_value, METH_O, __pyx_doc_6saxonc_16PySaxonProcessor_28make_string_value},
  {"make_integer_value", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_31make_integer_value, METH_O, __pyx_doc_6saxonc_16PySaxonProcessor_30make_integer_value},
  {"make_double_value", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_33make_double_value, METH_O, __pyx_doc_6saxonc_16PySaxonProcessor_32make_double_value},
  {"make_float_value", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_35make_float_value, METH_O, __pyx_doc_6saxonc_16PySaxonProcessor_34make_float_value},
  {"make_long_value", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_37make_long_value, METH_O, __pyx_doc_6saxonc_16PySaxonProcessor_36make_long_value},
  {"make_boolean_value", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_39make_boolean_value, METH_O, __pyx_doc_6saxonc_16PySaxonProcessor_38make_boolean_value},
  {"make_qname_value", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_41make_qname_value, METH_O, __pyx_doc_6saxonc_16PySaxonProcessor_40make_qname_value},
  {"make_atomic_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_16PySaxonProcessor_43make_atomic_value, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_16PySaxonProcessor_42make_atomic_value},
  {"get_string_value", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_45get_string_value, METH_O, __pyx_doc_6saxonc_16PySaxonProcessor_44get_string_value},
  {"parse_xml", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_16PySaxonProcessor_47parse_xml, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_16PySaxonProcessor_46parse_xml},
  {"exception_occurred", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_49exception_occurred, METH_NOARGS, __pyx_doc_6saxonc_16PySaxonProcessor_48exception_occurred},
  {"exception_clear", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_51exception_clear, METH_NOARGS, __pyx_doc_6saxonc_16PySaxonProcessor_50exception_clear},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_53__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6saxonc_16PySaxonProcessor_55__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6saxonc_PySaxonProcessor[] = {
  {(char *)"version", __pyx_getprop_6saxonc_16PySaxonProcessor_version, 0, (char *)"\n        Get the Saxon Version.\n\n        Getter:\n            str: The Saxon version\n        ", 0},
  {(char *)"cwd", __pyx_getprop_6saxonc_16PySaxonProcessor_cwd, 0, (char *)"\n        cwd Property represents the current working directorty\n\n        :str: Get or set the current working directory", 0},
  {(char *)"resources_directory", __pyx_getprop_6saxonc_16PySaxonProcessor_resources_directory, 0, (char *)0, 0},
  {(char *)"is_schema_aware", __pyx_getprop_6saxonc_16PySaxonProcessor_is_schema_aware, 0, (char *)"\n        is_schema_aware(self)\n        Property to check if the processor is Schema aware. A licensed Saxon-EE/C product is schema aware \n\n        :bool: Indicate if the processor is schema aware, True or False otherwise\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6saxonc_PySaxonProcessor = {
  PyVarObject_HEAD_INIT(0, 0)
  "saxonc.PySaxonProcessor", /*tp_name*/
  sizeof(struct __pyx_obj_6saxonc_PySaxonProcessor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6saxonc_PySaxonProcessor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "An SaxonProcessor acts as a factory for generating XQuery, XPath, Schema and XSLT compilers.\n    This class is itself the context that needs to be managed (i.e. allocation & release)\n\n    Example:\n          with saxonc.PySaxonProcessor(license=False) as proc:\n             print(\"Test Saxon/C on Python\")\n             print(proc.version)\n             xdmAtomicval = proc.make_boolean_value(False)\n             xslt30proc = proc.new_xslt30_processor()\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6saxonc_PySaxonProcessor, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6saxonc_PySaxonProcessor, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6saxonc_PySaxonProcessor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6saxonc_PyXsltProcessor(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6saxonc_15PyXsltProcessor_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6saxonc_PyXsltProcessor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6saxonc_15PyXsltProcessor_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6saxonc_PyXsltProcessor[] = {
  {"set_cwd", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_5set_cwd, METH_O, __pyx_doc_6saxonc_15PyXsltProcessor_4set_cwd},
  {"set_source", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_15PyXsltProcessor_7set_source, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_15PyXsltProcessor_6set_source},
  {"set_output_file", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_9set_output_file, METH_O, __pyx_doc_6saxonc_15PyXsltProcessor_8set_output_file},
  {"set_jit_compilation", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_11set_jit_compilation, METH_O, __pyx_doc_6saxonc_15PyXsltProcessor_10set_jit_compilation},
  {"set_parameter", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_15PyXsltProcessor_13set_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_15PyXsltProcessor_12set_parameter},
  {"get_parameter", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_15get_parameter, METH_O, __pyx_doc_6saxonc_15PyXsltProcessor_14get_parameter},
  {"remove_parameter", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_17remove_parameter, METH_O, __pyx_doc_6saxonc_15PyXsltProcessor_16remove_parameter},
  {"set_property", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_15PyXsltProcessor_19set_property, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_15PyXsltProcessor_18set_property},
  {"clear_parameters", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_21clear_parameters, METH_NOARGS, __pyx_doc_6saxonc_15PyXsltProcessor_20clear_parameters},
  {"clear_properties", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_23clear_properties, METH_NOARGS, __pyx_doc_6saxonc_15PyXsltProcessor_22clear_properties},
  {"get_xsl_messages", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_25get_xsl_messages, METH_NOARGS, __pyx_doc_6saxonc_15PyXsltProcessor_24get_xsl_messages},
  {"transform_to_string", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_15PyXsltProcessor_27transform_to_string, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_15PyXsltProcessor_26transform_to_string},
  {"transform_to_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_15PyXsltProcessor_29transform_to_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_15PyXsltProcessor_28transform_to_file},
  {"transform_to_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_15PyXsltProcessor_31transform_to_value, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_15PyXsltProcessor_30transform_to_value},
  {"compile_stylesheet", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_15PyXsltProcessor_33compile_stylesheet, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_15PyXsltProcessor_32compile_stylesheet},
  {"release_stylesheet", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_35release_stylesheet, METH_NOARGS, __pyx_doc_6saxonc_15PyXsltProcessor_34release_stylesheet},
  {"exception_occurred", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_37exception_occurred, METH_NOARGS, __pyx_doc_6saxonc_15PyXsltProcessor_36exception_occurred},
  {"check_exception", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_39check_exception, METH_NOARGS, __pyx_doc_6saxonc_15PyXsltProcessor_38check_exception},
  {"exception_clear", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_41exception_clear, METH_NOARGS, __pyx_doc_6saxonc_15PyXsltProcessor_40exception_clear},
  {"exception_count", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_43exception_count, METH_NOARGS, __pyx_doc_6saxonc_15PyXsltProcessor_42exception_count},
  {"get_error_message", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_45get_error_message, METH_O, __pyx_doc_6saxonc_15PyXsltProcessor_44get_error_message},
  {"get_error_code", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_47get_error_code, METH_O, __pyx_doc_6saxonc_15PyXsltProcessor_46get_error_code},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_49__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6saxonc_15PyXsltProcessor_51__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6saxonc_PyXsltProcessor = {
  PyVarObject_HEAD_INIT(0, 0)
  "saxonc.PyXsltProcessor", /*tp_name*/
  sizeof(struct __pyx_obj_6saxonc_PyXsltProcessor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6saxonc_PyXsltProcessor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "An PyXsltProcessor represents factory to compile, load and execute a stylesheet.\n     It is possible to cache the context and the stylesheet in the PyXsltProcessor ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6saxonc_PyXsltProcessor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6saxonc_PyXsltProcessor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6saxonc_PyXslt30Processor(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6saxonc_17PyXslt30Processor_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6saxonc_PyXslt30Processor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6saxonc_17PyXslt30Processor_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6saxonc_PyXslt30Processor[] = {
  {"set_cwd", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_5set_cwd, METH_O, __pyx_doc_6saxonc_17PyXslt30Processor_4set_cwd},
  {"set_global_context_item", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_7set_global_context_item, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_6set_global_context_item},
  {"set_initial_match_selection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_9set_initial_match_selection, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_8set_initial_match_selection},
  {"set_output_file", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_11set_output_file, METH_O, __pyx_doc_6saxonc_17PyXslt30Processor_10set_output_file},
  {"set_jit_compilation", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_13set_jit_compilation, METH_O, __pyx_doc_6saxonc_17PyXslt30Processor_12set_jit_compilation},
  {"set_result_as_raw_value", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_15set_result_as_raw_value, METH_O, __pyx_doc_6saxonc_17PyXslt30Processor_14set_result_as_raw_value},
  {"set_parameter", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_17set_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_16set_parameter},
  {"get_parameter", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_19get_parameter, METH_O, __pyx_doc_6saxonc_17PyXslt30Processor_18get_parameter},
  {"remove_parameter", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_21remove_parameter, METH_O, __pyx_doc_6saxonc_17PyXslt30Processor_20remove_parameter},
  {"set_property", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_23set_property, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_22set_property},
  {"clear_parameters", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_25clear_parameters, METH_NOARGS, __pyx_doc_6saxonc_17PyXslt30Processor_24clear_parameters},
  {"clear_properties", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_27clear_properties, METH_NOARGS, __pyx_doc_6saxonc_17PyXslt30Processor_26clear_properties},
  {"set_initial_template_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_29set_initial_template_parameters, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_28set_initial_template_parameters},
  {"get_xsl_messages", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_31get_xsl_messages, METH_NOARGS, __pyx_doc_6saxonc_17PyXslt30Processor_30get_xsl_messages},
  {"transform_to_string", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_33transform_to_string, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_32transform_to_string},
  {"transform_to_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_35transform_to_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_34transform_to_file},
  {"transform_to_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_37transform_to_value, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_36transform_to_value},
  {"apply_templates_returning_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_39apply_templates_returning_value, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_38apply_templates_returning_value},
  {"apply_templates_returning_string", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_41apply_templates_returning_string, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_40apply_templates_returning_string},
  {"apply_templates_returning_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_43apply_templates_returning_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_42apply_templates_returning_file},
  {"call_template_returning_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_45call_template_returning_value, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_44call_template_returning_value},
  {"call_template_returning_string", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_47call_template_returning_string, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_46call_template_returning_string},
  {"call_template_returning_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_49call_template_returning_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_48call_template_returning_file},
  {"call_function_returning_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_51call_function_returning_value, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_50call_function_returning_value},
  {"call_function_returning_string", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_53call_function_returning_string, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_52call_function_returning_string},
  {"call_function_returning_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_55call_function_returning_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_54call_function_returning_file},
  {"add_package", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_57add_package, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_56add_package},
  {"clearPackages", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_59clearPackages, METH_NOARGS, __pyx_doc_6saxonc_17PyXslt30Processor_58clearPackages},
  {"compile_stylesheet", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXslt30Processor_61compile_stylesheet, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXslt30Processor_60compile_stylesheet},
  {"release_stylesheet", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_63release_stylesheet, METH_NOARGS, __pyx_doc_6saxonc_17PyXslt30Processor_62release_stylesheet},
  {"exception_occurred", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_65exception_occurred, METH_NOARGS, __pyx_doc_6saxonc_17PyXslt30Processor_64exception_occurred},
  {"check_exception", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_67check_exception, METH_NOARGS, __pyx_doc_6saxonc_17PyXslt30Processor_66check_exception},
  {"exception_clear", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_69exception_clear, METH_NOARGS, __pyx_doc_6saxonc_17PyXslt30Processor_68exception_clear},
  {"exception_count", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_71exception_count, METH_NOARGS, __pyx_doc_6saxonc_17PyXslt30Processor_70exception_count},
  {"get_error_message", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_73get_error_message, METH_O, __pyx_doc_6saxonc_17PyXslt30Processor_72get_error_message},
  {"get_error_code", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_75get_error_code, METH_O, __pyx_doc_6saxonc_17PyXslt30Processor_74get_error_code},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_77__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6saxonc_17PyXslt30Processor_79__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6saxonc_PyXslt30Processor = {
  PyVarObject_HEAD_INIT(0, 0)
  "saxonc.PyXslt30Processor", /*tp_name*/
  sizeof(struct __pyx_obj_6saxonc_PyXslt30Processor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6saxonc_PyXslt30Processor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "An PyXslt30Processor represents factory to compile, load and execute a stylesheet.\n     It is possible to cache the context and the stylesheet in the PyXslt30Processor ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6saxonc_PyXslt30Processor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6saxonc_PyXslt30Processor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6saxonc_PyXQueryProcessor(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6saxonc_17PyXQueryProcessor_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6saxonc_PyXQueryProcessor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6saxonc_17PyXQueryProcessor_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6saxonc_PyXQueryProcessor[] = {
  {"set_context", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXQueryProcessor_5set_context, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXQueryProcessor_4set_context},
  {"set_output_file", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_7set_output_file, METH_O, __pyx_doc_6saxonc_17PyXQueryProcessor_6set_output_file},
  {"set_parameter", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXQueryProcessor_9set_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXQueryProcessor_8set_parameter},
  {"remove_parameter", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_11remove_parameter, METH_O, __pyx_doc_6saxonc_17PyXQueryProcessor_10remove_parameter},
  {"set_property", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXQueryProcessor_13set_property, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXQueryProcessor_12set_property},
  {"clear_parameters", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_15clear_parameters, METH_NOARGS, __pyx_doc_6saxonc_17PyXQueryProcessor_14clear_parameters},
  {"clear_properties", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_17clear_properties, METH_NOARGS, __pyx_doc_6saxonc_17PyXQueryProcessor_16clear_properties},
  {"set_updating", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_19set_updating, METH_O, __pyx_doc_6saxonc_17PyXQueryProcessor_18set_updating},
  {"run_query_to_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXQueryProcessor_21run_query_to_value, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXQueryProcessor_20run_query_to_value},
  {"run_query_to_string", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXQueryProcessor_23run_query_to_string, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXQueryProcessor_22run_query_to_string},
  {"run_query_to_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXQueryProcessor_25run_query_to_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXQueryProcessor_24run_query_to_file},
  {"declare_namespace", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PyXQueryProcessor_27declare_namespace, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PyXQueryProcessor_26declare_namespace},
  {"set_query_file", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_29set_query_file, METH_O, __pyx_doc_6saxonc_17PyXQueryProcessor_28set_query_file},
  {"set_query_content", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_31set_query_content, METH_O, __pyx_doc_6saxonc_17PyXQueryProcessor_30set_query_content},
  {"set_query_base_uri", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_33set_query_base_uri, METH_O, __pyx_doc_6saxonc_17PyXQueryProcessor_32set_query_base_uri},
  {"set_cwd", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_35set_cwd, METH_O, __pyx_doc_6saxonc_17PyXQueryProcessor_34set_cwd},
  {"check_exception", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_37check_exception, METH_NOARGS, __pyx_doc_6saxonc_17PyXQueryProcessor_36check_exception},
  {"exception_occurred", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_39exception_occurred, METH_NOARGS, __pyx_doc_6saxonc_17PyXQueryProcessor_38exception_occurred},
  {"exception_clear", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_41exception_clear, METH_NOARGS, __pyx_doc_6saxonc_17PyXQueryProcessor_40exception_clear},
  {"exception_count", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_43exception_count, METH_NOARGS, __pyx_doc_6saxonc_17PyXQueryProcessor_42exception_count},
  {"get_error_message", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_45get_error_message, METH_O, __pyx_doc_6saxonc_17PyXQueryProcessor_44get_error_message},
  {"get_error_code", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_47get_error_code, METH_O, __pyx_doc_6saxonc_17PyXQueryProcessor_46get_error_code},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_49__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6saxonc_17PyXQueryProcessor_51__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6saxonc_PyXQueryProcessor = {
  PyVarObject_HEAD_INIT(0, 0)
  "saxonc.PyXQueryProcessor", /*tp_name*/
  sizeof(struct __pyx_obj_6saxonc_PyXQueryProcessor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6saxonc_PyXQueryProcessor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "An PyXQueryProcessor object represents factory to compile, load and execute queries. ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6saxonc_PyXQueryProcessor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6saxonc_PyXQueryProcessor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6saxonc_PyXPathProcessor(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6saxonc_16PyXPathProcessor_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6saxonc_PyXPathProcessor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6saxonc_16PyXPathProcessor_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6saxonc_PyXPathProcessor[] = {
  {"set_base_uri", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_5set_base_uri, METH_O, __pyx_doc_6saxonc_16PyXPathProcessor_4set_base_uri},
  {"evaluate", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_7evaluate, METH_O, __pyx_doc_6saxonc_16PyXPathProcessor_6evaluate},
  {"evaluate_single", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_9evaluate_single, METH_O, __pyx_doc_6saxonc_16PyXPathProcessor_8evaluate_single},
  {"set_context", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_16PyXPathProcessor_11set_context, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_16PyXPathProcessor_10set_context},
  {"set_cwd", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_13set_cwd, METH_O, __pyx_doc_6saxonc_16PyXPathProcessor_12set_cwd},
  {"effective_boolean_value", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_15effective_boolean_value, METH_O, __pyx_doc_6saxonc_16PyXPathProcessor_14effective_boolean_value},
  {"set_parameter", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_16PyXPathProcessor_17set_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_16PyXPathProcessor_16set_parameter},
  {"remove_parameter", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_19remove_parameter, METH_O, __pyx_doc_6saxonc_16PyXPathProcessor_18remove_parameter},
  {"set_property", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_16PyXPathProcessor_21set_property, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_16PyXPathProcessor_20set_property},
  {"declare_namespace", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_16PyXPathProcessor_23declare_namespace, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_16PyXPathProcessor_22declare_namespace},
  {"set_backwards_compatible", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_25set_backwards_compatible, METH_O, 0},
  {"set_caching", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_27set_caching, METH_O, 0},
  {"import_schema_namespace", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_29import_schema_namespace, METH_O, 0},
  {"clear_parameters", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_31clear_parameters, METH_NOARGS, __pyx_doc_6saxonc_16PyXPathProcessor_30clear_parameters},
  {"clear_properties", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_33clear_properties, METH_NOARGS, __pyx_doc_6saxonc_16PyXPathProcessor_32clear_properties},
  {"check_exception", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_35check_exception, METH_NOARGS, __pyx_doc_6saxonc_16PyXPathProcessor_34check_exception},
  {"exception_occurred", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_37exception_occurred, METH_NOARGS, __pyx_doc_6saxonc_16PyXPathProcessor_36exception_occurred},
  {"exception_clear", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_39exception_clear, METH_NOARGS, __pyx_doc_6saxonc_16PyXPathProcessor_38exception_clear},
  {"exception_count", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_41exception_count, METH_NOARGS, __pyx_doc_6saxonc_16PyXPathProcessor_40exception_count},
  {"get_error_message", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_43get_error_message, METH_O, __pyx_doc_6saxonc_16PyXPathProcessor_42get_error_message},
  {"get_error_code", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_45get_error_code, METH_O, __pyx_doc_6saxonc_16PyXPathProcessor_44get_error_code},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_47__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6saxonc_16PyXPathProcessor_49__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6saxonc_PyXPathProcessor = {
  PyVarObject_HEAD_INIT(0, 0)
  "saxonc.PyXPathProcessor", /*tp_name*/
  sizeof(struct __pyx_obj_6saxonc_PyXPathProcessor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6saxonc_PyXPathProcessor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "An XPathProcessor represents factory to compile, load and execute the XPath query. ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6saxonc_PyXPathProcessor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6saxonc_PyXPathProcessor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6saxonc_PySchemaValidator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6saxonc_17PySchemaValidator_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6saxonc_PySchemaValidator(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6saxonc_17PySchemaValidator_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6saxonc_17PySchemaValidator_validation_report(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_17PySchemaValidator_17validation_report_1__get__(o);
}

static PyMethodDef __pyx_methods_6saxonc_PySchemaValidator[] = {
  {"set_cwd", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_5set_cwd, METH_O, __pyx_doc_6saxonc_17PySchemaValidator_4set_cwd},
  {"register_schema", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PySchemaValidator_7register_schema, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PySchemaValidator_6register_schema},
  {"set_output_file", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_9set_output_file, METH_O, __pyx_doc_6saxonc_17PySchemaValidator_8set_output_file},
  {"validate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PySchemaValidator_11validate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PySchemaValidator_10validate},
  {"validate_to_node", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PySchemaValidator_13validate_to_node, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PySchemaValidator_12validate_to_node},
  {"set_source_node", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_15set_source_node, METH_O, __pyx_doc_6saxonc_17PySchemaValidator_14set_source_node},
  {"set_parameter", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PySchemaValidator_17set_parameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PySchemaValidator_16set_parameter},
  {"remove_parameter", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_19remove_parameter, METH_O, __pyx_doc_6saxonc_17PySchemaValidator_18remove_parameter},
  {"set_property", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6saxonc_17PySchemaValidator_21set_property, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6saxonc_17PySchemaValidator_20set_property},
  {"clear_parameters", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_23clear_parameters, METH_NOARGS, __pyx_doc_6saxonc_17PySchemaValidator_22clear_parameters},
  {"clear_properties", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_25clear_properties, METH_NOARGS, __pyx_doc_6saxonc_17PySchemaValidator_24clear_properties},
  {"exception_occurred", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_27exception_occurred, METH_NOARGS, __pyx_doc_6saxonc_17PySchemaValidator_26exception_occurred},
  {"exception_clear", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_29exception_clear, METH_NOARGS, __pyx_doc_6saxonc_17PySchemaValidator_28exception_clear},
  {"exception_count", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_31exception_count, METH_NOARGS, __pyx_doc_6saxonc_17PySchemaValidator_30exception_count},
  {"get_error_message", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_33get_error_message, METH_O, __pyx_doc_6saxonc_17PySchemaValidator_32get_error_message},
  {"get_error_code", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_35get_error_code, METH_O, __pyx_doc_6saxonc_17PySchemaValidator_34get_error_code},
  {"set_lax", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_37set_lax, METH_O, __pyx_doc_6saxonc_17PySchemaValidator_36set_lax},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_39__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6saxonc_17PySchemaValidator_41__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6saxonc_PySchemaValidator[] = {
  {(char *)"validation_report", __pyx_getprop_6saxonc_17PySchemaValidator_validation_report, 0, (char *)"\n        validation_report\n        The validation report Property\n\n        :PyXdmNode: The Validation report result from the Schema validator\n\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6saxonc_PySchemaValidator = {
  PyVarObject_HEAD_INIT(0, 0)
  "saxonc.PySchemaValidator", /*tp_name*/
  sizeof(struct __pyx_obj_6saxonc_PySchemaValidator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6saxonc_PySchemaValidator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "An PySchemaValidator represents factory for validating instance documents against a schema.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6saxonc_PySchemaValidator, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6saxonc_PySchemaValidator, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6saxonc_PySchemaValidator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6saxonc_PyXdmValue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6saxonc_10PyXdmValue_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6saxonc_PyXdmValue(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6saxonc_10PyXdmValue_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6saxonc_10PyXdmValue_head(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_10PyXdmValue_4head_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_10PyXdmValue_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_10PyXdmValue_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_6saxonc_PyXdmValue[] = {
  {"add_xdm_item", (PyCFunction)__pyx_pw_6saxonc_10PyXdmValue_5add_xdm_item, METH_O, __pyx_doc_6saxonc_10PyXdmValue_4add_xdm_item},
  {"item_at", (PyCFunction)__pyx_pw_6saxonc_10PyXdmValue_7item_at, METH_O, __pyx_doc_6saxonc_10PyXdmValue_6item_at},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6saxonc_10PyXdmValue_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6saxonc_10PyXdmValue_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6saxonc_PyXdmValue[] = {
  {(char *)"head", __pyx_getprop_6saxonc_10PyXdmValue_head, 0, (char *)"\n        head(self)\n        Property to get the first item in the sequence\n\n        Returns:\n            PyXdmItem: The PyXdmItem or None if the sequence is empty\n\n        ", 0},
  {(char *)"size", __pyx_getprop_6saxonc_10PyXdmValue_size, 0, (char *)"\n        size(self)\n        Property - Get the number of items in the sequence\n        \n        Returns:\n            int: The count of items in the sequence\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6saxonc_PyXdmValue = {
  PyVarObject_HEAD_INIT(0, 0)
  "saxonc.PyXdmValue", /*tp_name*/
  sizeof(struct __pyx_obj_6saxonc_PyXdmValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6saxonc_PyXdmValue, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6saxonc_10PyXdmValue_9__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_6saxonc_10PyXdmValue_11__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Value in the XDM data model. A value is a sequence of zero or more items, each item being either an atomic value or a node. ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6saxonc_PyXdmValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6saxonc_PyXdmValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6saxonc_PyXdmValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6saxonc_PyXdmItem(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6saxonc_PyXdmValue(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6saxonc_9PyXdmItem_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6saxonc_PyXdmItem(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6saxonc_9PyXdmItem_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_6saxonc_PyXdmValue(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmItem_string_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmItem_12string_value_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmItem_is_atomic(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmItem_9is_atomic_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmItem_head(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmItem_4head_1__get__(o);
}

static PyMethodDef __pyx_methods_6saxonc_PyXdmItem[] = {
  {"get_node_value", (PyCFunction)__pyx_pw_6saxonc_9PyXdmItem_9get_node_value, METH_NOARGS, __pyx_doc_6saxonc_9PyXdmItem_8get_node_value},
  {"get_atomic_value", (PyCFunction)__pyx_pw_6saxonc_9PyXdmItem_11get_atomic_value, METH_NOARGS, __pyx_doc_6saxonc_9PyXdmItem_10get_atomic_value},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6saxonc_9PyXdmItem_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6saxonc_9PyXdmItem_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6saxonc_PyXdmItem[] = {
  {(char *)"string_value", __pyx_getprop_6saxonc_9PyXdmItem_string_value, 0, (char *)"\n        string_value(self)\n        Property to get the the strign value of the XdmItem \n        ", 0},
  {(char *)"is_atomic", __pyx_getprop_6saxonc_9PyXdmItem_is_atomic, 0, (char *)"\n        is_atomic(self)\n        Property to check if the current PyXdmItem is an atomic value\n    \n        Returns:\n            bool: Check of is atomic value \n        ", 0},
  {(char *)"head", __pyx_getprop_6saxonc_9PyXdmItem_head, 0, (char *)"\n        head(self)\n        Property to get the first item in the sequence. This would be the PyXdmItem itself as there is only one item in the sequence\n\n        Returns:\n            PyXdmItem: The PyXdmItem or None if the sequence is empty\n\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6saxonc_PyXdmItem = {
  PyVarObject_HEAD_INIT(0, 0)
  "saxonc.PyXdmItem", /*tp_name*/
  sizeof(struct __pyx_obj_6saxonc_PyXdmItem), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6saxonc_PyXdmItem, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6saxonc_9PyXdmItem_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_6saxonc_9PyXdmItem_7__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6saxonc_PyXdmItem, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6saxonc_PyXdmItem, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6saxonc_PyXdmItem, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6saxonc_PyXdmNode(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6saxonc_PyXdmItem(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6saxonc_9PyXdmNode_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6saxonc_PyXdmNode(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6saxonc_9PyXdmNode_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_6saxonc_PyXdmItem(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmNode_head(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmNode_4head_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmNode_node_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmNode_9node_kind_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmNode_node_kind_str(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmNode_13node_kind_str_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmNode_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmNode_4name_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmNode_typed_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmNode_11typed_value_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmNode_base_uri(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmNode_8base_uri_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmNode_string_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmNode_12string_value_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmNode_attribute_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmNode_15attribute_count_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmNode_attributes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmNode_10attributes_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_9PyXdmNode_children(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_9PyXdmNode_8children_1__get__(o);
}

static PyMethodDef __pyx_methods_6saxonc_PyXdmNode[] = {
  {"get_parent", (PyCFunction)__pyx_pw_6saxonc_9PyXdmNode_9get_parent, METH_NOARGS, __pyx_doc_6saxonc_9PyXdmNode_8get_parent},
  {"get_attribute_value", (PyCFunction)__pyx_pw_6saxonc_9PyXdmNode_11get_attribute_value, METH_O, __pyx_doc_6saxonc_9PyXdmNode_10get_attribute_value},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6saxonc_9PyXdmNode_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6saxonc_9PyXdmNode_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6saxonc_PyXdmNode[] = {
  {(char *)"head", __pyx_getprop_6saxonc_9PyXdmNode_head, 0, (char *)"\n        head(self)\n        Property to get the first item in the sequence. This would be the PyXdmNode itself as there is only one item in the sequence\n\n        Returns:\n            PyXdmItem: The PyXdmItem or None if the sequence is empty\n\n        ", 0},
  {(char *)"node_kind", __pyx_getprop_6saxonc_9PyXdmNode_node_kind, 0, (char *)"\n        node_kind(self)\n        Node Kind property. This will be a value such as {@link net.sf.saxon.type.Type#ELEMENT} or {@link net.sf.saxon.type.Type#ATTRIBUTE}.\n        There are seven kinds of node: documents, elements, attributes, text, comments, processing-instructions, and namespaces.\n\n        Returns:\n            int: an integer identifying the kind of node. These integer values are the same as those used in the DOM \n        ", 0},
  {(char *)"node_kind_str", __pyx_getprop_6saxonc_9PyXdmNode_node_kind_str, 0, (char *)"\n        node_kind(self)\n        Node Kind property string. This will be a value such as {@link net.sf.saxon.type.Type#ELEMENT} or {@link net.sf.saxon.type.Type#ATTRIBUTE}.\n        There are seven kinds of node: documents, elements, attributes, text, comments, processing-instructions, and namespaces.\n\n        Returns:\n            int: an integer identifying the kind of node. These integer values are the same as those used in the DOM \n        ", 0},
  {(char *)"name", __pyx_getprop_6saxonc_9PyXdmNode_name, 0, (char *)"\n        name(self)\n        Get the name of the node, as a string in the form of a EQName\n        Returns:\n            str: the name of the node. In the case of unnamed nodes (for example, text and comment nodes) return None       \n        ", 0},
  {(char *)"typed_value", __pyx_getprop_6saxonc_9PyXdmNode_typed_value, 0, (char *)" \n        typed_value(self)\n        Property - get the typed value of this node, as defined in XDM\n        Returns:\n            PyXdmValue:the typed value. If the typed value is a single atomic value, this will be returne as an instance of {@link XdmAtomicValue}                \n        ", 0},
  {(char *)"base_uri", __pyx_getprop_6saxonc_9PyXdmNode_base_uri, 0, (char *)" \n        base_uri(self)\n        Base uri Property. Get the Base URI for the node, that is, the URI used for resolving a relative URI contained in the node.\n        This will be the same as the System ID unless xml:base has been used. Where the node does not have a base URI of its own,\n        the base URI of its parent node is returned.\n        Returns:\n            str: String value of the base uri for this node. This may be null if the base URI is unknown, including the case\n                 where the node has no parent.\n        ", 0},
  {(char *)"string_value", __pyx_getprop_6saxonc_9PyXdmNode_string_value, 0, (char *)"\n        get_String_value(self)\n        Property to get the string value of the node as defined in the XPath data model.\n\n        Returns:\n            str: The string value of this node\n\n        ", 0},
  {(char *)"attribute_count", __pyx_getprop_6saxonc_9PyXdmNode_attribute_count, 0, (char *)"\n        attribute_count(self)\n        Property to get the count of attribute nodes on this XdmNode object. If this current node is not an element node then return 0\n\n        Returns:\n            int: Count of attribute nodes\n\n        ", 0},
  {(char *)"attributes", __pyx_getprop_6saxonc_9PyXdmNode_attributes, 0, (char *)"\n        attribute_nodes(self)\n        Property to get the attribute nodes as a list of PyXdmNode objects\n\n        Returns:\n            list[PyXdmNode]: List of PyXdmNode objects\n        ", 0},
  {(char *)"children", __pyx_getprop_6saxonc_9PyXdmNode_children, 0, (char *)"\n        children(self)\n        Property to get children of this current node. List of child nodes\n\n        Returns:\n            list[PyXdmNode]: List of PyXdmNode objects\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6saxonc_PyXdmNode = {
  PyVarObject_HEAD_INIT(0, 0)
  "saxonc.PyXdmNode", /*tp_name*/
  sizeof(struct __pyx_obj_6saxonc_PyXdmNode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6saxonc_PyXdmNode, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6saxonc_9PyXdmNode_7__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_6saxonc_9PyXdmNode_5__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6saxonc_PyXdmNode, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6saxonc_PyXdmNode, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6saxonc_PyXdmNode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6saxonc_PyXdmAtomicValue(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6saxonc_PyXdmItem(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6saxonc_16PyXdmAtomicValue_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6saxonc_PyXdmAtomicValue(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6saxonc_16PyXdmAtomicValue_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_6saxonc_PyXdmItem(o);
}

static PyObject *__pyx_getprop_6saxonc_16PyXdmAtomicValue_primitive_type_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_16PyXdmAtomicValue_19primitive_type_name_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_16PyXdmAtomicValue_boolean_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_16PyXdmAtomicValue_13boolean_value_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_16PyXdmAtomicValue_double_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_16PyXdmAtomicValue_12double_value_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_16PyXdmAtomicValue_head(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_16PyXdmAtomicValue_4head_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_16PyXdmAtomicValue_integer_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_16PyXdmAtomicValue_13integer_value_1__get__(o);
}

static PyObject *__pyx_getprop_6saxonc_16PyXdmAtomicValue_string_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6saxonc_16PyXdmAtomicValue_12string_value_1__get__(o);
}

static PyMethodDef __pyx_methods_6saxonc_PyXdmAtomicValue[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6saxonc_16PyXdmAtomicValue_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6saxonc_16PyXdmAtomicValue_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6saxonc_PyXdmAtomicValue[] = {
  {(char *)"primitive_type_name", __pyx_getprop_6saxonc_16PyXdmAtomicValue_primitive_type_name, 0, (char *)"\n        get_primitive_type_name()\n        Property - Get the primitive type name of the PyXdmAtomicValue\n        Returns:\n            str: String of the primitive type name\n\n        ", 0},
  {(char *)"boolean_value", __pyx_getprop_6saxonc_16PyXdmAtomicValue_boolean_value, 0, (char *)"\n        Property which returns the boolean value of the PyXdmAtomicValue\n\n        Returns:\n            bool: boolean value.\n\n\n        ", 0},
  {(char *)"double_value", __pyx_getprop_6saxonc_16PyXdmAtomicValue_double_value, 0, (char *)"\n        Property which is returns the double value of the PyXdmAtomicValue if it can be converted.\n\n        Returns:\n            double: Double value of the Xdm object\n\n        ", 0},
  {(char *)"head", __pyx_getprop_6saxonc_16PyXdmAtomicValue_head, 0, (char *)"\n        head(self)\n        Property to get the first item in the sequence. This would be the PyXdmAtomicValue itself as there is only one item in the sequence\n\n        Returns:\n            PyXdmAtomicValue: The PyXdmAtomic or None if the sequence is empty\n\n        ", 0},
  {(char *)"integer_value", __pyx_getprop_6saxonc_16PyXdmAtomicValue_integer_value, 0, (char *)"\n        Property which is returns the int value of the PyXdmAtomicValue if it can be converted.\n\n        Returns:\n            int: Int value of the Xdm object\n\n        ", 0},
  {(char *)"string_value", __pyx_getprop_6saxonc_16PyXdmAtomicValue_string_value, 0, (char *)"\n        Property which returns the string value of the PyXdmAtomicValue\n        Returns:\n            str: String value of the Xdm object\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6saxonc_PyXdmAtomicValue = {
  PyVarObject_HEAD_INIT(0, 0)
  "saxonc.PyXdmAtomicValue", /*tp_name*/
  sizeof(struct __pyx_obj_6saxonc_PyXdmAtomicValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6saxonc_PyXdmAtomicValue, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6saxonc_16PyXdmAtomicValue_7__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_6saxonc_16PyXdmAtomicValue_5__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n     The class PyXdmAtomicValue represents an item in an Xath sequence that is an atomic value. The value may belong to any of the\n     19 primitive types defined in XML Schema, or to a type derived from these primitive types, or the XPath type xs:untypedAtomic.\n     ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6saxonc_PyXdmAtomicValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6saxonc_PyXdmAtomicValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6saxonc_PyXdmAtomicValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  static const char* internal_type_names[] = {
    "PySaxonProcessor",
    "PySchemaValidator",
    "PyXPathProcessor",
    "PyXQueryProcessor",
    "PyXdmAtomicValue",
    "PyXdmItem",
    "PyXdmNode",
    "PyXdmValue",
    "PyXslt30Processor",
    "PyXsltProcessor",
    "__pyx_ctuple_Py_ssize_t",
    "__pyx_ctuple_Py_ssize_t_struct",
    "__pyx_ctuple_int",
    "__pyx_ctuple_int_struct",
    "bool",
    "map",
    "string",
    0
  };
  const char** type_name = internal_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}

static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = PyObject_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;
    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1;
        PyErr_Clear();
        dict = PyObject_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }
    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            likely(PyString_Check(name)) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            likely(PyUnicode_Check(name)) &&
            likely(__Pyx_PyUnicode_GET_LENGTH(name)) &&
            __Pyx_PyUnicode_READ_CHAR(name, 0) == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}
static int __pyx_import_star(PyObject* m) {
    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;
    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;
    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;
bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}



#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_saxonc(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_saxonc},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "saxonc",
    __pyx_k_package_saxonc_This_documentati, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ATTRIBUTE, __pyx_k_ATTRIBUTE, sizeof(__pyx_k_ATTRIBUTE), 0, 0, 1, 1},
  {&__pyx_kp_s_Argument_value_at_position, __pyx_k_Argument_value_at_position, sizeof(__pyx_k_Argument_value_at_position), 0, 0, 1, 0},
  {&__pyx_n_s_COMMENT, __pyx_k_COMMENT, sizeof(__pyx_k_COMMENT), 0, 0, 1, 1},
  {&__pyx_kp_s_CompileStylesheet_should_only_be, __pyx_k_CompileStylesheet_should_only_be, sizeof(__pyx_k_CompileStylesheet_should_only_be), 0, 0, 1, 0},
  {&__pyx_kp_s_CompileStylesheet_should_only_be_2, __pyx_k_CompileStylesheet_should_only_be_2, sizeof(__pyx_k_CompileStylesheet_should_only_be_2), 0, 0, 1, 0},
  {&__pyx_n_s_DOCUMENT, __pyx_k_DOCUMENT, sizeof(__pyx_k_DOCUMENT), 0, 0, 1, 1},
  {&__pyx_n_s_ELEMENT, __pyx_k_ELEMENT, sizeof(__pyx_k_ELEMENT), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_string_returned, __pyx_k_Empty_string_returned, sizeof(__pyx_k_Empty_string_returned), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_Saxon_Processor_is_not_lic, __pyx_k_Error_Saxon_Processor_is_not_lic, sizeof(__pyx_k_Error_Saxon_Processor_is_not_lic), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_output_file_name_required, __pyx_k_Error_output_file_name_required, sizeof(__pyx_k_Error_output_file_name_required), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_parseXml_should_only_conta, __pyx_k_Error_parseXml_should_only_conta, sizeof(__pyx_k_Error_parseXml_should_only_conta), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_register_schema_should_onl, __pyx_k_Error_register_schema_should_onl, sizeof(__pyx_k_Error_register_schema_should_onl), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_setSource_should_only_cont, __pyx_k_Error_setSource_should_only_cont, sizeof(__pyx_k_Error_setSource_should_only_cont), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_set_context_should_only_co, __pyx_k_Error_set_context_should_only_co, sizeof(__pyx_k_Error_set_context_should_only_co), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_set_global_context_item_sh, __pyx_k_Error_set_global_context_item_sh, sizeof(__pyx_k_Error_set_global_context_item_sh), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_set_initial_match_selectio, __pyx_k_Error_set_initial_match_selectio, sizeof(__pyx_k_Error_set_initial_match_selectio), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_validate_should_only_conta, __pyx_k_Error_validate_should_only_conta, sizeof(__pyx_k_Error_validate_should_only_conta), 0, 0, 1, 0},
  {&__pyx_kp_s_Initial_template_parameters_can, __pyx_k_Initial_template_parameters_can, sizeof(__pyx_k_Initial_template_parameters_can), 0, 0, 1, 0},
  {&__pyx_n_s_NAMESPACE, __pyx_k_NAMESPACE, sizeof(__pyx_k_NAMESPACE), 0, 0, 1, 1},
  {&__pyx_kp_s_Output_file_option_not_in_keywor, __pyx_k_Output_file_option_not_in_keywor, sizeof(__pyx_k_Output_file_option_not_in_keywor), 0, 0, 1, 0},
  {&__pyx_n_s_PROCESSING_INSTRUCTION, __pyx_k_PROCESSING_INSTRUCTION, sizeof(__pyx_k_PROCESSING_INSTRUCTION), 0, 0, 1, 1},
  {&__pyx_n_s_PySaxonProcessor, __pyx_k_PySaxonProcessor, sizeof(__pyx_k_PySaxonProcessor), 0, 0, 1, 1},
  {&__pyx_n_s_PySchemaValidator, __pyx_k_PySchemaValidator, sizeof(__pyx_k_PySchemaValidator), 0, 0, 1, 1},
  {&__pyx_n_s_PyXPathProcessor, __pyx_k_PyXPathProcessor, sizeof(__pyx_k_PyXPathProcessor), 0, 0, 1, 1},
  {&__pyx_n_s_PyXQueryProcessor, __pyx_k_PyXQueryProcessor, sizeof(__pyx_k_PyXQueryProcessor), 0, 0, 1, 1},
  {&__pyx_n_s_PyXdmAtomicValue, __pyx_k_PyXdmAtomicValue, sizeof(__pyx_k_PyXdmAtomicValue), 0, 0, 1, 1},
  {&__pyx_n_s_PyXdmItem, __pyx_k_PyXdmItem, sizeof(__pyx_k_PyXdmItem), 0, 0, 1, 1},
  {&__pyx_n_s_PyXdmNode, __pyx_k_PyXdmNode, sizeof(__pyx_k_PyXdmNode), 0, 0, 1, 1},
  {&__pyx_n_s_PyXdmValue, __pyx_k_PyXdmValue, sizeof(__pyx_k_PyXdmValue), 0, 0, 1, 1},
  {&__pyx_n_s_PyXslt30Processor, __pyx_k_PyXslt30Processor, sizeof(__pyx_k_PyXslt30Processor), 0, 0, 1, 1},
  {&__pyx_n_s_PyXsltProcessor, __pyx_k_PyXsltProcessor, sizeof(__pyx_k_PyXsltProcessor), 0, 0, 1, 1},
  {&__pyx_kp_s_Source_file_with_name, __pyx_k_Source_file_with_name, sizeof(__pyx_k_Source_file_with_name), 0, 0, 1, 0},
  {&__pyx_kp_s_Stylesheet_file_does_not_exist, __pyx_k_Stylesheet_file_does_not_exist, sizeof(__pyx_k_Stylesheet_file_does_not_exist), 0, 0, 1, 0},
  {&__pyx_n_s_TEXT, __pyx_k_TEXT, sizeof(__pyx_k_TEXT), 0, 0, 1, 1},
  {&__pyx_kp_s_The_PyXdmItem_is_an_PyXdmAtomicV, __pyx_k_The_PyXdmItem_is_an_PyXdmAtomicV, sizeof(__pyx_k_The_PyXdmItem_is_an_PyXdmAtomicV), 0, 0, 1, 0},
  {&__pyx_kp_s_The_PyXdmItem_is_not_an_PyXdmAto, __pyx_k_The_PyXdmItem_is_not_an_PyXdmAto, sizeof(__pyx_k_The_PyXdmItem_is_not_an_PyXdmAto), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_UNKNOWN, __pyx_k_UNKNOWN, sizeof(__pyx_k_UNKNOWN), 0, 0, 1, 1},
  {&__pyx_kp_s_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 0, 1, 0},
  {&__pyx_kp_s_Unable_to_set_output_file_output, __pyx_k_Unable_to_set_output_file_output, sizeof(__pyx_k_Unable_to_set_output_file_output), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_node_kind_d, __pyx_k_Unknown_node_kind_d, sizeof(__pyx_k_Unknown_node_kind_d), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Warning, __pyx_k_Warning, sizeof(__pyx_k_Warning), 0, 0, 1, 1},
  {&__pyx_kp_s_Warning_transform_to_string_shou, __pyx_k_Warning_transform_to_string_shou, sizeof(__pyx_k_Warning_transform_to_string_shou), 0, 0, 1, 0},
  {&__pyx_kp_s_Warning_transform_to_string_shou_2, __pyx_k_Warning_transform_to_string_shou_2, sizeof(__pyx_k_Warning_transform_to_string_shou_2), 0, 0, 1, 0},
  {&__pyx_kp_s_XML_file_does_not_exist, __pyx_k_XML_file_does_not_exist, sizeof(__pyx_k_XML_file_does_not_exist), 0, 0, 1, 0},
  {&__pyx_kp_s__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 1, 0},
  {&__pyx_n_s__36, __pyx_k__36, sizeof(__pyx_k__36), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_associated_file, __pyx_k_associated_file, sizeof(__pyx_k_associated_file), 0, 0, 1, 1},
  {&__pyx_n_s_attribute, __pyx_k_attribute, sizeof(__pyx_k_attribute), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_comment, __pyx_k_comment, sizeof(__pyx_k_comment), 0, 0, 1, 1},
  {&__pyx_n_s_config_file, __pyx_k_config_file, sizeof(__pyx_k_config_file), 0, 0, 1, 1},
  {&__pyx_n_s_document, __pyx_k_document, sizeof(__pyx_k_document), 0, 0, 1, 1},
  {&__pyx_kp_s_does_not_exist, __pyx_k_does_not_exist, sizeof(__pyx_k_does_not_exist), 0, 0, 1, 0},
  {&__pyx_n_s_element, __pyx_k_element, sizeof(__pyx_k_element), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_exception_type, __pyx_k_exception_type, sizeof(__pyx_k_exception_type), 0, 0, 1, 1},
  {&__pyx_n_s_exception_value, __pyx_k_exception_value, sizeof(__pyx_k_exception_value), 0, 0, 1, 1},
  {&__pyx_n_s_file_name, __pyx_k_file_name, sizeof(__pyx_k_file_name), 0, 0, 1, 1},
  {&__pyx_n_s_function_name, __pyx_k_function_name, sizeof(__pyx_k_function_name), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_input_file_name, __pyx_k_input_file_name, sizeof(__pyx_k_input_file_name), 0, 0, 1, 1},
  {&__pyx_n_s_input_xdm_item, __pyx_k_input_xdm_item, sizeof(__pyx_k_input_xdm_item), 0, 0, 1, 1},
  {&__pyx_n_s_is_atomic, __pyx_k_is_atomic, sizeof(__pyx_k_is_atomic), 0, 0, 1, 1},
  {&__pyx_kp_s_is_not_an_PyXdmValue, __pyx_k_is_not_an_PyXdmValue, sizeof(__pyx_k_is_not_an_PyXdmValue), 0, 0, 1, 0},
  {&__pyx_kp_s_is_not_an_PyXdmValue_The_follow, __pyx_k_is_not_an_PyXdmValue_The_follow, sizeof(__pyx_k_is_not_an_PyXdmValue_The_follow), 0, 0, 1, 0},
  {&__pyx_n_s_isfile, __pyx_k_isfile, sizeof(__pyx_k_isfile), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_kwds, __pyx_k_kwds, sizeof(__pyx_k_kwds), 0, 0, 1, 1},
  {&__pyx_n_s_license, __pyx_k_license, sizeof(__pyx_k_license), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_namespace, __pyx_k_namespace, sizeof(__pyx_k_namespace), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_nodekind, __pyx_k_nodekind, sizeof(__pyx_k_nodekind), 0, 0, 1, 1},
  {&__pyx_n_s_os_path, __pyx_k_os_path, sizeof(__pyx_k_os_path), 0, 0, 1, 1},
  {&__pyx_n_s_output_file, __pyx_k_output_file, sizeof(__pyx_k_output_file), 0, 0, 1, 1},
  {&__pyx_n_s_output_file_name, __pyx_k_output_file_name, sizeof(__pyx_k_output_file_name), 0, 0, 1, 1},
  {&__pyx_n_s_parametersDict, __pyx_k_parametersDict, sizeof(__pyx_k_parametersDict), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_kp_s_processing_instruction, __pyx_k_processing_instruction, sizeof(__pyx_k_processing_instruction), 0, 0, 1, 0},
  {&__pyx_n_s_query_file, __pyx_k_query_file, sizeof(__pyx_k_query_file), 0, 0, 1, 1},
  {&__pyx_n_s_query_text, __pyx_k_query_text, sizeof(__pyx_k_query_text), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_save, __pyx_k_save, sizeof(__pyx_k_save), 0, 0, 1, 1},
  {&__pyx_n_s_setSourceFromXdmNode, __pyx_k_setSourceFromXdmNode, sizeof(__pyx_k_setSourceFromXdmNode), 0, 0, 1, 1},
  {&__pyx_n_s_set_context, __pyx_k_set_context, sizeof(__pyx_k_set_context), 0, 0, 1, 1},
  {&__pyx_n_s_set_output_file, __pyx_k_set_output_file, sizeof(__pyx_k_set_output_file), 0, 0, 1, 1},
  {&__pyx_n_s_set_query_content, __pyx_k_set_query_content, sizeof(__pyx_k_set_query_content), 0, 0, 1, 1},
  {&__pyx_n_s_set_query_file, __pyx_k_set_query_file, sizeof(__pyx_k_set_query_file), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_source_file, __pyx_k_source_file, sizeof(__pyx_k_source_file), 0, 0, 1, 1},
  {&__pyx_kp_s_source_file_name_does_not_exist, __pyx_k_source_file_name_does_not_exist, sizeof(__pyx_k_source_file_name_does_not_exist), 0, 0, 1, 0},
  {&__pyx_n_s_stylesheet_file, __pyx_k_stylesheet_file, sizeof(__pyx_k_stylesheet_file), 0, 0, 1, 1},
  {&__pyx_n_s_stylesheet_node, __pyx_k_stylesheet_node, sizeof(__pyx_k_stylesheet_node), 0, 0, 1, 1},
  {&__pyx_n_s_stylesheet_text, __pyx_k_stylesheet_text, sizeof(__pyx_k_stylesheet_text), 0, 0, 1, 1},
  {&__pyx_n_s_template_name, __pyx_k_template_name, sizeof(__pyx_k_template_name), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_traceback, __pyx_k_traceback, sizeof(__pyx_k_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_tunnel, __pyx_k_tunnel, sizeof(__pyx_k_tunnel), 0, 0, 1, 1},
  {&__pyx_n_s_unknown, __pyx_k_unknown, sizeof(__pyx_k_unknown), 0, 0, 1, 1},
  {&__pyx_n_s_uri, __pyx_k_uri, sizeof(__pyx_k_uri), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_value_type, __pyx_k_value_type, sizeof(__pyx_k_value_type), 0, 0, 1, 1},
  {&__pyx_n_s_xdm_item, __pyx_k_xdm_item, sizeof(__pyx_k_xdm_item), 0, 0, 1, 1},
  {&__pyx_kp_s_xdm_item_value_must_be_of_type_P, __pyx_k_xdm_item_value_must_be_of_type_P, sizeof(__pyx_k_xdm_item_value_must_be_of_type_P), 0, 0, 1, 0},
  {&__pyx_n_s_xdm_node, __pyx_k_xdm_node, sizeof(__pyx_k_xdm_node), 0, 0, 1, 1},
  {&__pyx_n_s_xdm_value, __pyx_k_xdm_value, sizeof(__pyx_k_xdm_value), 0, 0, 1, 1},
  {&__pyx_n_s_xml_file_name, __pyx_k_xml_file_name, sizeof(__pyx_k_xml_file_name), 0, 0, 1, 1},
  {&__pyx_n_s_xml_text, __pyx_k_xml_text, sizeof(__pyx_k_xml_text), 0, 0, 1, 1},
  {&__pyx_n_s_xml_uri, __pyx_k_xml_uri, sizeof(__pyx_k_xml_uri), 0, 0, 1, 1},
  {&__pyx_n_s_xsd_file, __pyx_k_xsd_file, sizeof(__pyx_k_xsd_file), 0, 0, 1, 1},
  {&__pyx_n_s_xsd_text, __pyx_k_xsd_text, sizeof(__pyx_k_xsd_text), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_Warning = __Pyx_GetBuiltinName(__pyx_n_s_Warning); if (!__pyx_builtin_Warning) __PYX_ERR(1, 684, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 1807, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 3459, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "saxonc.pyx":232
 *         val.thissvptr = self.thisptr.newSchemaValidator()
 *         if val.thissvptr is NULL:
 *             raise Exception("Error: Saxon Processor is not licensed for schema processing!")             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Error_Saxon_Processor_is_not_lic); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "saxonc.pyx":414
 *           py_filename_string = py_value.encode('UTF-8') if py_value is not None else None
 *           if py_filename_string  is None or isfile(py_filename_string) == False:
 *             raise Exception("XML file does not exist")             # <<<<<<<<<<<<<<
 *           c_xml_string = py_filename_string if py_value is not None else ""
 *           val = PyXdmNode()
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_XML_file_does_not_exist); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "saxonc.pyx":673
 *               py_source_string = value.encode('UTF-8') if value is not None else None
 *               if py_source_string  is None or isfile(py_source_string) == False:
 *                 raise Exception("source file name does not exist")             # <<<<<<<<<<<<<<
 *               c_sourcefile = py_source_string if value is not None else ""
 *             if key == "stylesheet_file":
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_source_file_name_does_not_exist); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "saxonc.pyx":678
 *               py_stylesheet_string = value.encode('UTF-8') if value is not None else None
 *               if py_stylesheet_string  is None or isfile(py_stylesheet_string) == False:
 *                 raise Exception("Stylesheet file does not exist")             # <<<<<<<<<<<<<<
 *               c_stylesheetfile = py_stylesheet_string if value is not None else ""
 *           elif key == "xdm_node":
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Stylesheet_file_does_not_exist); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "saxonc.pyx":684
 *               self.setSourceFromXdmNode(value)
 *           elif len(kwds) > 0:
 *             raise Warning("Warning: transform_to_string should only the following keyword arguments: (source_file, stylesheet_file, xdm_node)")             # <<<<<<<<<<<<<<
 * 
 *         cdef const char* c_string
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Warning_transform_to_string_shou); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "saxonc.pyx":848
 *           del kwds["save"]
 *           if "output_file" not in kwds:
 *             raise Exception("Output file option not in keyword arugment for compile_stylesheet")             # <<<<<<<<<<<<<<
 *           py_output_string = kwds["output_file"].encode('UTF-8')
 *           c_outputfile = py_output_string
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Output_file_option_not_in_keywor); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "saxonc.pyx":1018
 *                 self.thisxptr.setGlobalContextItem(xdm_item.derivedptr)
 *             else:
 *                 raise Exception("xdm_item value must be of type PyXdmItem")             # <<<<<<<<<<<<<<
 *         else:
 *           raise Exception(py_error_message)
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_xdm_item_value_must_be_of_type_P); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "saxonc.pyx":1239
 *                         parameters[key_str] = <saxoncClasses.XdmValue *> value_.derivedaptr
 *                 else:
 *                         raise Exception("Initial template parameters can only be of type PyXdmValue")             # <<<<<<<<<<<<<<
 *         if len(kwds) > 0:
 *             self.thisxptr.setInitialTemplateParameters(parameters, c_tunnel);
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Initial_template_parameters_can); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "saxonc.pyx":1295
 *               node_ = value
 *           elif len(kwds) > 0:
 *             raise Warning("Warning: transform_to_string should only contain the following keyword arguments: (source_file|xdm_node, stylesheet_file)")             # <<<<<<<<<<<<<<
 * 
 *         cdef const char* c_string
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Warning_transform_to_string_shou_2); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "saxonc.pyx":2431
 *           self.set_output_file(kwds["output_file_name"])
 *         else:
 *           raise Exception("Error: output_file_name required in method run_query_to_file")             # <<<<<<<<<<<<<<
 * 
 *         if "query_file" in kwds:
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Error_output_file_name_required); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "saxonc.pyx":2956
 *             self.thissvptr.setOutputFile(c_source)
 *         else:
 *             raise Warning("Unable to set output_file. output_file has the value None")             # <<<<<<<<<<<<<<
 *      def validate(self, **kwds):
 *         """
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_set_output_file_output); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 2956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "saxonc.pyx":3289
 *         cdef const char* c_string = self.thisvptr.toString()
 *         if c_string == NULL:
 *             raise Warning('Empty string returned')             # <<<<<<<<<<<<<<
 *         else:
 *             ustring = c_string.decode('UTF-8') if c_string is not NULL else None
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_Empty_string_returned); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 3289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "saxonc.pyx":3358
 *         cdef PyXdmNode val = None
 *         if self.is_atomic:
 *           raise Exception("The PyXdmItem is an PyXdmAtomicValue therefore cannot be sub-classed to an PyXdmNode")             # <<<<<<<<<<<<<<
 *         val = PyXdmNode()
 *         val.derivednptr = val.derivedptr = <saxoncClasses.XdmNode*> self.derivedptr
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_The_PyXdmItem_is_an_PyXdmAtomicV); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 3358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "saxonc.pyx":3385
 *         """
 *         if self.is_atomic == False:
 *           raise Exception("The PyXdmItem is not an PyXdmAtomicValue")             # <<<<<<<<<<<<<<
 *         val = PyXdmAtomicValue()
 *         val.derivedaptr = val.derivedptr = <saxoncClasses.XdmAtomicValue*>self.derivedptr
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_The_PyXdmItem_is_not_an_PyXdmAto); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 3385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_items.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyString_Type_encode.type = (PyObject*)&PyString_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6saxonc_PySaxonProcessor) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6saxonc_PySaxonProcessor.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6saxonc_PySaxonProcessor.tp_dictoffset && __pyx_type_6saxonc_PySaxonProcessor.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6saxonc_PySaxonProcessor.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PySaxonProcessor, (PyObject *)&__pyx_type_6saxonc_PySaxonProcessor) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6saxonc_PySaxonProcessor) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  __pyx_ptype_6saxonc_PySaxonProcessor = &__pyx_type_6saxonc_PySaxonProcessor;
  if (PyType_Ready(&__pyx_type_6saxonc_PyXsltProcessor) < 0) __PYX_ERR(1, 449, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6saxonc_PyXsltProcessor.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6saxonc_PyXsltProcessor.tp_dictoffset && __pyx_type_6saxonc_PyXsltProcessor.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6saxonc_PyXsltProcessor.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyXsltProcessor, (PyObject *)&__pyx_type_6saxonc_PyXsltProcessor) < 0) __PYX_ERR(1, 449, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6saxonc_PyXsltProcessor) < 0) __PYX_ERR(1, 449, __pyx_L1_error)
  __pyx_ptype_6saxonc_PyXsltProcessor = &__pyx_type_6saxonc_PyXsltProcessor;
  if (PyType_Ready(&__pyx_type_6saxonc_PyXslt30Processor) < 0) __PYX_ERR(1, 967, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6saxonc_PyXslt30Processor.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6saxonc_PyXslt30Processor.tp_dictoffset && __pyx_type_6saxonc_PyXslt30Processor.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6saxonc_PyXslt30Processor.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyXslt30Processor, (PyObject *)&__pyx_type_6saxonc_PyXslt30Processor) < 0) __PYX_ERR(1, 967, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6saxonc_PyXslt30Processor) < 0) __PYX_ERR(1, 967, __pyx_L1_error)
  __pyx_ptype_6saxonc_PyXslt30Processor = &__pyx_type_6saxonc_PyXslt30Processor;
  if (PyType_Ready(&__pyx_type_6saxonc_PyXQueryProcessor) < 0) __PYX_ERR(1, 2190, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6saxonc_PyXQueryProcessor.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6saxonc_PyXQueryProcessor.tp_dictoffset && __pyx_type_6saxonc_PyXQueryProcessor.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6saxonc_PyXQueryProcessor.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyXQueryProcessor, (PyObject *)&__pyx_type_6saxonc_PyXQueryProcessor) < 0) __PYX_ERR(1, 2190, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6saxonc_PyXQueryProcessor) < 0) __PYX_ERR(1, 2190, __pyx_L1_error)
  __pyx_ptype_6saxonc_PyXQueryProcessor = &__pyx_type_6saxonc_PyXQueryProcessor;
  if (PyType_Ready(&__pyx_type_6saxonc_PyXPathProcessor) < 0) __PYX_ERR(1, 2574, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6saxonc_PyXPathProcessor.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6saxonc_PyXPathProcessor.tp_dictoffset && __pyx_type_6saxonc_PyXPathProcessor.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6saxonc_PyXPathProcessor.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyXPathProcessor, (PyObject *)&__pyx_type_6saxonc_PyXPathProcessor) < 0) __PYX_ERR(1, 2574, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6saxonc_PyXPathProcessor) < 0) __PYX_ERR(1, 2574, __pyx_L1_error)
  __pyx_ptype_6saxonc_PyXPathProcessor = &__pyx_type_6saxonc_PyXPathProcessor;
  if (PyType_Ready(&__pyx_type_6saxonc_PySchemaValidator) < 0) __PYX_ERR(1, 2891, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6saxonc_PySchemaValidator.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6saxonc_PySchemaValidator.tp_dictoffset && __pyx_type_6saxonc_PySchemaValidator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6saxonc_PySchemaValidator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PySchemaValidator, (PyObject *)&__pyx_type_6saxonc_PySchemaValidator) < 0) __PYX_ERR(1, 2891, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6saxonc_PySchemaValidator) < 0) __PYX_ERR(1, 2891, __pyx_L1_error)
  __pyx_ptype_6saxonc_PySchemaValidator = &__pyx_type_6saxonc_PySchemaValidator;
  if (PyType_Ready(&__pyx_type_6saxonc_PyXdmValue) < 0) __PYX_ERR(1, 3202, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6saxonc_PyXdmValue.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6saxonc_PyXdmValue.tp_dictoffset && __pyx_type_6saxonc_PyXdmValue.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6saxonc_PyXdmValue.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6saxonc_PyXdmValue, "__repr__"); if (unlikely(!wrapper)) __PYX_ERR(1, 3202, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6saxonc_10PyXdmValue_8__repr__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6saxonc_10PyXdmValue_8__repr__.doc = __pyx_doc_6saxonc_10PyXdmValue_8__repr__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6saxonc_10PyXdmValue_8__repr__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6saxonc_PyXdmValue, "__str__"); if (unlikely(!wrapper)) __PYX_ERR(1, 3202, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6saxonc_10PyXdmValue_10__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6saxonc_10PyXdmValue_10__str__.doc = __pyx_doc_6saxonc_10PyXdmValue_10__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6saxonc_10PyXdmValue_10__str__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyXdmValue, (PyObject *)&__pyx_type_6saxonc_PyXdmValue) < 0) __PYX_ERR(1, 3202, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6saxonc_PyXdmValue) < 0) __PYX_ERR(1, 3202, __pyx_L1_error)
  __pyx_ptype_6saxonc_PyXdmValue = &__pyx_type_6saxonc_PyXdmValue;
  __pyx_type_6saxonc_PyXdmItem.tp_base = __pyx_ptype_6saxonc_PyXdmValue;
  if (PyType_Ready(&__pyx_type_6saxonc_PyXdmItem) < 0) __PYX_ERR(1, 3304, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6saxonc_PyXdmItem.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6saxonc_PyXdmItem.tp_dictoffset && __pyx_type_6saxonc_PyXdmItem.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6saxonc_PyXdmItem.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyXdmItem, (PyObject *)&__pyx_type_6saxonc_PyXdmItem) < 0) __PYX_ERR(1, 3304, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6saxonc_PyXdmItem) < 0) __PYX_ERR(1, 3304, __pyx_L1_error)
  __pyx_ptype_6saxonc_PyXdmItem = &__pyx_type_6saxonc_PyXdmItem;
  __pyx_type_6saxonc_PyXdmNode.tp_base = __pyx_ptype_6saxonc_PyXdmItem;
  if (PyType_Ready(&__pyx_type_6saxonc_PyXdmNode) < 0) __PYX_ERR(1, 3391, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6saxonc_PyXdmNode.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6saxonc_PyXdmNode.tp_dictoffset && __pyx_type_6saxonc_PyXdmNode.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6saxonc_PyXdmNode.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6saxonc_PyXdmNode, "__str__"); if (unlikely(!wrapper)) __PYX_ERR(1, 3391, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6saxonc_9PyXdmNode_4__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6saxonc_9PyXdmNode_4__str__.doc = __pyx_doc_6saxonc_9PyXdmNode_4__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6saxonc_9PyXdmNode_4__str__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6saxonc_PyXdmNode, "__repr__"); if (unlikely(!wrapper)) __PYX_ERR(1, 3391, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6saxonc_9PyXdmNode_6__repr__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6saxonc_9PyXdmNode_6__repr__.doc = __pyx_doc_6saxonc_9PyXdmNode_6__repr__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6saxonc_9PyXdmNode_6__repr__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyXdmNode, (PyObject *)&__pyx_type_6saxonc_PyXdmNode) < 0) __PYX_ERR(1, 3391, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6saxonc_PyXdmNode) < 0) __PYX_ERR(1, 3391, __pyx_L1_error)
  __pyx_ptype_6saxonc_PyXdmNode = &__pyx_type_6saxonc_PyXdmNode;
  __pyx_type_6saxonc_PyXdmAtomicValue.tp_base = __pyx_ptype_6saxonc_PyXdmItem;
  if (PyType_Ready(&__pyx_type_6saxonc_PyXdmAtomicValue) < 0) __PYX_ERR(1, 3637, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6saxonc_PyXdmAtomicValue.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6saxonc_PyXdmAtomicValue.tp_dictoffset && __pyx_type_6saxonc_PyXdmAtomicValue.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6saxonc_PyXdmAtomicValue.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6saxonc_PyXdmAtomicValue, "__str__"); if (unlikely(!wrapper)) __PYX_ERR(1, 3637, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6saxonc_16PyXdmAtomicValue_4__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6saxonc_16PyXdmAtomicValue_4__str__.doc = __pyx_doc_6saxonc_16PyXdmAtomicValue_4__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6saxonc_16PyXdmAtomicValue_4__str__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6saxonc_PyXdmAtomicValue, "__repr__"); if (unlikely(!wrapper)) __PYX_ERR(1, 3637, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6saxonc_16PyXdmAtomicValue_6__repr__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6saxonc_16PyXdmAtomicValue_6__repr__.doc = __pyx_doc_6saxonc_16PyXdmAtomicValue_6__repr__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6saxonc_16PyXdmAtomicValue_6__repr__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyXdmAtomicValue, (PyObject *)&__pyx_type_6saxonc_PyXdmAtomicValue) < 0) __PYX_ERR(1, 3637, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6saxonc_PyXdmAtomicValue) < 0) __PYX_ERR(1, 3637, __pyx_L1_error)
  __pyx_ptype_6saxonc_PyXdmAtomicValue = &__pyx_type_6saxonc_PyXdmAtomicValue;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initsaxonc(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initsaxonc(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_saxonc(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_saxonc(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_saxonc(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'saxonc' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_saxonc(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("saxonc", __pyx_methods, __pyx_k_package_saxonc_This_documentati, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_saxonc) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "saxonc")) {
      if (unlikely(PyDict_SetItemString(modules, "saxonc", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "saxonc.pyx":16
 * from libcpp.string cimport string
 * from libcpp.map cimport map
 * from nodekind import *             # <<<<<<<<<<<<<<
 * from os.path import isfile
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__36);
  __Pyx_GIVEREF(__pyx_n_s__36);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__36);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_nodekind, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_import_star(__pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "saxonc.pyx":17
 * from libcpp.map cimport map
 * from nodekind import *
 * from os.path import isfile             # <<<<<<<<<<<<<<
 * 
 * cdef const char * make_c_str(str str_value):
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_isfile);
  __Pyx_GIVEREF(__pyx_n_s_isfile);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_isfile);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os_path, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_isfile); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isfile, __pyx_t_2) < 0) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "saxonc.pyx":965
 *         return ustring
 * 
 * parametersDict = None             # <<<<<<<<<<<<<<
 * 
 * cdef class PyXslt30Processor:
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_parametersDict, Py_None) < 0) __PYX_ERR(1, 965, __pyx_L1_error)

  /* "saxonc.pyx":1
 * """@package saxonc             # <<<<<<<<<<<<<<
 * This documentation details the Python API for Saxon/C, which has been written in cython for Python3.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init saxonc", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init saxonc");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_items */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return PyDict_Items(d);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CStringEquals */
static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    return *s1 == *s2;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
